
---From: Beyond regular model checking, Dana Fisman and Amir Pnueli
--- 
---    repeat
---       for p := 1 to N - 1 do
---ready:    (P[i], S[p]) := (p, i)
---wait:     await S[p] != i  or  ALL j!=i. P[j] < P[i]
---crit:  P[i] := 0
---    forever

fmod NUMBERS is
  sort Number .
  op 0 : -> Number [ctor] .
  op s : -> Number [ctor] .
  op __ : Number Number -> Number [ctor comm assoc id: 0] .
endfm


fmod PROCS is
  sort Proc .
  op * : -> Proc [ctor] .

  sort ProcSet EmptyProcSet NEProcSet .
  subsorts Proc < NEProcSet < ProcSet .
  subsort EmptyProcSet < ProcSet .
  op none : -> EmptyProcSet [ctor] .
  op __ : ProcSet ProcSet -> ProcSet [ctor comm assoc id: none] .
  op __ : EmptyProcSet EmptyProcSet -> EmptyProcSet [ctor ditto] .
  op __ : NEProcSet NEProcSet -> NEProcSet [ctor ditto] .
endfm

fmod BAGS is
  pr PROCS .
  pr NUMBERS .

  sorts Bag EmptyBag NEBag .
  subsorts EmptyBag NEBag < Bag .
  op [_|_] : Number ProcSet -> Bag [ctor] .
  op [_|_] : Number EmptyProcSet -> EmptyBag [ctor] .
  op [_|_] : Number NEProcSet -> NEBag [ctor] .
endfm

fmod BAGLISTS is
  pr BAGS .

  --- right associative list: b1 :: (b2 :: (b3 :: ....
  sorts RBagList REmptyBagList RNEBagList .
  subsorts REmptyBagList RNEBagList < RBagList .
  op nilr : -> REmptyBagList [ctor] .
  op _::_ : Bag RBagList -> RBagList [ctor] .
  op _::_ : NEBag RBagList -> RNEBagList [ctor] .
  op _::_ : EmptyBag RNEBagList -> RNEBagList [ctor] .
  op _::_ : EmptyBag REmptyBagList -> REmptyBagList [ctor] .

  --- left associative list: (... @ b3 ) @ b2 @ b1
  sorts LBagList LEmptyBagList LNEBagList .
  subsorts LEmptyBagList LNEBagList < LBagList .
  op nill : -> LEmptyBagList [ctor] .
  op _@_ : LBagList Bag -> LBagList [ctor] .
  op _@_ : LBagList NEBag -> LNEBagList [ctor] .
  op _@_ : LNEBagList EmptyBag -> LNEBagList [ctor] .
  op _@_ : LEmptyBagList EmptyBag -> LEmptyBagList [ctor] .
endfm

mod PETERSON-MUTEX is
  pr BAGLISTS .

  --- #process, #idleProcess | nill / PR1 :: PR2 :: PR3
  sort Conf .
  op _,_|_/_ : Number Number LBagList RBagList -> Conf .

  vars I J N M : Number .  vars PS PS' : ProcSet . 
  var B : Bag .  var LBS : LBagList . 
  var RBS : RBagList . var RNBS : RNEBagList . var REBS : REmptyBagList .

--- we can change a focus to any position
  rl [movel]: N,M | LBS @ B  / RBS   => N,M | LBS / B :: RBS [narrowing] .
  rl [mover]: N,M | LBS / B :: RNBS  => N,M | LBS @ B /  RNBS [narrowing] .

--- an idle proc can increase its priority
  rl [l0]: N,s M | nill / [0 | PS]   :: RBS 
        => N,  M | nill / [0 | * PS] :: RBS [narrowing] .

--- a proc can increase it priority if it has the single maximum priority
  rl [lM]: N,M | LBS / [I |    *] :: [s I | none] :: REBS
        => N,M | LBS / [I | none] :: [s I |    *] :: REBS [narrowing] .

--- a proc can increase its priority if at least procs have the same priority
  rl [lK]: N,M | LBS / [I | * * PS] :: [s I |   PS'] :: RBS
        => N,M | LBS / [I |   * PS] :: [s I | * PS'] :: RBS [narrowing] .

--- a proc in critical section can go to idle status
  rl [lC]: s N,  M | LBS / [N | * PS] :: nilr
        => s N,s M | LBS / [N |   PS] :: nilr [narrowing] .
endm

---(
search s s s, s s s | nill / [0 | none] :: [s | none] :: [s s | none] :: nilr
   =>* C:Conf .
---)

load symbolic-checker

(mod PETERSON-MUTEX-SATISFACTION is
  pr SYMBOLIC-CHECKER .
  pr PETERSON-MUTEX .

  subsort Conf < State .

  ops ex? : -> Prop . 

  vars I J N M : Number .  vars PS PS' : ProcSet . 
  var LBS : LBagList .  var RBS : RBagList .  
  var LEBS : LEmptyBagList . var REBS : REmptyBagList .

  eq s N,M | LBS / [N |   none] :: RBS |= ex? = true  [variant] .
  eq s N,M | LBS / [N |      *] :: RBS |= ex? = true  [variant] .
  eq s N,M | LBS / [N | * * PS] :: RBS |= ex? = false [variant] .

---NOTE: some violation can happen in RBS, but it is anyway reachable
  eq s N s I,M | LBS / [I | PS]       :: RBS |= ex? = true [variant] .
  eq       N,M | LBS / [s N s I | PS] :: RBS |= ex? = true [variant] .
  eq       N,M | LBS / nilr                  |= ex? = true [variant] .
endm)

---(
(lfmc [10] N,N | nill / REBS |= [] ex? .)
---)

(mod PETERSON-MUTEX-SATISFACTION-ABS is
  pr PETERSON-MUTEX-SATISFACTION .

  vars I J N M : Number .  vars PS PS' : ProcSet . var ES ES' : EmptyProcSet .
  var LBS : LBagList .  var RBS : RBagList .  
  var LEBS : LEmptyBagList . var REBS : REmptyBagList .

  eq s s I N, N | nill / [0 | * * * ES] :: RBS
   =   s I N, N | nill / [0 |   * * ES] :: RBS [variant] .

  eq s s I N, N | nill / [0 | PS] :: [s | * * * ES] :: RBS
   =   s I N, N | nill / [0 | PS] :: [s |   * * ES] :: RBS [variant] .

  eq s s I N, N | nill / [0 | * * ES] :: [s | * * ES'] :: RBS
   =     I N, N | nill / [0 | * * ES] :: [s |     ES'] :: RBS [variant] .
endm)

set verbose on .

(lfmc N,N | nill / REBS |= [] ex? .)

