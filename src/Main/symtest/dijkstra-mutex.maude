
--- The Dijkstra's mutual exclusion algorithms in Maude
--- From: Nancy Ann Lynch, Distributed algorithms, Morgan Kaufmann, 1996
---
--- l0: repeat
--- l1:   flag[i] := 1
--- l2:   while turn != i do 
---         if flag[turn] = 0 then turn := i
--- l3:   flag[i] := 2
--- l4:   for j != i do
---         if flag[j] = 2 then goto l1
--- crit:
--- l5:   flag[i] := 0

mod DIJKSTRA-MUTEX-PROC is
  sort Flag InitFlag WaitFlag .
  subsort InitFlag < WaitFlag < Flag .
  op 0 : -> InitFlag [ctor] .
  op 1 : -> WaitFlag [ctor] .
  op 2 : -> Flag [ctor] .

  sort Status InitStatus NCrtStatus .
  subsort InitStatus < NCrtStatus < Status .
  op l0 : -> InitStatus [ctor] .
  ops l1 l2 l3 l5 : -> NCrtStatus [ctor] .
  op crit : -> Status [ctor] .

  sort Turn CTurn .
  subsort Turn < CTurn .
  op ! : -> CTurn [ctor] .
  op - : -> Turn [ctor] .

  sorts Proc InitProc WaitProc NCrtProc WNCrProc .
  subsorts InitProc < WNCrProc < WaitProc NCrtProc < Proc .
  op {_,_,_} : Flag Status Turn -> Proc [ctor] .
  op {_,_,_} : InitFlag InitStatus Turn -> InitProc [ctor] .
  op {_,_,_} : WaitFlag NCrtStatus Turn -> WNCrProc [ctor] .
  op {_,_,_} : WaitFlag Status Turn -> WaitProc [ctor] .
  op {_,_,_} : Flag NCrtStatus Turn -> NCrtProc [ctor] .

  sorts CProc CInitProc CWaitProc CNCrtProc CWNCrProc .
  subsort Proc < CProc .
  subsort InitProc < CInitProc .
  subsort WaitProc < CWaitProc .
  subsort NCrtProc < CNCrtProc .
  subsort WNCrProc < CWNCrProc .
  subsorts CInitProc < CWNCrProc < CWaitProc CNCrtProc < CProc .
  op {_,_,_} : Flag Status CTurn -> CProc [ctor] .
  op {_,_,_} : InitFlag InitStatus CTurn -> CInitProc [ctor] .
  op {_,_,_} : WaitFlag NCrtStatus CTurn -> CWNCrProc [ctor] .
  op {_,_,_} : WaitFlag Status CTurn -> CWaitProc [ctor] .
  op {_,_,_} : Flag NCrtStatus CTurn -> CNCrtProc [ctor] .
endm

mod DIJKSTRA-MUTEX-CONF is
  pr DIJKSTRA-MUTEX-PROC .

  sort Conf .
  op <_> : CProcSet -> Conf [ctor] .

  sorts ProcSet InitProcSet WaitProcSet NCrtProcSet WNCrProcSet .
  subsort Proc < ProcSet .
  subsort InitProc < InitProcSet .
  subsort WaitProc < WaitProcSet .
  subsort NCrtProc < NCrtProcSet .
  subsort WNCrProc < WNCrProcSet .
  subsorts InitProcSet < WNCrProcSet < WaitProcSet NCrtProcSet < ProcSet .
  op none : -> InitProcSet [ctor] .
  op __ : ProcSet ProcSet -> ProcSet [ctor comm assoc id: none] .
  op __ : InitProcSet InitProcSet -> InitProcSet [ctor ditto] .
  op __ : WaitProcSet WaitProcSet -> WaitProcSet [ctor ditto] .
  op __ : NCrtProcSet NCrtProcSet -> NCrtProcSet [ctor ditto] .
  op __ : WNCrProcSet WNCrProcSet -> WNCrProcSet [ctor ditto] .

--- only one flag is allowed
  sorts CProcSet CInitProcSet CWaitProcSet CNCrtProcSet CWNCrProcSet .
  subsort CProc ProcSet < CProcSet .
  subsort CInitProc InitProcSet < CInitProcSet .
  subsort CWaitProc WaitProcSet < CWaitProcSet .
  subsort CNCrtProc NCrtProcSet < CNCrtProcSet .
  subsort CWNCrProc WNCrProcSet < CWNCrProcSet .
  subsorts CInitProcSet < CWNCrProcSet < CWaitProcSet CNCrtProcSet < CProcSet .
  op __ : ProcSet CProcSet -> CProcSet [ctor ditto] .
  op __ : CProcSet ProcSet -> CProcSet [ctor ditto] .
  op __ : CInitProcSet InitProcSet -> CInitProcSet [ctor ditto] .
  op __ : InitProcSet CInitProcSet -> CInitProcSet [ctor ditto] .
  op __ : CWaitProcSet WaitProcSet -> CWaitProcSet [ctor ditto] .
  op __ : WaitProcSet CWaitProcSet -> CWaitProcSet [ctor ditto] .
  op __ : CNCrtProcSet NCrtProcSet -> CNCrtProcSet [ctor ditto] .
  op __ : NCrtProcSet CNCrtProcSet -> CNCrtProcSet [ctor ditto] .
  op __ : CWNCrProcSet WNCrProcSet -> CWNCrProcSet [ctor ditto] .
  op __ : WNCrProcSet CWNCrProcSet -> CWNCrProcSet [ctor ditto] .
endm

mod DIJKSTRA-MUTEX is
  including DIJKSTRA-MUTEX-CONF .

  var F : Flag . var S : Status . 
  var CPS : CProcSet . var PS : ProcSet . 
  var CWS : CWaitProcSet . var WS : WaitProcSet .

  rl [l1]  : < {F,l0,-} CPS >          => < {1,l1,-} CPS > .
  rl [l1]  : < {F,l0,!} PS >           => < {1,l1,!} PS > .

  rl [l2]  : < {F,l1,-} {0,S,!} PS >   => < {F,l1,!} {0,S,-} PS > .
  rl [l2]  : < {F,l1,!} PS >           => < {F,l2,!} PS > .

  rl [l3]  : < {F,l2,-} CPS >          => < {2,l3,-} CPS > .
  rl [l3]  : < {F,l2,!} PS >           => < {2,l3,!} PS > .

  rl [l4]  : < {F,l3,-} CWS >          => < {F,crit,-} CWS > .
  rl [l4]  : < {F,l3,!} WS >           => < {F,crit,!} WS > .
  rl [l4]  : < {F,l3,-} {2,S,-} CPS >  => < {1,l1,-} {2,S,-} CPS > .
  rl [l4]  : < {F,l3,!} {2,S,-} PS >   => < {1,l1,!} {2,S,-} PS > .
  rl [l4]  : < {F,l3,-} {2,S,!} PS >   => < {1,l1,-} {2,S,!} PS > .

  rl [l5]  : < {F,crit,-} CPS >        => < {0,l5,-} CPS > .
  rl [l5]  : < {F,crit,!} PS >         => < {0,l5,!} PS > .

  rl [l0] : < {F,l5,-} CPS >           => < {F,l0,-} CPS > .
  rl [l0] : < {F,l5,!} PS >            => < {F,l0,!} PS > .
endm

load symbolic-checker

(mod DIJKSTRA-MUTEX-SATISFACTION is
  pr SYMBOLIC-CHECKER .
  pr DIJKSTRA-MUTEX .

  subsort Conf < State .

  ops ex? : -> Prop . 

  vars F F' : Flag . var S : Status . 
  var CPS : CProcSet .     var PS : ProcSet . 
  var CNS : CNCrtProcSet . var NS : NCrtProcSet .
  var CIS : CInitProcSet .

  eq < CNS >                        |= ex? = true  [variant] .
  eq < {F,crit,-} CNS >             |= ex? = true  [variant] .
  eq < {F,crit,!} NS >              |= ex? = true  [variant] .
  eq < {F,crit,-} {F',crit,-} CPS > |= ex? = false [variant] .
  eq < {F,crit,!} {F',crit,-} PS >  |= ex? = false [variant] .
  eq < {F,crit,-} {F',crit,!} PS >  |= ex? = false [variant] .
endm)

---(
(lfmc [20] < CIS > |= [] ex? .)
---)

(mod DIJKSTRA-MUTEX-SATISFACTION-WIDENING is
  pr DIJKSTRA-MUTEX-SATISFACTION .

  var F : Flag . var CPS : CProcSet . var CIS : CInitProcSet .

  --- also need to check coherence (it seems to be coherence)
  eq < {F,l1,-} {F,l1,-} CPS > = < {F,l1,-} CPS > [variant] .
  eq < {F,l5,-} {F,l5,-} CPS > = < {F,l5,-} CPS > [variant] .
endm)

---   true (complete with depth 16)
(lfmc < CIS > |= [] ex?  .)

