

mod MYSTERY is
  sort S S? .
  subsort S < S? .
  op * : -> S? [ctor] .
  op 0 : -> S [ctor] .
  op s : S -> S [ctor] .
  op s : S? -> S? [ctor] .

  sort Conf .
  op [_] : S? -> Conf [ctor] .
  op >< : -> Conf [ctor] .

  rl [0] => [s(0)] .
  rl [s(N:S?)] => [s(s(N:S?))] .
  rl [s(*)] => >< .
endm


load symbolic-checker

(mod MYSTERY-SATISFACTION is
  pr SYMBOLIC-CHECKER .
  pr MYSTERY .

  subsort Conf < State .

  op safe : -> Prop [ctor] .

  eq [0]       |= safe = true  [variant] .
  eq [*]       |= safe = true  [variant] .
  eq [s(N:S?)] |= safe = true  [variant] .
  eq ><        |= safe = false [variant] .
endm)

--- spurious counter example, though there is another real counter example
(lfmc [N?:S?] |= [] safe  .)

(lfmc [N:S] |= [] safe  .)

