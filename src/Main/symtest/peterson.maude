
---From: Beyond regular model checking, Dana Fisman and Amir Pnueli
--- 
---    repeat
---       for p := 1 to N - 1 do
---ready:    (P[i], S[p]) := (p, i)
---wait:     await S[p] != i  or  ALL j!=i. P[j] < P[i]
---crit:  P[i] := 0
---    forever

fmod NUMBERS is
  sorts Number NzNumber .
  subsort NzNumber < Number .
  op 0 : -> Number [ctor] .
  op s : -> NzNumber [ctor] .
  op __ : Number Number -> Number [ctor comm assoc id: 0] .
  op __ : NzNumber NzNumber -> NzNumber [ctor ditto] .
endfm

fmod PETERSON-PROC is
  protecting NUMBERS .

  sorts Proc WaitProc InitProc .
  subsorts InitProc < WaitProc < Proc .
  op [_,_,_] : Number NzNumber Status -> Proc .
  op [_,_,_] : Number NzNumber WaitStatus -> WaitProc .
  op [_] : Number -> InitProc .

  sorts Status WaitStatus .
  subsorts WaitStatus < Status .
  ops ready wait : -> WaitStatus .
  op crit : -> Status .
endfm

fmod PETERSON-PROCSET is
  protecting PETERSON-PROC .

  sorts ProcSet WaitProcSet InitProcSet .
  subsort InitProc < InitProcSet .
  subsort WaitProc < WaitProcSet .
  subsort Proc < ProcSet .
  subsorts InitProcSet < WaitProcSet < ProcSet .
  op none : -> InitProcSet [ctor] .
  op __ : InitProcSet InitProcSet -> InitProcSet [ctor comm assoc id: none] .
  op __ : WaitProcSet WaitProcSet -> WaitProcSet [ctor ditto] .
  op __ : ProcSet ProcSet -> ProcSet [ctor ditto] .
endfm

fmod PETERSON-CONF is
  protecting PETERSON-PROCSET .

  sort Conf .
  op <_|_|_> : Number VarSet ProcSetPair -> Conf [ctor] .

  sorts Var VarSet .
  subsort Var < VarSet .
  op [_,_] : NzNumber Number -> Var [ctor] .
  op empty : -> VarSet [ctor] .
  op __ : VarSet VarSet -> VarSet [ctor comm assoc id: empty] .

  sort ProcSetPair .
  op _|_ : ProcSet ProcSet -> ProcSetPair [ctor] .
endfm

mod PETERSON-MUTEX is
  pr PETERSON-CONF .

  vars N I J K : Number . vars P P' : NzNumber . vars S S' : Status .
  vars PS1 PS2 : ProcSet .  var VS : VarSet .

--- required condition: there is only one variable assignment for each priority...
--- not guaranteed currently.

  rl [r0]  : < N | VS [s,K] | PS1 [I] | PS2 > 
          => < N | VS [s,I] | none | PS1 [I,s,wait] PS2 > .

  rl [r0]  : < N | VS [s,K] | PS1 | PS2 [I] > 
          => < N | VS [s,I] | none | PS1 [I,s,wait] PS2 > .

  rl [r1]  : < N | VS [s P,K] | [I,P,ready] PS1 | PS2 >
          => < N | VS [s P,I] | none | [I,s P,wait] PS1 PS2 > .

  rl [r1]  : < N | VS [s P,K] | PS1 | PS2 [I,P,ready] >
          => < N | VS [s P,I] | none | PS1 PS2 [I,s P,wait] > .

  rl [c]   : < N | VS | PS1 | [I,P,S] PS2 [J,s K P,S'] >
          => < N | VS | PS1 [I,P,S] | PS2 [J,s K P,S'] > .

  rl [c]   : < N | VS | PS1 | [I] PS2 >
          => < N | VS | PS1 [I] | PS2 > .

  rl [wa]  : < N | VS [P,s J I] | [I,P,wait]  PS1 | PS2 >
          => < N | VS [P,s J I] | [I,P,ready] PS1 | PS2 > .

  rl [wa]  : < N | VS [P,J] | [s I J,P,wait]  PS1 | PS2 >
          => < N | VS [P,J] | [s I J,P,ready] PS1 | PS2 > .

  rl [wb]  : < N | VS | PS1 | [I,P,wait]  >
          => < N | VS | PS1 | [I,P,ready] > .

  rl [crit]: < s N | VS | PS1 | PS2 [I,N,ready] >
          => < s N | VS | PS1 | PS2 [I,N,crit]  > .

  rl [crit]: < s N | VS | [I,N,ready] PS1 | PS2 >
          => < s N | VS | [I,N,crit]  PS1 | PS2 > .
	   
  rl [exit]: < N | VS | [I,N,crit] PS1 | PS2 >
          => < N | VS | none | [I] PS1 PS2 > .

  rl [exit]: < N | VS | PS1 | PS2 [I,N,crit] >
          => < N | VS | none | PS1 PS2 [I]   > .
endm

--- search < s s s | [s,0] [s s,0] | none | [0] [s] [s s] > =>* C:Conf .

load symbolic-checker .

(mod PETERSON-MUTEX-SATISFACTION is
  pr SYMBOLIC-CHECKER .
  pr PETERSON-MUTEX .

  subsort Conf < State .

  ops ex? : -> Prop . 

  vars N I J K L : Number . vars P P' : NzNumber . vars S S' : Status .
  vars PS1 PS2 : ProcSet . vars WS1 WS2 : WaitProcSet .  var VS : VarSet .

  eq < N | VS | WS1 | WS2 >                        |= ex? = true  [variant] .
  eq < N | VS | [I,K,crit] WS1 | WS2 >             |= ex? = true  [variant] .
  eq < N | VS | WS1 | [I,K,crit] WS2 >             |= ex? = true  [variant] .
  eq < N | VS | [I,K,crit] [J,L,crit] PS1 | PS2 >  |= ex? = false  [variant] .
  eq < N | VS | [I,K,crit] PS1 | [J,L,crit] PS2 >  |= ex? = false  [variant] .
  eq < N | VS | PS1 | [I,K,crit] [J,L,crit] PS2 >  |= ex? = false  [variant] .
endm)

---(
(lfmc [20] < N | VS | none | IS:InitProcSet > |= [] ex? .)
---)

(mod PETERSON-MUTEX-SATISFACTION-ABS is
  pr PETERSON-MUTEX-SATISFACTION .

  vars N I J K L : Number . vars P P' : NzNumber . vars S S' : Status .
  var IS : InitProcSet . vars PS PS1 PS2 : ProcSet . var VS : VarSet .

  eq < N | VS | [I] [J] | PS >  =  < N | VS | [I] | PS > [variant] .

  eq < N | VS | PS | IS [I,s,wait] [J,s,wait] [K,s,wait] >
   = < N | VS | PS | IS [I,s,wait] [J,s,wait] > [variant] .

endm)

(lfmc < N | VS | none | IS > |= [] ex? .)


