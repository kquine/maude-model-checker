load symbolic-checker

--- bakery model
(fmod BAKERY-SYNTAX is 
  sort Nat' .
  op 0 : -> Nat' [ctor] .
  op s : Nat' -> Nat' [ctor] .

  sorts ModeIdle ModeWait ModeCrit Mode . 
  subsorts ModeIdle ModeWait ModeCrit < Mode . 
  sorts ProcIdle ProcWait Proc ProcIdleSet ProcWaitSet ProcSet . 
  subsorts ProcIdle < ProcIdleSet . 
  subsorts ProcWait < ProcWaitSet . 
  subsorts ProcIdle ProcWait < Proc < ProcSet . 
  subsorts ProcIdleSet < ProcWaitSet < ProcSet . 
  
  op idle : -> ModeIdle . 
  op wait : Nat' -> ModeWait . 
  op crit : Nat' -> ModeCrit . 
  op `[_`,_`] : Nat' ModeIdle -> ProcIdle . 
  op `[_`,_`] : Nat' ModeWait -> ProcWait . 
  op `[_`,_`] : Nat' Mode -> Proc . 
  op none : -> ProcIdleSet . 
  op __ : ProcIdleSet ProcIdleSet -> ProcIdleSet [assoc comm id: none] . 
  op __ : ProcWaitSet ProcWaitSet -> ProcWaitSet [assoc comm id: none] .
  op __ : ProcSet ProcSet -> ProcSet [assoc comm id: none] .

  sort Conf . 
  op _;_;_ : Nat' Nat' ProcSet -> Conf .
endfm)

(mod BAKERY is
  protecting BAKERY-SYNTAX . 
  
  var PS : ProcSet .  vars N M K : Nat' . 
  
  rl [wake] : N ; M ; [K, idle] PS => s(N) ; M ; [K, wait(N)] PS .
  rl [crit] : N ; M ; [K, wait(M)] PS => N ; M ; [K, crit(M)] PS .
  rl [exit] : N ; M ; [K, crit(M)] PS => N ; s(M) ; [K, idle] PS .
endm)

--- prop definitions for bakery
(mod BAKERY-SATISFACTION1 is
  pr BAKERY .
  pr SYMBOLIC-CHECKER .

  subsort Conf < State .

  ops ever-wait? ever-crit? : -> Prop . 

  vars N M : Nat' . vars PS : ProcSet . 
  
  eq s(N) ; M ; PS |= ever-wait? = true [variant] . 
  eq 0 ; M ; PS    |= ever-wait? = false [variant] . 
  eq N ; s(M) ; PS |= ever-crit? = true [variant] .
  eq N ; 0 ; PS    |= ever-crit? = false [variant] . 
endm)

--- set verbose on .

(smc N:Nat' ; N:Nat' ; [0, idle] [s(0), idle] |= [] (ever-wait? -> <> ever-crit?) .)

(smc in BAKERY-SATISFACTION1 :
  N:Nat' ; N:Nat' ; [0, idle] [s(0), idle] |= [] (ever-wait? -> ever-crit?) .)

(mod BAKERY-SATISFACTION2 is
  pr BAKERY .
  pr SYMBOLIC-CHECKER .

  subsort Conf < State .

  ops ex? : -> Prop . 

  var WS : ProcWaitSet . var IS : ProcIdleSet . var PS : ProcSet . 
  vars N M K M1 M2 K1 K2 : Nat' .

--- NOTE: ProcIdleSet < ProcWaitSet
  eq N ; M ; WS |= ex? = true [variant] .
  eq N ; M ; [K1, crit(M1)] WS |= ex? = true [variant] .
  eq N ; M ; [K1, crit(M1)] [K2, crit(M2)] PS |= ex? = false [variant] .

--- initial conditions
  op initCond : ProcWaitSet -> Bool .
  eq initCond([K1, wait(M)] [K2, wait(M)] WS) = false [variant] .
  eq initCond([K1, wait(M)] IS) = true [variant] .
  eq initCond(IS) = true [variant] .

endm)

--- true
(smc N:Nat' ; N:Nat' ; [0, idle] [s(0), idle] |= [] ex? .)

--- false
(smc N ; M ; WS |= [] ex?  .)

--- false
(smc N ; N ; WS |= [] ex?  .)

--- true
(smc N ; M ; WS |= [] ex? such that initCond(WS:ProcWaitSet) .)

