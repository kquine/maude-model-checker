load ltlr-checker

mod CLIENT-SERVER is
    protecting NAT .
    sorts Oid Nat? Cnts Conf .
    subsort Nat < Nat? .
    subsort Cnts < Conf .

    op nil : -> Nat? [ctor] .
    ops a b c d e f g : -> Oid [ctor] .
    op f : Oid Oid Nat -> Nat [ctor] .
    op `{_`,_`} : Oid Nat -> Cnts [ctor] .

    op _<-_ : Oid Cnts -> Conf [ctor] .
    op `[_`] : Oid -> Conf [ctor] .
    op `[_`,_`,_`,_`] : Oid Oid Nat Nat? -> Conf [ctor] .

    op null : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: null] .

    vars C S I : Oid .  vars N M : Nat .
    var W : Nat? .  var CNT : Cnts . 

    rl [req] : [C,S,N,nil] => [C,S,N,nil] (S <- {C,N}) .
    rl [reply] : (S <- {C,N}) [S] => [S] (C <- {S,f(S,C,N)}) .
    rl [rec] : (C <- {S,M}) [C,S,N,W] => [C,S,N,M] .
    rl [dupl] : (I <- CNT) => (I <- CNT) (I <- CNT)  .
    rl [loss] : I <- CNT => null  .
endm

mod CLIENT-SERVER-CHECK is
    protecting CLIENT-SERVER .
    inc LTLR-MODEL-CHECKER .

    subsort Conf < State .

    var CXT : StateContext . var SUB : StateSubstitution .
    var X : Conf .  vars A B : Action . var CNT : Cnts . 
    vars C S I : Oid .  vars M N : Nat . var W : Nat? .

****************************************
*** The support signature declaration
****************************************
    sorts Context$Conf .
    subsorts Conf < Context$Conf < StateContext .
    op __ : Context$Conf Conf -> Context$Conf [ditto] .
    op __ : Conf Context$Conf -> Context$Conf [ditto] .

    op [] : -> Context$Conf [ctor] .	--- defined for each sort of rules' rhs

*********************************
*** Predicate
*********************************

    ops enabled.req ever-req : Oid -> Prop .
    eq X [C,S,N,nil] |= enabled.req(C) = true .
    eq X [C,S,N,nil] (S <- {C,N}) |= ever-req(C) = true .

    ops enabled.rec answered : Oid -> Prop .
    eq X (C <- {S,M}) [C,S,N,W] |= enabled.rec(C) = true .
    eq X [C, S, N, M]   |= answered(C) = true .

    ops enabled.reply ever-reply : Oid Oid -> Prop .
    eq X (S <- {C,N}) [S] |= enabled.reply(S,C) = true .
    eq X [S] (C <- {S,f(S,C,N)}) |= ever-reply(S,C) = true .

--- NOTE: direcly define spatial action patterns to avoid ACU matcing for realized substs.
    ops req rec : Oid -> Action .
    ops reply : Oid Oid -> Action .

    eq {CXT | 'req : 'C \ C ; SUB} |= req(C) = true .
    eq {CXT | 'rec : 'C \ C ; SUB} |= rec(C) = true .
    eq {CXT | 'reply : 'S \ S ; 'C \ C ; SUB} |= reply(S, C) = true .


    op Just : Action -> Formula .
    op Fair : Action -> Formula .
    op FairnessAssumptions : -> Formula .

    eq Just(A) = (<> [] enabled(A)) -> ([] <> A) .
    eq Fair(A) = ([] <> enabled(A)) -> ([] <> A) .
    eq FairnessAssumptions = 
    Just(req(b)) /\ Fair(reply(a, b)) /\ Fair(rec(b)) .

    ops init : -> State .
    eq init 
     = [a] [b,a,1,nil] [c,a,0,nil] [d] [e,d,2,nil] [f,d,3,nil] .

    *** abstraction
    eq (I <- CNT) (I <- CNT) = (I <- CNT) .
    *** ---extra rules below added by coherence completion
    rl [reply] : (S <-{C,N}) [S] => (S <-{C,N}) [S] (C <-{S,f(S,C,N)}) .

endm

---set show gc on .
set verbose on .

--------------------------------
---1 State graph test

--- false
red modelCheck(init, <> answered(b)) .

--- true
red modelCheckFair(init, <> answered(b),
     (just : enabled.req(O:Oid) => ever-req(O:Oid)) ;
     (fair : enabled.rec(O:Oid) => answered(O:Oid)) ;
     (fair : enabled.reply(O:Oid,O':Oid) => ever-reply(O:Oid,O':Oid))
 ) .

---true
red modelCheckFair(init,
    (
     ([]<> enabled.rec(b) -> []<> answered(b)) /\
     ([]<> enabled.reply(a,b) -> []<> ever-reply(a,b))
    ) -> <> answered(b),
     (just : enabled.req(O:Oid) => ever-req(O:Oid))
) .

---true
red modelCheckFair(init,
    (
     (<>[] enabled.req(b) -> []<> ever-req(b))
    ) -> <> answered(b),
     (fair : enabled.rec(O:Oid) => answered(O:Oid)) ;
     (fair : enabled.reply(O:Oid,O':Oid) => ever-reply(O:Oid,O':Oid))
) .

--------------------------------
---2 State/Event graph test

--- false
red modelCheck(init, <> rec(b)) .

--- true
red modelCheckFair(init, <> answered(b),
     (just : enabled.req(O:Oid) => req(O:Oid)) ;
     (fair : enabled.rec(O:Oid) => rec(O:Oid)) ;
     (fair : enabled.reply(O:Oid,O':Oid) => reply(O:Oid,O':Oid))
 ) .

---true
red modelCheckFair(init,
    (
     ([]<> enabled.rec(b) -> []<> rec(b)) /\
     ([]<> enabled.reply(a,b) -> []<> reply(a,b))
    ) -> <> answered(b),
     (just : enabled.req(O:Oid) => req(O:Oid))
) .

---true
red modelCheckFair(init,
    (
     (<>[] enabled.req(b) -> []<> req(b))
    ) -> <> answered(b),
     (fair : enabled.rec(O:Oid) => rec(O:Oid)) ;
     (fair : enabled.reply(O:Oid,O':Oid) => reply(O:Oid,O':Oid))
) .

--------------------------------
---3 State/Event/Enabled graph test

--- false
red modelCheck(init, (<>[] enabled(req(b)) -> []<> req(b)) -> <> rec(b)) .

--- true
red modelCheckFair(init, <> answered(b),
     (just : enabled(req(O:Oid)) => req(O:Oid)) ;
     (fair : enabled(rec(O:Oid)) => rec(O:Oid)) ;
     (fair : enabled(reply(O:Oid,O':Oid)) => reply(O:Oid,O':Oid))
) .

---true
red modelCheckFair(init,
    (
     ([]<> enabled(rec(b)) -> []<> rec(b)) /\
     ([]<> enabled(reply(a,b)) -> []<> reply(a,b))
    ) -> <> answered(b),
     (just : enabled(req(O:Oid)) => req(O:Oid))
) .

---true
red modelCheckFair(init,
    (
     (<>[] enabled(req(b)) -> []<> req(b))
    ) -> <> answered(b),
     (fair : enabled(rec(O:Oid)) => rec(O:Oid)) ;
     (fair : enabled(reply(O:Oid,O':Oid)) => reply(O:Oid,O':Oid))
) .

q
