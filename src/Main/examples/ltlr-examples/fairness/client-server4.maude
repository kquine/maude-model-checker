load ltlr-checker

mod CLIENT-SERVER is
    protecting NAT .
    sorts Oid Nat? Cnts Conf .
    subsort Nat < Nat? .
    subsort Cnts < Conf .

    op nil : -> Nat? [ctor] .
    ops a b c d e f g : -> Oid [ctor] .
    op f : Oid Oid Nat -> Nat [ctor] .
    op `{_`,_`} : Oid Nat -> Cnts [ctor] .

    op _<-_ : Oid Cnts -> Conf [ctor] .
    op `[_`] : Oid -> Conf [ctor] .
    op `[_`,_`,_`,_`] : Oid Oid Nat Nat? -> Conf [ctor] .

    op null : -> Conf [ctor] .
    op __ : Conf Conf -> Conf [ctor assoc comm id: null] .

    vars C S I : Oid .  vars N M : Nat .
    var W : Nat? .  var CNT : Cnts . 

    rl [req] : [C,S,N,nil] => [C,S,N,nil] (S <- {C,N}) .
    rl [reply] : (S <- {C,N}) [S] => [S] (C <- {S,f(S,C,N)}) .
    rl [rec] : (C <- {S,M}) [C,S,N,W] => [C,S,N,M] .
    rl [dupl] : (I <- CNT) => (I <- CNT) (I <- CNT)  .
    rl [loss] : I <- CNT => null  .
endm

mod CLIENT-SERVER-CHECK is
    protecting CLIENT-SERVER .
    inc LTLR-MODEL-CHECKER .
    inc SPATIAL-ACTION-PATTERN-EQS .

    subsort Conf < State .

    var CXT : StateContext . var SUB : StateSubstitution .
    var X : Conf .  vars A B : Action . var CNT : Cnts . 
    vars C S I : Oid .  vars M N : Nat . var W : Nat? .

****************************************
*** The support signature declaration
****************************************
    sorts Context$Conf .
    subsorts Conf < Context$Conf < StateContext .
    op __ : Context$Conf Conf -> Context$Conf [ditto] .
    op __ : Conf Context$Conf -> Context$Conf [ditto] .

    op [] : -> Context$Conf [ctor] .	--- defined for each sort of rules' rhs

*********************************
*** Predicate
*********************************


    ops init init2 : -> State .
    eq init = [a] [b,a,1,nil] [c,a,0,nil] [d] [e,d,2,nil] [f,d,3,nil] .

    eq init2 = [a] [b,a,1,nil] [c,a,0,nil] .

    *** abstraction
    eq (I <- CNT) (I <- CNT) = (I <- CNT) .
    *** ---extra rules below added by coherence completion
    rl [reply] : (S <-{C,N}) [S] => (S <-{C,N}) [S] (C <-{S,f(S,C,N)}) .

endm

---set show gc on .
set verbose on .

--- true
red modelCheckFair(init2, <> {'rec : 'C \ b},
     (just : enabled({'req : 'C \ C}) => {'req : 'C \ C}) ;
     (fair : enabled({'rec : 'C \ C}) => {'rec : 'C \ C}) ;
     (fair : enabled({'reply : 'C \ C ; 'S \ S}) => {'reply : 'C \ C ; 'S \ S})
 ) .

