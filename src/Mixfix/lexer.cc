
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 206
#define YY_END_OF_BUFFER 207
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1273] =
    {   0,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,    0,    0,    0,    0,  194,  194,
        0,    0,  207,  205,  203,  204,  204,  102,  205,  100,
      102,  102,  102,  100,  101,  101,  102,  205,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   15,  102,  102,  102,  102,  102,  102,  102,
      162,  205,  160,  160,  160,  162,  160,  160,  162,  205,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  108,  205,
      104,  108,  108,  106,  105,  104,  108,  205,  108,  106,

      110,  110,  109,  110,  110,  110,  110,  177,  205,  172,
      173,  177,  164,  177,  175,  163,  167,  165,  166,  177,
      205,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  174,  182,  182,  182,  182,  182,
      180,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  203,  179,  205,  204,  188,  189,
      190,  183,  187,  192,  191,  193,  194,  195,  202,  196,
      201,  201,  197,  198,  196,  199,  200,  203,  102,    0,
      102,    0,    0,    0,  102,  102,  101,    0,  102,  102,
      102,  102,  102,  102,  102,   11,  102,  102,  102,  102,

      102,   43,  102,  102,   77,  102,  102,  102,  102,  102,
      102,  102,   64,  102,  102,    5,  102,  102,  102,   14,
      102,   76,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,   38,   74,  102,  102,  102,  102,  102,  102,
      102,  102,   78,  102,  102,  102,  102,  102,  102,  102,
      102,    6,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  162,    0,  161,  162,    0,    0,    0,  162,
      162,  156,  159,  157,    0,  162,  162,  162,  162,  162,
      151,  162,  162,  162,  162,  150,  139,  162,  162,  162,
      162,  138,  162,  137,  162,  162,  162,  162,  148,  162,

      162,  162,  144,  162,  139,  162,  152,  162,  162,  162,
      162,  162,  111,  139,  162,  158,  108,    0,  107,  108,
        0,    0,    0,  108,  108,    0,  103,  105,    0,    5,
      203,  109,    0,    0,    0,    0,    0,  177,    0,  176,
      177,    0,    0,    0,  177,  177,  168,    0,  177,  177,
      177,  177,  177,  177,  177,  177,  170,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  169,  182,
        0,  181,  182,    0,    0,    0,  182,  182,    0,  182,
      182,  182,  178,  182,  182,  178,  182,  182,  182,  178,
      178,  182,  182,  178,  182,  203,  179,    0,    0,    0,

      188,  184,  185,  186,  192,  194,  196,  196,  102,    0,
        2,    2,  102,  102,  102,   69,  102,  102,  102,  102,
      102,   68,  102,  102,  102,  102,  102,  102,  102,  102,
       16,   77,  102,  102,  102,  102,  102,  102,  102,  102,
       30,  102,  102,  102,  102,  102,  102,  102,   76,  102,
      102,    6,   28,  102,  102,  102,   39,  102,   74,  102,
      102,  102,  102,  102,  102,   10,  102,   99,   19,  102,
      102,   22,   78,  102,  102,  102,   36,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   75,  102,
      102,  102,  102,  102,  102,  102,  162,    0,    2,    2,

      162,  162,  149,  162,  162,  153,  162,  162,  162,  162,
      162,  162,  162,  162,  116,  162,  139,  162,  154,  162,
      162,  162,  162,  162,  162,  132,  131,  162,  145,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  147,
      108,    0,    2,    2,    0,    0,    0,    0,    2,    2,
      177,    0,    2,    2,  177,  177,  177,  177,  177,  177,
      177,  177,  171,  177,  177,  177,  177,  177,  177,  177,
      171,  177,  177,  177,  177,  177,  182,    0,    2,    2,
      182,  182,  182,  178,  178,  182,  182,  182,  182,  178,
        0,    0,    0,    0,    2,    2,    2,    1,    2,    2,

      102,  102,  102,   55,   45,  102,  102,  102,  102,  102,
      102,  102,   52,   27,  102,   20,  102,  102,   92,   23,
      102,  102,   60,  102,   24,  102,  102,  102,  102,  102,
        9,   26,  102,    3,  102,  102,  102,  102,   18,  102,
        7,  102,  102,   95,   13,  102,  102,  102,  102,   15,
      102,  102,  102,  102,  102,   78,  102,  102,   37,   73,
       21,   25,  102,   90,  102,  102,   65,  102,  102,  102,
      102,   75,  102,    8,  102,  102,   61,  102,  102,    0,
        0,    2,    2,    2,    1,    2,    2,  162,  162,  115,
      162,  162,  127,  162,  162,  154,  162,  162,  155,  162,

      162,  112,  162,  162,  162,  117,  162,  162,  118,  162,
      162,  119,    3,  162,  162,  146,  162,  162,  126,  121,
      162,  162,  140,  162,  162,  162,  162,  162,  162,  147,
        0,    0,    2,    2,    2,    1,    2,    2,    0,    0,
        1,    0,    0,    2,    2,    2,    1,    2,    2,  177,
      171,  177,  177,  177,  177,  177,  177,  171,  177,  171,
      177,  177,  177,  177,  171,  171,  177,  177,  177,    0,
        0,    2,    2,    2,    1,    2,    2,  182,  182,  178,
      178,  182,  182,  182,  182,  182,  178,  182,  182,  182,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,

       89,  102,   63,  102,   93,  102,   44,   57,  102,  102,
      102,  102,  102,  102,   82,  102,   87,  102,  102,  102,
      102,  102,  102,  102,  102,   58,  102,   80,   96,   32,
      102,  102,  102,  102,  102,  102,   62,   17,   54,  102,
      102,   12,  102,  102,  102,  102,  102,  102,  102,   73,
      102,  102,   66,   53,  102,  102,   40,   35,  102,  102,
       72,   91,   47,  102,  102,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  114,  142,  162,  162,  162,
      133,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  113,  128,  162,  162,  162,  162,  162,  162,  162,

      120,  140,  162,  124,  162,  162,  162,  139,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  171,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  171,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  178,  182,  182,  182,  182,
      182,  182,    1,    1,    1,    1,    1,    2,    2,   41,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   84,  102,    4,  102,  102,
      102,   96,   59,   71,   28,  102,  102,   98,   62,  102,

      102,  102,  102,   19,   88,   51,  102,   34,   48,  102,
      102,  102,  102,   67,  102,  102,  102,   33,    1,    1,
        1,    1,    1,    2,    2,  162,  162,  130,  162,  162,
        4,  125,  122,  162,  162,  162,  162,  162,  162,  162,
      131,  162,  162,  162,  162,  162,  162,  162,  162,  162,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    2,    2,  177,  177,  171,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,    1,    1,    1,
        1,    1,    2,    2,  182,  182,  182,  182,  182,  182,
        1,    1,  102,   63,  102,  102,   46,   81,  102,   50,

      102,  102,   20,  102,  102,   86,  102,  102,  102,   85,
       70,   56,  102,  102,   97,   83,  102,   22,   21,  102,
      102,   79,  102,   42,  102,    1,    1,  162,  162,  162,
      162,  162,  134,  162,  162,  162,  162,  132,  162,  135,
      162,  162,  162,  129,  162,  162,  141,  162,    1,    1,
        1,    1,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,    1,    1,  182,  182,  182,  182,  178,
      102,  102,  102,   81,  102,  102,   27,   49,   23,  102,
       24,  102,  102,   99,   25,  102,   31,  102,  162,  162,
      162,  162,  162,  162,  162,  162,  118,  123,  162,  162,

      162,  124,  143,  141,  162,  177,  177,  177,  177,  177,
      177,  177,  177,  182,  182,  182,  178,  102,   55,   94,
      102,   52,   60,   18,  102,  102,   29,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  136,  177,  177,  177,
      177,  177,  177,  177,  182,  182,  102,  102,  162,  162,
      162,  162,  117,  162,  121,  143,  177,  177,  177,  177,
      177,  102,  114,  115,  162,  126,  177,   53,  162,  177,
      130,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1360] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  661, 8470,  174, 8470, 8470,  309,  317, 8470,
      341, 8470,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  465,  447,  457,  490,  493,  513,
      517,  521,  527,  546,  585,  541,  555,  573,  580,  608,
      587,  321, 8470,  611,  619,  633,  637,  648,  651,  661,
      671,  708,  673,  679,  677,  685,  746,  716,  734,  754,
      768,  772,  786,  792,  806,  711,  748,  819,  827,  324,
     8470,  839,  841,  866,  868,  833,  871,  888,  879, 8470,

     8470,  911, 8470,  925,  941,  631,  625,  941,  366, 8470,
     8470,  943, 8470,  945,  949,  963,  969, 8470, 8470,  967,
      986,  989,  995,  993, 1007, 1028, 1033, 1041, 1055, 1066,
     1079, 1081, 1087, 1036, 8470, 8470, 1092,  372, 1110, 1112,
     1115, 1123, 1132, 1178, 1113, 1149, 1151, 1155, 1181, 1186,
     1189, 1209, 1215, 1217, 1259, 8470, 1273, 1287,    0, 8470,
     8470, 8470,  504,    0, 8470, 8470,    0, 8470, 8470,    0,
     8470, 8470, 8470, 8470,  397, 8470, 8470,  188,  613,  403,
      681, 1259,  470,  415,  778, 1084, 1211, 1286,  800,  853,
     1289,  955,  881, 1004,  899,  780, 1223, 1136, 1278, 1297,

     1310,  913, 1317, 1320, 1089, 1322, 1325, 1332, 1335, 1340,
     1354, 1361, 1363, 1365, 1372, 1383, 1391, 1368, 1393, 1397,
     1401, 1404, 1412, 1415, 1427, 1419, 1430, 1433, 1441, 1445,
     1459, 1463, 1467, 1469, 1473, 1481, 1477, 1496, 1499, 1501,
     1506, 1519, 1521, 1525, 1531, 1529, 1534, 1553, 1556, 1563,
     1567, 1574, 1576, 1582, 1587, 1594, 1601, 1605, 1608, 1615,
     1628, 1633, 1639,  514, 1641, 1647, 1660,  560,  436, 1667,
     1671, 1669, 1682, 1690, 1707, 1694, 1716, 1718, 1721, 1739,
     1741, 1747, 1761, 1765, 1767, 1773, 1779, 1787, 1791, 1810,
     1814, 1812, 1818, 1832, 1837, 1845, 1850, 1856, 1858, 1855,

     1864, 1882, 1890, 1894, 1905, 1908, 1913, 1928, 1931, 1933,
     1939, 1954, 1957, 1959, 1962, 1965, 1977,  569, 1983, 1988,
     2001,  578,  438, 2008, 2012, 2037, 8470, 2041, 2008, 2020,
     2066, 8470, 2080,  606,  594,  585,  571, 2080,  579, 2082,
     2084, 2066,  598,  504, 2102, 2106, 2108, 2115, 2126, 2134,
     2129, 2131, 2137, 2163, 2166, 2171, 2169, 2184, 2192, 2197,
     2205, 2210, 2216, 2230, 2238, 2249, 2261, 2263, 2269, 2274,
      642, 2287, 2289, 2307,  643,  530, 2310, 2318, 2327,  968,
     2330, 2338, 2343, 2349, 2363, 2369, 2374, 2382, 2388, 2393,
     2401, 2415, 2419, 2423, 2427, 2458, 8470, 2472,  567,  546,

        0, 8470, 8470, 8470,    0,    0,    0, 8470, 1626,  661,
     2487, 2541, 1679, 1727, 1900, 2022, 2139, 2202, 2284, 2442,
     2477, 2236, 2299, 2480, 2491, 2498, 2501, 2509, 2523, 2457,
     2521, 2534, 2544, 2548, 2552, 2555, 2559, 2566, 2562, 2573,
     2581, 2587, 2593, 2591, 2599, 2611, 2601, 2613, 2619, 2623,
     2625, 2637, 2643, 2645, 2647, 2649, 2656, 2667, 2669, 2676,
     2679, 2689, 2691, 2697, 2699, 2701, 2709, 2711, 2719, 2723,
     2731, 2733, 2738, 2742, 2756, 2760, 2762, 2767, 2769, 2771,
     2780, 2789, 2794, 2798, 2800, 2802, 2821, 2823, 2831, 2833,
     2842, 2844, 2854, 2856, 2868, 2874, 2880,  669, 2920, 2974,

     2886, 2888, 2900, 2923, 2920, 2931, 2942, 2945, 2962, 2988,
     2996, 3000, 3008, 3020, 3022, 3034, 3040, 3042, 3046, 3054,
     3066, 3068, 3074, 3079, 3092, 3087, 3100, 3111, 3113, 3124,
     3126, 3132, 3137, 3151, 3156, 3164, 3170, 3178, 3184, 3196,
     3202,  700, 3241, 3295,  539,  526,  517,  510,  493,  491,
     3204,  717, 3349, 3403, 3207, 3210, 3228, 3259, 3255, 3261,
     3263, 3298, 3267, 3317, 3320, 3309, 3352, 3360, 3363, 3384,
     3390, 3371, 3414, 3425, 3429, 3437, 3451,  722, 3477, 3531,
     3459, 3577, 3464, 3491, 3499, 3497, 3502, 3542, 3550, 3553,
      498,  493,  744,  588,    0,  483, 3587, 3625,  364, 3679,

     2892, 3265, 3555, 2954, 3313, 3357, 3423, 3586, 3588, 3511,
     3618, 3411, 3457, 3629, 3524, 3595, 3615, 3636, 3643, 3647,
     3651, 3656, 3661, 3683, 3686, 3690, 3688, 3693, 3711, 3716,
     3718, 3720, 3726, 3722, 3740, 3744, 3746, 3748, 3752, 3755,
     3759, 3767, 3779, 3786, 3788, 3790, 3792, 3794, 3812, 3797,
     3815, 3819, 3821, 3824, 3843, 3845, 3848, 3850, 3855, 3857,
     3863, 3875, 3878, 3882, 3886, 3888, 3896, 3900, 3908, 3911,
     3918, 3921, 3926, 3929, 3932, 3939, 3947, 3950, 3957,  760,
      817,  480, 3983,  455, 4006,  537, 4060, 3972, 3993, 3987,
     4017, 4020, 4028, 4031, 4042, 4064, 4067, 4082, 4085, 4093,

     4096, 4111, 4115, 4119, 4123, 4142, 4144, 4146, 4150, 4169,
     4171, 4173, 4192, 4197, 4200, 4194, 4218, 4220, 4223, 4226,
     4244, 4247, 4255, 4269, 4273, 4258, 4281, 4299, 4301, 4304,
      791,  827,  448, 4331,  442, 4354,  604, 4408,  445,  429,
        0,  837,  918,  421, 4343,  398, 4462,  629, 4516, 4358,
     4366, 4379, 4377, 4385, 4411, 4390, 4415, 4426, 4434, 4465,
     4439, 4484, 4488, 4503, 4527, 4530, 4538, 4542, 4556,  880,
      933,  388, 4584,  362, 4607,  709, 4661, 4564, 1028, 4578,
     4589, 4610, 4618, 4629, 4621, 4632, 4664, 4668, 4672, 4686,
     4716, 1848,    0, 4739, 4728,  332, 4793, 4745,  320, 4772,

     3969, 4444, 4148, 3999, 4070, 4117, 4179, 4229, 4497, 4334,
     4570, 4574, 4277, 4682, 4364, 4470, 4372, 4757, 4419, 4701,
     4732, 4759, 4745, 4524, 4719, 4641, 4780, 4787, 4799, 4802,
     4805, 4807, 4811, 4814, 4825, 4817, 4832, 4839, 4843, 4847,
     4850, 4857, 4861, 4865, 4872, 4879, 4883, 4885, 4890, 4897,
     4905, 4912, 4915, 4917, 4919, 4923, 4941, 4944, 4946, 4948,
     4950, 4952, 4955, 4959, 4970, 4990, 2871, 5013, 5024,    0,
      313, 5067, 4996, 5121, 5039, 5035, 5047, 5049, 5071, 5074,
     5085, 5089, 5103, 5125, 5133, 5139, 5144, 5152, 5163, 5171,
     5183, 5186, 5191, 5194, 5197, 5205, 5209, 5217, 5223, 5231,

     5229, 5243, 5254, 5257, 5268, 5276, 5280, 5282, 5308, 5320,
     5331, 5342,    0,  306, 5385, 5315, 5439, 5357, 5369, 5399,
     5493, 5411, 5547,  296, 5601, 5413, 5655, 5424, 5443, 5464,
     5365, 5461, 5475, 5420, 5497, 5511, 5519, 5524, 5550, 5565,
     5568, 5604, 5573, 5570, 5608, 5634, 5645, 5709, 5666, 5763,
      289, 5817, 5673, 5871, 5684, 5690, 5713, 5727, 5735, 5766,
     5635, 5781, 5792, 5801, 5800, 5925, 5828, 5843, 5854, 5027,
     5432, 5131, 5060, 5278, 5379, 5486, 5499, 5715, 5517, 5723,
     5837, 5745, 5839, 5864, 5874, 5473, 5851, 5877, 5892, 5895,
     5883, 5897, 5902, 5907, 5928, 5931, 5933, 5935, 5939, 5946,

     5957, 5960, 5964, 5967, 5972, 5975, 5978, 5985, 5987, 5990,
     5993, 5998, 6005, 6008, 6011, 6016, 6020, 6023, 6051, 6064,
     6059,    0, 6075, 6084, 6093, 6083, 6095, 6107, 6109, 6115,
     6120, 6133, 6135, 6139, 6153, 6157, 6159, 6161, 6165, 6179,
     6184, 6192, 6197, 6205, 6217, 6219, 6223, 6242, 6244, 6250,
     6270, 6279, 6274,    0, 6293, 6302, 6311, 6322, 6331, 6326,
        0, 6340, 6350, 6363, 6359, 6362, 6330, 6365, 6367, 6385,
     6389, 6391, 6393, 6412, 6416, 6420, 6418, 6448, 6458, 6453,
        0, 6472, 6481, 6490, 6487, 6489, 6492, 6500, 6512, 6514,
     6540, 6549, 6510, 6080, 6539, 6229, 6296, 6545, 6444, 6549,

     6553, 6557, 6567, 6571, 6575, 6577, 6582, 6589, 6596, 6586,
     6600, 6607, 6609, 6614, 6621, 6627, 6629, 6632, 6634, 6639,
     6647, 6653, 6657, 6659, 6662, 6688, 6673, 6682, 6684, 6690,
     6696, 6710, 6715, 6723, 6735, 6737, 6743, 6749, 6755, 6763,
     6767, 6775, 6769, 6781, 6787, 6801, 6805, 6807, 6833, 6850,
     6857, 6866, 6846, 6865, 6868, 6870, 6888, 6891, 6899, 6911,
     6914, 6919, 6925, 6945, 6959, 6939, 6958, 6961, 6964, 6966,
     6692, 6793, 6976, 6819, 6876, 6979, 6880, 6969, 6988, 6997,
     6999, 7003, 7006, 7011, 7017, 7021, 7024, 7029, 7036, 7044,
     7032, 7047, 7059, 7065, 7078, 7073, 7086, 7091, 7099, 7105,

     7110, 7113, 7128, 7131, 7136, 7139, 7142, 7154, 7160, 7162,
     7173, 7175, 7187, 7195, 7198, 7201, 7209, 7213, 7220, 7223,
     7227, 7234, 7238, 7241, 7245, 7248, 7252, 7259, 7270, 7273,
     7284, 7278, 7296, 7304, 7307, 7318, 7329, 7332, 7340, 7343,
     7351, 7365, 7369, 7377, 7389, 7391, 7387, 7400, 7412, 7414,
     7426, 7437, 7439, 7441, 7459, 7462, 7464, 7467, 7485, 7487,
     7490, 7482, 7508, 7512, 7514, 7516, 7520, 7518, 7538, 7540,
     7542, 8470, 7580, 7591, 7602, 7613, 7624, 7631, 7641, 7648,
     7658, 7665, 7675, 7682, 7692, 7699, 7709, 7720, 7731, 7742,
     7752, 7758, 7765, 7772, 7779, 7786, 7796, 7807, 7817, 7828,

     7838, 7849, 7860, 7870, 7881, 7891, 7902, 7913, 7924, 7935,
     7946, 7957, 7968, 7979, 7990, 8001, 8012, 8023, 8034, 8045,
     8056, 8067, 8078, 8089, 8100, 8111, 8122, 8133, 8144, 8155,
     8162, 8173, 8184, 8195, 8206, 8217, 8228, 8239, 8250, 8261,
     8272, 8279, 8290, 8301, 8312, 8323, 8334, 8345, 8352, 8363,
     8374, 8385, 8396, 8407, 8414, 8425, 8436, 8447, 8458
    } ;

static yyconst flex_int16_t yy_def[1360] =
    {   0,
     1272,    1, 1272,    3, 1272,    5, 1273, 1273, 1272,    9,
     1272,   11,   11,   13, 1274, 1274, 1275, 1275, 1276, 1276,
     1277, 1277, 1272, 1272, 1272, 1272, 1272, 1278, 1279, 1272,
     1278, 1272, 1278, 1278, 1278, 1278, 1278, 1272, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1280, 1281, 1272, 1280, 1280, 1280, 1280, 1280, 1280, 1272,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1282, 1283,
     1272, 1282, 1282, 1282, 1282, 1282, 1282, 1272, 1282, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1284, 1285, 1272,
     1272, 1284, 1272, 1284, 1284, 1284, 1284, 1272, 1272, 1284,
     1272, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1272, 1272, 1286, 1287, 1286, 1286,
     1286, 1286, 1272, 1286,  144, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1272, 1272, 1272, 1272, 1288, 1272,
     1272, 1272, 1272, 1289, 1272, 1272, 1290, 1272, 1272, 1291,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1278, 1279,
     1278, 1292, 1279, 1279, 1278, 1278, 1278, 1272, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1280, 1281, 1280, 1280, 1293, 1281, 1281, 1280,
     1280, 1280, 1280, 1280, 1272, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,   77,

     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1282, 1283, 1282, 1282,
     1294, 1283, 1283, 1282, 1282, 1272, 1272, 1282, 1272, 1282,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1284, 1285, 1284,
     1284, 1295, 1285, 1285, 1284, 1284, 1284, 1272, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1286,
     1287, 1286, 1286, 1296, 1287, 1287, 1286, 1286, 1272,  144,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1272, 1272, 1272, 1272, 1272,

     1288, 1272, 1272, 1272, 1289, 1290, 1291, 1272, 1278, 1297,
     1298, 1298, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1280, 1299, 1300, 1300,

     1280, 1280, 1280, 1280,   77, 1280, 1280, 1280,   77, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1282, 1301, 1302, 1302, 1272, 1272, 1272, 1272, 1303, 1303,
     1284, 1304, 1305, 1305, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1286, 1306, 1307, 1307,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1272, 1272, 1297, 1297, 1303,  412, 1308, 1309,  412, 1310,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1299,
     1299,  500, 1311,  500, 1312,  500, 1313, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,

     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1301, 1301,  544, 1314,  544, 1315,  544, 1316, 1272, 1272,
     1317, 1304, 1304,  554, 1318,  554, 1319,  554, 1320, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1306,
     1306,  580, 1321,  580, 1322,  580, 1323, 1286,  582, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1308, 1308, 1317, 1309, 1324,  794, 1325, 1303,  412, 1326,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1311, 1311, 1312, 1327,  868,
      868, 1328, 1303, 1329, 1330, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1314, 1314,
     1315, 1332,  911,  911, 1333, 1303, 1334, 1335, 1336, 1336,
     1337, 1338, 1337,  923, 1339, 1303, 1340, 1341, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1343, 1343, 1344, 1345, 1344,
      950, 1346, 1303, 1347, 1348, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1350, 1350, 1351, 1352, 1353, 1354, 1354, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1327, 1327,
     1351,  868, 1356, 1330, 1330, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1332, 1332, 1351,  911, 1357, 1335, 1335, 1338, 1338, 1351,
      923, 1358, 1341, 1341, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1345, 1345, 1351,
      950, 1359, 1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349,
     1353, 1353, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1356, 1356, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1357, 1357,
     1358, 1358, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1359, 1359, 1349, 1349, 1349, 1349, 1349,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1331, 1331, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1349, 1349, 1349, 1349, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1349, 1349, 1355, 1355, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1342, 1342, 1342, 1342,
     1342, 1355, 1331, 1331, 1331, 1331, 1342, 1355, 1331, 1342,
     1331,    0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272
    } ;

static yyconst flex_int16_t yy_nxt[8527] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1080,  160,  161,  180,  161,  160,
      160, 1060,  162,  160,  161,  179,  161,  160,  160,  263,
      162, 1053,  317,  181,  182,  137,  163,  137, 1021,  184,
      596,  137,  137,  269,  163,  137,  323,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  965,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  338,  186,  169,  173,  174,  180,
      370,  180,  772,  180,  596,  181,  182,  180,  344,  798,
      175,  187,  187,  180,  376,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  408,  408,  772,  181,
      182,  179,  189,  181,  190,  181, 1272,  183,  744,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182, 1272,  268, 1272,
      322,  744,  180,  327,  181,  181,  175,  181,  182,  408,
      408,  193,  196,  180,  194,  180,  327,  195,  181,  182,
      197,  198,  733,  199,  201,  180,  200,  180,  733,  181,
      182,  181,  182,  180,  202,  682,  176,  177,  179,  169,
      203,  181,  182,  181,  182,  204,  216,  205,  206,  181,
      182,  217,  184,  213,  207,  214,  208,  209,  180,  210,

      682,  180,  211,  596,  212, 1272,  343,  397,  215,  397,
      402,  741,  403,  741,  181,  182,  218,  181,  182,  221,
      222,  180,  263,  223,  332,  180,  404,  224,  332,  180,
      219, 1272,  375,  225,  220,  180,  269,  181,  182,  226,
      740,  181,  182,  227,  230,  181,  182,  235,  231,  180,
      739,  181,  182,  228,  180,  232,  233,  682,  234,  229,
      592,  236,  873,  180,  237,  181,  182,  238,  263,  239,
      181,  182,  241,  240,  252,  253,  242,  317,  591,  181,
      182,  180,  269,  243,  254,  550,  317,  338,  180, 1272,
      593,  323,  244,  180,  255,  264,  549,  181,  182,  256,

      323,  344,  265,  257,  181,  182,  338,  258,  548,  181,
      182,  266,  267,  259,  260,  245,  180,  547,  246,  264,
      344,  180,  270,  247,  733,  248,  265,  264,  249,  916,
      250,  251,  181,  182,  265,  266,  267,  181,  182,  337,
      261,  264,  336,  266,  267,  264,  262,  271,  265,  744,
      370,  370,  265,  272,  926,  273,  264,  266,  267,  264,
     1272,  266,  267,  265,  376,  376,  265, 1272,  274,  409,
      266,  266,  266,  267,  266,  266,  275,  497, 1272,  264,
     1272,  264,  266,  594,  266,  264,  265,  264,  265,  180,
     1272,  681,  265,  264,  265,  266,  267,  266,  267, 1272,

      265,  266,  267,  266,  267,  181,  188,  284,  541,  266,
      267,  290, 1272,  266,  266,  276,  264,  288,  285,  264,
      289,  286,  732,  265,  264,  551,  265, 1272,  287,  772,
      577,  265,  266,  267,  953,  266,  267, 1272,  277,  743,
      266,  267,  264,  296,  771,  278,  279, 1272,  280,  265,
      281,  282,  409,  283,  264,  314,  264, 1272,  266,  267,
      297,  265,  264,  265,  298, 1272,  594, 1272,  497,  265,
      266,  267,  266,  267,  315,  291,  264,  292,  266,  267,
      264,  299,  681,  265,  300,  293,  180,  265,  180,  411,
      294,  295,  266,  267,  264,  302,  266,  267,  301,  541,

      264,  265,  181,  182,  181,  182, 1272,  265,  180,  303,
      266,  267,  304,  732,  264,  305,  266,  267, 1272,  680,
      306,  265, 1272,  307,  181,  182, 1272,  264, 1272,  731,
      266,  267,  308,  309,  265,  318,  312,  310,  311,  316,
      413,  318,  319,  266,  267,  551,  313,  318,  319,  318,
      324,  320,  321, 1272,  319,  325,  319,  320,  321,  743,
     1272,  180, 1272,  320,  321,  320,  321,  326,  327,  326,
      326,  326,  326, 1272,  318, 1272,  318,  181,  182,  318,
     1272,  319, 1272,  319,  328,  328,  319,  318,  577,  180,
      320,  321,  320,  321,  319,  320,  329,  320,  320, 1272,

      414,  320,  771,  320,  321,  181,  182,  180, 1272,  320,
      418,  320,  331,  332,  333,  333,  331,  331,  330, 1272,
      742,  180,  334,  181,  182,  335,  333,  332,  333,  333,
      333,  333, 1272,  420, 1272,  770,  334,  181,  182,  335,
      320,  320,  333,  332,  333,  333,  333,  333, 1272,  339,
     1272,  339,  334,  339,  345,  335,  340,  339,  340,  346,
      340, 1272, 1272,  180,  340,  341,  342,  341,  342,  341,
      342,  339, 1272,  341,  342,  339, 1272,  339,  340,  181,
      182, 1272,  340, 1272,  340, 1272, 1272,  341,  342,  347,
     1272,  341,  348,  341,  342,  341,  341,  339,  370,  341,

      417,  339, 1272,  339,  340,  370,  370,  341,  340,  341,
      340,  370,  180,  341,  342,  339, 1272,  341,  342,  341,
      342, 1272,  340, 1272, 1272, 1272, 1272,  352,  181,  182,
     1272,  341,  342,  349,  419,  350,  339, 1272,  341,  341,
      351,  339, 1272,  340,  339, 1272, 1272,  353,  340,  339,
      354,  340,  341,  342,  355, 1272,  340,  341,  342,  370,
      341,  342,  356,  339,  357,  341,  342,  359,  370, 1272,
      340,  360,  370,  957,  339,  370,  369, 1272,  358,  341,
      342,  340, 1272, 1272, 1272,  361, 1272,  339, 1272,  339,
      341,  342,  180,  363,  340,  339,  340,  180,  412,  362,

      371, 1272,  340,  341,  342,  341,  342,  372,  181,  182,
     1272,  341,  342,  181,  182,  366,  373,  374,  371,  364,
      371,  377,  365,  371, 1272,  372,  378,  372,  367, 1272,
      372,  371,  368,  432,  373,  374,  373,  374,  372,  373,
      374,  373,  373,  370,  180,  373, 1272,  373,  379, 1272,
      370,  370,  385,  373, 1272,  373,  370,  371, 1272,  371,
      181,  182,  386,  371,  372,  422,  372, 1272, 1272, 1272,
      372, 1272, 1272,  373,  374,  373,  374, 1272,  388,  373,
      374, 1272,  383, 1272,  373,  373,  371, 1272,  387,  371,
     1272, 1272, 1272,  372,  371, 1272,  372,  371, 1272,  389,

     1272,  372,  373,  374,  372,  373,  374, 1272,  380, 1272,
      373,  374, 1272,  373,  374,  381,  382,  371, 1272,  180,
      383,  384,  390,  371,  372,  371,  383,  187,  187,  391,
      372,  180,  372,  373,  374,  181,  182, 1272, 1272,  373,
      374,  373,  374,  395, 1272, 1272, 1272,  181,  182,  392,
     1272, 1272, 1272,  421, 1272,  393, 1272, 1272, 1272,  394,
      396,  397,  398,  398,  396,  396, 1272,  410,  181,  181,
      399, 1272,  181,  400,  398,  397,  398,  398,  398,  398,
      181, 1272,  181, 1272,  399, 1272,  180,  400,  398,  397,
      398,  398,  398,  398, 1272,  181,  181,  180,  399,  181,

     1272,  400,  181,  182, 1272,  180, 1272,  181, 1272,  181,
     1272,  181,  181,  181,  182,  423,  424,  425,  180, 1272,
     1272,  181,  182,  415,  426,  180,  416,  427,  180, 1272,
      180, 1272, 1272,  180,  181,  182, 1272,  428,  181,  181,
      180,  181,  182,  180,  181,  182,  181,  182,  180,  181,
      182,  431,  433,  434,  429,  430,  181,  182,  436,  181,
      182, 1272,  180, 1272,  181,  182, 1272, 1272, 1272,  180,
      435,  180, 1272,  180, 1272,  437,  180, 1272,  181,  182,
      180, 1272, 1272,  438,  439,  181,  182,  181,  182,  181,
      182,  180,  181,  182,  252,  445,  181,  182,  442,  180,

     1272,  180, 1272, 1272,  440,  180, 1272,  181,  182,  180,
      441,  443,  180, 1272, 1272,  181,  182,  181,  182,  446,
      180,  181,  182,  180, 1272,  181,  182,  180,  181,  182,
      444, 1272, 1272,  447, 1272,  180,  181,  182,  180,  181,
      182,  180, 1272,  181,  182, 1272,  448, 1272,  449,  180,
      450,  181,  182,  180,  181,  182,  452,  181,  182, 1272,
     1272, 1272,  453, 1272,  451,  181,  182,  180, 1272,  181,
      182,  180, 1272, 1272, 1272,  180,  455,  180,  454,  456,
      252,  180, 1272,  181,  182,  180, 1272,  181,  182,  180,
      457,  181,  182,  181,  182, 1272, 1272,  181,  182, 1272,

     1272,  181,  182,  458,  180,  181,  182,  180, 1272,  180,
     1272,  463, 1272,  459,  180, 1272,  460,  464,  461, 1272,
      181,  182,  462,  181,  182,  181,  182,  180,  466,  180,
      181,  182, 1272,  180, 1272,  467, 1272,  180, 1272,  180,
      465, 1272,  180,  181,  182,  181,  182, 1272,  469,  181,
      182,  468, 1272,  181,  182,  181,  182,  475,  181,  182,
     1272,  180,  474,  470,  180,  473,  471,  472,  476,  478,
     1272,  180, 1272, 1272,  479,  180,  477,  181,  182, 1272,
      181,  182,  180, 1272,  180, 1272,  481,  181,  182,  482,
      180,  181,  182,  483,  484,  180,  480, 1272,  181,  182,

      181,  182,  180, 1272, 1272,  485,  181,  182,  487,  180,
     1272,  181,  182,  180,  486, 1272,  180, 1272,  181,  182,
     1272,  488, 1272,  180, 1272,  181,  182, 1272, 1272,  181,
      182, 1272,  181,  182,  180,  491,  180,  489,  492,  181,
      182,  180,  495, 1272,  490, 1272, 1272,  264,  493,  264,
      181,  182,  181,  182,  265,  264,  265,  181,  182,  496,
      494, 1272,  265,  266,  267,  266,  267, 1272,  498,  266,
      266,  266,  275,  266, 1272,  264, 1272,  264,  499,  264,
     1272,  266,  265,  266,  265,  500,  265,  180, 1272, 1272,
      264,  266,  267,  266,  267,  266,  267,  265,  264, 1272,

     1272, 1272,  264,  181,  182,  265,  266,  267, 1272,  265,
     1272, 1272,  266,  266,  266,  267,  266,  266,  266,  267,
      266, 1272,  601, 1272,  264, 1272,  264, 1272,  266,  264,
      266,  265, 1272,  265, 1272,  180,  265, 1272,  501, 1272,
      266,  267,  266,  267,  502,  266,  267,  264,  503,  264,
     1272,  181,  182, 1272,  265,  264,  265, 1272,  281,  266,
      266,  602,  265,  266,  267,  266,  267, 1272, 1272,  264,
     1272,  266,  267,  264, 1272,  264,  265,  504,  505, 1272,
      265,  264,  265, 1272,  506,  266,  267,  264,  265,  266,
      267,  266,  267, 1272,  265,  264,  509,  266,  267,  264,

     1272,  507,  265,  266,  267, 1272,  265, 1272, 1272, 1272,
      508,  266,  267, 1272, 1272,  266,  267, 1272,  264, 1272,
      264, 1272,  264, 1272,  510,  265,  264,  265,  514,  265,
      511,  512,  515,  265,  266,  267,  266,  267,  266,  267,
      264, 1272,  266,  267,  516,  264,  517,  265,  595, 1272,
      183,  595,  265,  264,  183,  513,  266,  267,  264, 1272,
      265,  266,  267, 1272,  264,  265,  264,  518, 1272,  266,
      267,  265,  264,  265,  266,  267, 1272,  520, 1272,  265,
      266,  267,  266,  267,  263,  519,  263,  522,  266,  267,
      264, 1272, 1272,  523,  263,  521,  526,  265,  264,  524,

      525, 1272,  264, 1272,  528,  265,  266,  267,  180,  265,
     1272, 1272, 1272,  264,  266,  267,  264,  527,  266,  267,
      265,  264, 1272,  265,  181,  182,  603, 1272,  265,  266,
      267,  530,  266,  267,  529,  531,  264,  266,  267,  264,
      533,  264, 1272,  265, 1272,  532,  265,  264,  265, 1272,
     1272, 1272,  266,  267,  265,  266,  267,  266,  267, 1272,
     1272,  535,  264,  266,  267,  264,  537,  264, 1272,  265,
      264,  534,  265,  264,  265, 1272,  536,  265,  266,  267,
      265,  266,  267,  266,  267,  318,  266,  267, 1272,  266,
      267,  318,  319,  539, 1272, 1272,  318,  538,  319, 1272,

     1272,  320,  321,  319, 1272,  540, 1272,  320,  321,  542,
      320,  320,  320,  329,  320, 1272,  318,  320,  320,  543,
      318,  320,  320,  319,  320, 1272,  544,  319,  318,  320,
      180,  320,  320,  321, 1272,  319,  320,  321,  326,  327,
      326,  326,  326,  326,  320,  321,  181,  182,  545,  318,
     1272,  546, 1272,  320,  320, 1272,  319,  328,  328, 1272,
      320,  320, 1272, 1272, 1272,  320,  321,  331,  332,  333,
      333,  331,  331, 1272,  552,  341,  341,  334, 1272,  341,
      335,  333,  332,  333,  333,  333,  333,  341,  339,  341,
      339,  334,  339, 1272,  335,  340, 1272,  340, 1272,  340,

     1272, 1272, 1272, 1272,  341,  342,  341,  342,  341,  348,
      339, 1272, 1272,  553,  339, 1272,  339,  340,  341,  341,
      554,  340, 1272,  340,  341,  341,  341,  342,  341, 1272,
      341,  342,  341,  342,  339, 1272,  341,  339,  341,  339,
     1272,  340,  339, 1272,  340,  339,  340,  180, 1272,  340,
      341,  342,  340,  341,  342,  341,  342, 1272,  341,  342,
     1272,  341,  342,  181,  182, 1272, 1272,  341,  341,  558,
      555,  339,  556,  557,  339, 1272,  559,  339,  340,  339,
      560,  340,  604, 1272,  340, 1272,  340,  341,  342,  563,
      341,  342,  339,  341,  342,  341,  342, 1272, 1272,  340,

      339,  564, 1272,  561, 1272,  339, 1272,  340,  341,  342,
      180,  562,  340,  339,  565, 1272,  341,  342,  339, 1272,
      340,  341,  342, 1272,  339,  340,  181,  182,  567,  341,
      342,  340, 1272, 1272,  341,  342, 1272,  566,  339, 1272,
      341,  342,  563,  568,  180,  340,  339, 1272, 1272,  569,
      570,  571,  605,  340,  341,  342, 1272,  339, 1272, 1272,
      181,  182,  341,  342,  340, 1272, 1272,  572,  573,  339,
     1272,  339, 1272,  341,  342, 1272,  340,  339,  340, 1272,
     1272,  574,  371, 1272,  340,  341,  342,  341,  342,  372,
     1272,  575,  180,  341,  342,  371, 1272,  371,  373,  374,

     1272, 1272,  372, 1272,  372, 1272,  576,  180,  181,  182,
      606,  373,  374,  373,  379,  578,  373,  373,  371, 1272,
      373,  579, 1272,  181,  182,  372,  371, 1272,  373, 1272,
      373, 1272,  580,  372,  373,  374,  373,  373,  371,  609,
      373, 1272,  373,  374, 1272,  372,  371, 1272,  373, 1272,
      373,  371, 1272,  372,  373,  374,  581,  371,  372,  373,
      373, 1272,  373,  374,  372,  383, 1272,  373,  374, 1272,
     1272,  371, 1272,  373,  374, 1272, 1272,  371,  372,  373,
      373, 1272,  371, 1272,  372, 1272,  383,  373,  374,  372,
      371, 1272,  582,  373,  374, 1272,  371,  372,  373,  374,

     1272,  371,  584,  372, 1272, 1272,  373,  374,  372,  371,
     1272, 1272,  373,  374,  583, 1272,  372,  373,  374, 1272,
      585, 1272,  383,  371, 1272,  373,  374,  371, 1272, 1272,
      372,  371, 1272, 1272,  372,  371, 1272,  383,  372,  373,
      374,  586,  372,  373,  374, 1272,  588,  373,  374, 1272,
      180,  373,  374, 1272, 1272, 1272, 1272,  589,  587,  396,
      397,  398,  398,  396,  396,  180,  181,  182, 1272,  399,
      590, 1272,  400,  398,  397,  398,  398,  398,  398,  607,
     1272,  181,  182,  399, 1272,  180,  400,  595,  180, 1272,
      595, 1272, 1272, 1272, 1272,  597,  595,  595,  619,  180,

      595,  181,  182,  608,  181,  182,  180,  598,  595,  180,
      595,  599,  600, 1272, 1272,  181,  182,  180,  610,  612,
      613,  611,  181,  182, 1272,  181,  182, 1272, 1272,  180,
      616,  180, 1272,  181,  182, 1272,  614,  615, 1272,  595,
      595,  595,  180, 1272,  595,  181,  182,  181,  182,  597,
      595,  595,  180,  618,  595,  617,  180, 1272,  181,  182,
      180,  598,  595,  180,  595,  599,  600,  180,  181,  182,
      180, 1272,  181,  182,  180, 1272,  181,  182, 1272,  181,
      182,  180,  622,  181,  182,  621,  181,  182,  252,  180,
      181,  182,  620,  595,  595,  180, 1272,  181,  182,  180,

      623,  180, 1272,  626,  624,  181,  182,  180, 1272,  180,
      625,  181,  182, 1272, 1272,  181,  182,  181,  182,  180,
      629,  180, 1272,  181,  182,  181,  182,  180,  627,  630,
      628,  180, 1272,  180, 1272,  181,  182,  181,  182, 1272,
      631,  633,  632,  181,  182,  180, 1272,  181,  182,  181,
      182,  180, 1272,  180, 1272,  180,  635,  180, 1272, 1272,
     1272,  181,  182,  634,  180, 1272, 1272,  181,  182,  181,
      182,  181,  182,  181,  182,  180,  640,  180, 1272, 1272,
      181,  182,  638,  636,  180,  639,  637,  180, 1272, 1272,
     1272,  181,  182,  181,  182, 1272,  641,  180, 1272,  180,

      181,  182, 1272,  181,  182,  180,  642,  180, 1272,  180,
     1272, 1272,  644,  181,  182,  181,  182,  180,  645,  180,
      643,  181,  182,  181,  182,  181,  182,  180,  647, 1272,
      646,  180,  649,  181,  182,  181,  182, 1272, 1272,  180,
     1272,  180,  648,  181,  182,  651,  180,  181,  182, 1272,
      180, 1272, 1272, 1272,  650,  181,  182,  181,  182, 1272,
     1272,  654,  181,  182,  180,  652,  181,  182,  180,  653,
      180, 1272,  656, 1272, 1272,  180,  655,  180, 1272,  180,
      181,  182, 1272, 1272,  181,  182,  181,  182,  180, 1272,
      658,  181,  182,  181,  182,  181,  182,  180,  252,  657,

     1272, 1272,  180, 1272,  181,  182,  180, 1272,  180,  661,
      180, 1272, 1272,  181,  182,  659,  660, 1272,  181,  182,
     1272, 1272,  181,  182,  181,  182,  181,  182,  662,  180,
     1272,  180,  667, 1272,  663,  664,  668, 1272,  666,  180,
     1272,  180,  665, 1272, 1272,  181,  182,  181,  182,  669,
      180, 1272,  180, 1272,  670,  181,  182,  181,  182, 1272,
      673, 1272,  180, 1272,  180,  671,  181,  182,  181,  182,
     1272,  595, 1272,  268,  595,  672,  180,  268,  181,  182,
      181,  182,  180, 1272, 1272, 1272, 1272,  675,  264,  677,
      674,  676,  181,  182,  264,  265,  264, 1272,  181,  182,

      180,  265, 1272,  265,  266,  267, 1272,  678,  264, 1272,
      266,  267,  266,  267, 1272,  265,  181,  182, 1272,  679,
      595, 1272, 1272,  595,  266,  267,  688, 1272,  683,  595,
      595,  264,  689,  595, 1272,  684, 1272,  801,  265,  264,
      685,  595, 1272,  595,  686,  687,  265,  266,  267,  263,
      264,  691, 1272,  264, 1272,  266,  267,  265, 1272,  263,
      265,  690,  180, 1272,  692,  263,  266,  267, 1272,  266,
      267, 1272,  595,  595,  595, 1272, 1272,  595,  181,  182,
     1272, 1272,  683,  595,  595,  693, 1272,  595,  804,  684,
      694,  263, 1272,  695,  685,  595,  264,  595,  686,  687,

      519,  263,  696,  265,  264, 1272,  697,  698,  264,  699,
     1272,  265,  266,  267, 1272,  265,  264, 1272,  700, 1272,
      266,  267, 1272,  265,  266,  267,  595,  595,  264, 1272,
      264, 1272,  266,  267,  701,  265, 1272,  265,  702, 1272,
     1272,  704,  264, 1272,  266,  267,  266,  267,  264,  265,
      264,  703, 1272,  705,  264,  265, 1272,  265,  266,  267,
     1272,  265,  264, 1272,  266,  267,  266,  267, 1272,  265,
      266,  267,  706,  707,  264, 1272,  264,  708,  266,  267,
     1272,  265,  264,  265,  710,  709, 1272,  264, 1272,  265,
      266,  267,  266,  267,  265,  264,  711, 1272,  266,  267,

      264, 1272,  265,  266,  267, 1272, 1272,  265,  264, 1272,
     1272,  266,  267,  712,  713,  265,  266,  267,  715,  264,
     1272,  264, 1272,  714,  266,  267,  265, 1272,  265, 1272,
      717,  716,  264, 1272,  264,  266,  267,  266,  267,  265,
      264,  265, 1272, 1272,  718,  264, 1272,  265,  266,  267,
      266,  267,  265, 1272,  720, 1272,  266,  267, 1272,  264,
     1272,  266,  267, 1272,  264, 1272,  265, 1272, 1272, 1272,
      722,  265,  264, 1272,  719,  266,  267,  721,  264,  265,
      266,  267, 1272, 1272,  724,  265,  264, 1272,  266,  267,
      725, 1272,  264,  265,  266,  267,  723, 1272,  726,  265,

     1272, 1272,  266,  267,  264, 1272, 1272, 1272,  266,  267,
      318,  265,  339, 1272,  727,  339,  728,  319,  339,  340,
      266,  267,  340,  729, 1272,  340,  320,  321,  341,  342,
     1272,  341,  342, 1272,  341,  342,  339, 1272, 1272, 1272,
      730,  595, 1272,  340,  595, 1272, 1272,  750,  751,  734,
      595,  595,  341,  342,  595, 1272,  735, 1272, 1272,  752,
     1272,  736,  595,  339,  595,  737,  738,  339, 1272,  339,
      340,  339,  753,  180,  340,  339,  340, 1272,  340,  341,
      342, 1272,  340,  341,  342,  341,  342,  341,  342,  181,
      182,  341,  342,  595,  595,  595, 1272, 1272,  595,  755,

      754, 1272,  563,  734,  595,  595,  339, 1272,  595,  802,
      735, 1272, 1272,  340,  756,  736,  595,  339,  595,  737,
      738,  180,  341,  342,  340,  339, 1272, 1272,  339, 1272,
     1272,  757,  340,  341,  342,  340, 1272,  181,  182,  761,
     1272,  341,  342, 1272,  341,  342, 1272,  595,  595,  595,
     1272, 1272,  595, 1272, 1272,  758,  759,  745,  595,  595,
      339, 1272,  595,  760,  746,  180, 1272,  340,  339,  747,
      595,  339,  595,  748,  749,  340,  341,  342,  340,  339,
     1272,  181,  182, 1272,  341,  342,  340,  341,  342, 1272,
     1272, 1272,  339,  805, 1272,  341,  342,  563,  339,  340,

      563,  595,  595,  595, 1272,  340,  595,  762,  341,  342,
      763,  745,  595,  595,  341,  342,  595, 1272,  746,  180,
      764,  765,  339,  747,  595, 1272,  595,  748,  749,  340,
     1272,  180, 1272,  339, 1272,  181,  182,  339,  341,  342,
      340,  812,  766, 1272,  340,  339, 1272,  181,  182,  341,
      342, 1272,  340,  341,  342,  595,  595,  768,  767,  371,
     1272,  341,  342,  769, 1272,  180,  372,  371,  806, 1272,
     1272, 1272,  371, 1272,  372,  373,  374,  595, 1272,  372,
      595,  181,  182,  373,  374,  773,  595,  595,  373,  374,
      595,  813,  774, 1272,  784, 1272, 1272,  775,  595,  371,

      595,  776,  777,  778, 1272,  371,  372,  371, 1272, 1272,
      371, 1272,  372, 1272,  372,  373,  374,  372, 1272,  180,
     1272,  373,  374,  373,  374, 1272,  373,  374,  785,  595,
      595,  595,  180, 1272,  595,  181,  182,  809, 1272,  773,
      595,  595,  786,  383,  595, 1272,  774,  787,  181,  182,
      371,  775,  595, 1272,  595,  776,  777,  372,  371, 1272,
     1272,  371, 1272,  180, 1272,  372,  373,  374,  372,  815,
      788, 1272, 1272, 1272,  373,  374, 1272,  373,  374,  181,
      182, 1272, 1272,  595,  595,  371,  789,  595,  183,  790,
      595, 1272,  372,  183,  180,  596,  180,  383, 1272,  803,

     1272,  373,  374,  180, 1272, 1272, 1272, 1272,  779,  792,
      181,  182,  181,  182, 1272,  780, 1272,  781, 1272,  181,
      182,  782,  783,  180,  780,  793,  180, 1272,  793,  807,
     1272,  808, 1272,  795,  793,  793, 1272,  180,  793,  181,
      182,  816,  181,  182,  180, 1272,  793,  817,  793,  796,
      797,  180,  810,  181,  182,  180, 1272, 1272,  811,  180,
      181,  182, 1272,  814,  180, 1272, 1272,  181,  182,  180,
     1272,  181,  182,  818, 1272,  181,  182,  793,  793,  595,
      181,  182,  595, 1272, 1272,  181,  182,  800,  599,  599,
      819,  180,  599, 1272,  180,  821,  180,  820,  180, 1272,

      599,  180,  599,  595,  595, 1272,  822,  181,  182,  823,
      181,  182,  181,  182,  181,  182, 1272,  181,  182,  180,
     1272,  826, 1272, 1272,  180, 1272,  180, 1272,  180,  824,
      180,  599,  599,  825,  180,  181,  182, 1272, 1272,  827,
      181,  182,  181,  182,  181,  182,  181,  182,  180, 1272,
      181,  182,  180,  829,  180,  828,  180, 1272, 1272,  830,
      180, 1272, 1272,  180,  181,  182, 1272,  180,  181,  182,
      181,  182,  181,  182,  831,  180,  181,  182,  835,  181,
      182,  832,  834,  181,  182,  836,  833,  180, 1272, 1272,
     1272,  181,  182, 1272,  180, 1272,  180, 1272,  180, 1272,

      180, 1272,  180,  181,  182,  180,  837, 1272, 1272,  838,
      181,  182,  181,  182,  181,  182,  181,  182,  181,  182,
      180,  181,  182,  180,  841, 1272,  840,  180, 1272,  180,
     1272, 1272,  180, 1272, 1272,  839,  181,  182, 1272,  181,
      182,  842, 1272,  181,  182,  181,  182,  844,  181,  182,
      846,  180, 1272,  180, 1272,  843,  180, 1272,  180,  845,
     1272, 1272, 1272,  180, 1272,  180, 1272,  181,  182,  181,
      182,  180,  181,  182,  181,  182,  848,  847,  849,  181,
      182,  181,  182,  180, 1272, 1272,  180,  181,  182,  473,
      180, 1272, 1272, 1272,  180, 1272,  180, 1272, 1272,  181,

      182,  850,  181,  182,  180, 1272,  181,  182,  180,  851,
      181,  182,  181,  182,  855, 1272,  180, 1272,  852,  180,
      181,  182,  853, 1272,  181,  182,  180, 1272, 1272,  180,
     1272,  854,  181,  182,  180,  181,  182,  180,  857,  856,
      180, 1272,  181,  182,  859,  181,  182,  180, 1272, 1272,
      181,  182, 1272,  181,  182,  180,  181,  182,  180, 1272,
     1272,  858,  862,  181,  182,  180,  860, 1272, 1272,  863,
     1272,  181,  182,  861,  181,  182,  864,  180, 1272, 1272,
      264,  181,  182,  595,  268,  865,  595,  265, 1272,  268,
     1272,  682, 1272,  181,  182,  264,  266,  267, 1272, 1272,

      876,  264,  265, 1272, 1272,  867,  793,  180,  265,  793,
     1272,  266,  267, 1272,  869,  793,  793,  266,  267,  793,
     1272,  870, 1272,  181,  182,  264,  973,  793,  264,  793,
      871,  872,  265,  878, 1272,  265,  264,  877, 1272,  264,
     1272,  266,  267,  265,  266,  267,  265, 1272, 1272, 1272,
      264,  879,  266,  267, 1272,  266,  267,  265,  793,  793,
      595, 1272, 1272,  595, 1272,  880,  266,  267,  875,  686,
      686,  881,  264,  686, 1272,  264, 1272, 1272,  180,  265,
      519,  686,  265,  686,  595,  595, 1272,  882,  266,  267,
      264,  266,  267,  264,  181,  182, 1272,  265, 1272,  974,

      265,  264,  519, 1272,  264,  519,  266,  267,  265,  266,
      267,  265,  686,  686, 1272,  519, 1272,  266,  267,  264,
      266,  267,  884,  264, 1272,  180,  265,  264, 1272, 1272,
      265,  264,  883, 1272,  265,  266,  267, 1272,  265,  266,
      267,  181,  182,  266,  267,  885, 1272,  266,  267,  886,
      264,  975,  264, 1272,  264, 1272,  180,  265,  264,  265,
     1272,  265, 1272,  887, 1272,  265,  266,  267,  266,  267,
      266,  267,  181,  182,  266,  267,  891,  264,  972,  264,
     1272,  264, 1272,  888,  265, 1272,  265,  180,  265,  889,
     1272, 1272,  890,  266,  267,  266,  267,  266,  267, 1272,

      264, 1272,  264,  181,  182,  264,  892,  265,  264,  265,
     1272, 1272,  265, 1272, 1272,  265,  266,  267,  266,  267,
      893,  266,  267,  894,  266,  267,  264, 1272,  264,  895,
     1272,  264, 1272,  265,  264,  265, 1272,  180,  265, 1272,
     1272,  265,  266,  267,  266,  267,  896,  266,  267, 1272,
      266,  267,  264,  181,  182,  264,  899, 1272, 1272,  265,
      897,  898,  265,  264, 1272, 1272,  264, 1272,  266,  267,
      265,  266,  267,  265,  900, 1272, 1272,  264, 1272,  266,
      267,  264,  266,  267,  265,  180, 1272, 1272,  265,  264,
     1272, 1272,  901,  266,  267,  905,  265,  266,  267,  902,

     1272,  181,  182,  903, 1272,  266,  267,  264, 1272,  264,
     1272, 1272,  264,  907,  265, 1272,  265, 1272,  904,  265,
     1272,  906,  980,  266,  267,  266,  267, 1272,  266,  267,
     1272,  595,  322,  908,  595, 1272, 1272,  322, 1272,  733,
     1272, 1272,  180,  595,  343, 1272,  595, 1272, 1272,  343,
     1272,  744, 1272,  910,  793, 1272, 1272,  793,  181,  182,
     1272, 1272,  912,  793,  793,  920,  339,  793, 1272,  913,
     1272,  977,  180,  340,  339,  793, 1272,  793,  914,  915,
      180,  340,  341,  342, 1272,  339,  929,  339,  181,  182,
      341,  342,  340,  339,  340, 1272,  181,  182,  339, 1272,

      340,  341,  342,  341,  342,  340,  793,  793,  595,  341,
      342,  595,  930,  931,  341,  342,  918,  737,  737,  339,
      934,  737,  932,  339, 1272,  563,  340,  180, 1272,  737,
      340,  737,  595,  595,  339,  341,  342,  933, 1272,  341,
      342,  340,  339,  181,  182,  935, 1272,  339, 1272,  340,
      341,  342,  180,  984,  340, 1272, 1272, 1272,  341,  342,
      737,  737,  793,  341,  342,  793, 1272,  936,  181,  182,
      922,  793,  793,  339,  970,  793, 1272,  923,  180,  937,
      340, 1272, 1272,  793,  971,  793,  924,  925,  563,  341,
      342,  938,  339, 1272,  181,  182,  339, 1272,  982,  340,

     1272, 1272, 1272,  340, 1272,  180, 1272, 1272,  341,  342,
      939,  339,  341,  342,  793,  793,  595,  940,  340,  595,
     1272,  181,  182, 1272,  928,  748,  748,  341,  342,  748,
     1272,  941,  180, 1272, 1272,  339,  976,  748,  339,  748,
      595,  595,  340, 1272, 1272,  340,  339, 1272,  181,  182,
      339,  341,  342,  340,  341,  342, 1272,  340,  989, 1272,
      943, 1272,  341,  342,  339,  942,  341,  342,  748,  748,
     1272,  340,  371, 1272, 1272, 1272,  944, 1272,  180,  372,
      341,  342,  180,  563,  595,  375,  371,  595,  373,  374,
      375, 1272,  772,  372,  181,  182, 1272,  371,  181,  182,

      979,  945,  373,  374,  372, 1272,  947,  793,  956,  978,
      793, 1272, 1272,  373,  374,  949,  793,  793,  371, 1272,
      793, 1272,  950, 1272, 1272,  372,  371,  780,  793,  371,
      793,  951,  952,  372,  373,  374,  372,  371, 1272, 1272,
      371, 1272,  373,  374,  372,  373,  374,  372,  780,  180,
     1272,  780, 1272,  373,  374, 1272,  373,  374, 1272,  793,
      793,  595,  960, 1272,  595,  181,  182,  959,  958,  955,
      776,  776,  371, 1272,  776, 1272,  371, 1272, 1272,  372,
      371, 1272,  776,  372,  776,  595,  595,  372,  373,  374,
      180, 1272,  373,  374,  371, 1272,  373,  374, 1272, 1272,

     1272,  372, 1272, 1272, 1272,  961,  181,  182,  383,  180,
      373,  374,  962,  776,  776, 1272,  595,  183,  383,  595,
     1272,  981,  183, 1272,  596,  181,  182,  180,  793,  183,
      985,  793, 1272, 1272,  183, 1272,  794, 1272,  792,  793,
      180, 1272,  793,  181,  182,  990, 1272,  795,  793,  793,
      964, 1272,  793,  180,  599,  599,  181,  182,  599, 1272,
      793,  986,  793,  796,  797,  180,  599,  180,  599,  181,
      182, 1272,  595,  593, 1272,  595, 1272, 1272,  593, 1272,
      799,  181,  182,  181,  182, 1272, 1272,  983,  180,  987,
      988,  793,  793,  793,  969,  180,  793,  599,  599, 1272,

     1272,  967,  796,  796,  181,  182,  796,  180, 1272,  991,
      180,  181,  182,  180,  796,  180,  796,  793,  793,  180,
     1272, 1272,  180,  181,  182,  180,  181,  182, 1272,  181,
      182,  181,  182,  180, 1272,  181,  182,  994,  181,  182,
      180,  181,  182,  992, 1272,  796,  796,  180, 1272,  181,
      182,  180, 1272,  996,  993,  180,  181,  182,  180,  995,
      998, 1272,  997,  181,  182,  180, 1272,  181,  182,  180,
     1272,  181,  182,  180,  181,  182,  999, 1000, 1002, 1272,
      180,  181,  182, 1272, 1001,  181,  182,  180, 1272,  181,
      182,  180, 1272,  180, 1272, 1004,  181,  182,  180, 1272,

     1003, 1272, 1005,  181,  182,  180, 1272,  181,  182,  181,
      182, 1272, 1272,  180,  181,  182, 1006, 1272, 1008, 1272,
      180,  181,  182,  180, 1272,  180, 1272,  180, 1007,  181,
      182,  180, 1272, 1010, 1272, 1009,  181,  182, 1272,  181,
      182,  181,  182,  181,  182, 1272, 1011,  181,  182,  180,
     1272, 1012,  180, 1272,  180, 1014,  180, 1272,  180, 1272,
      180, 1272, 1013,  180, 1272,  181,  182,  180,  181,  182,
      181,  182,  181,  182,  181,  182,  181,  182,  180,  181,
      182, 1272, 1272,  181,  182, 1015, 1272, 1272, 1272, 1272,
      595,  268, 1016,  595,  181,  182,  268, 1272,  682, 1272,

     1272, 1272, 1017, 1018, 1272,  686,  686, 1272, 1272,  686,
     1272, 1272,  867,  793, 1272, 1272,  793,  686, 1272,  686,
     1272,  869,  793,  793,  793,  268,  793,  793,  870, 1272,
      268, 1272,  868, 1272,  793,  180,  793,  871,  872,  595,
      680, 1272,  595,  264, 1272,  680, 1020,  874,  686,  686,
      265,  181,  182, 1272, 1272,  264, 1272,  264, 1272,  266,
      267, 1025,  265, 1272,  265,  793,  793,  793,  180, 1026,
      793,  266,  267,  266,  267, 1023,  871,  871, 1272,  264,
      871, 1272,  264, 1272,  181,  182,  265, 1272,  871,  265,
      871,  793,  793,  264, 1027,  266,  267,  264,  266,  267,

      265, 1272, 1272, 1028,  265, 1272, 1095, 1272, 1272,  266,
      267,  264, 1272,  266,  267, 1272, 1272, 1029,  265,  871,
      871,  595,  519, 1272,  595, 1272, 1272,  266,  267,  683,
      595,  595, 1030,  264,  595, 1272,  684, 1272, 1272,  180,
      265,  264,  595, 1272,  595,  686,  687,  264,  265,  266,
      267, 1272,  264, 1272,  265,  181,  182,  266,  267,  265,
      264, 1272, 1272,  266,  267, 1272, 1272,  265,  266,  267,
     1031,  264, 1032,  595,  595, 1094,  266,  267,  265,  264,
     1272, 1272, 1033, 1272, 1034, 1272,  265,  266,  267, 1272,
     1272,  264, 1035, 1272,  264,  266,  267, 1036,  265,  264,

     1037,  265,  264, 1272, 1272,  264,  265,  266,  267,  265,
      266,  267,  265,  264, 1272,  266,  267,  264,  266,  267,
      265,  266,  267, 1040,  265,  264, 1039, 1272, 1038,  266,
      267,  264,  265,  266,  267, 1272, 1272,  264,  265,  264,
     1272,  266,  267, 1272,  265, 1272,  265,  266,  267, 1042,
     1041,  264, 1044,  266,  267,  266,  267, 1043,  265, 1045,
     1272, 1272,  264, 1272, 1272,  264, 1272,  266,  267,  265,
     1272, 1272,  265, 1272, 1272, 1272,  264, 1272,  266,  267,
     1046,  266,  267,  265,  264, 1272,  180, 1047,  264, 1272,
      264,  265,  266,  267, 1048,  265, 1272,  265, 1272, 1272,

      266,  267,  181,  182,  266,  267,  266,  267,  595,  322,
     1272,  595, 1272, 1050,  322, 1272,  733, 1272, 1096, 1049,
      595, 1272,  322,  595,  737,  737,  322, 1272,  737, 1272,
      910,  793, 1272, 1272,  793, 1272,  737, 1272,  737,  912,
      793,  793,  793,  322,  793,  793,  913, 1272,  322, 1272,
      911, 1272,  793, 1272,  793,  914,  915,  595,  731, 1272,
      595, 1272, 1272,  731, 1052,  917, 1272,  737,  737,  595,
      343, 1272,  595,  339, 1272,  343, 1272,  744, 1272, 1057,
      340, 1272, 1272,  793,  793,  793, 1272,  180,  793,  341,
      342,  920, 1272, 1055,  914,  914, 1272, 1067,  914,  595,

     1272,  343,  595,  181,  182,  343,  914, 1272,  914,  793,
      793,  793,  343, 1272,  793, 1272, 1272,  343, 1097,  921,
     1272, 1272,  748,  748,  595,  742,  748,  595,  339, 1272,
      742, 1272,  927, 1059,  748,  340,  748,  914,  914,  595,
      180, 1272,  595, 1272,  341,  342, 1064,  734,  595,  595,
     1272,  339,  595, 1272,  735, 1272,  181,  182,  340,  563,
      595, 1272,  595,  737,  738,  748,  748,  341,  342,  339,
     1272, 1272,  339, 1272, 1272, 1093,  340, 1065, 1272,  340,
     1272,  180, 1272,  339, 1272,  341,  342, 1272,  341,  342,
      340,  595,  595,  793,  180, 1272,  793,  181,  182,  341,

      342,  922,  793,  793, 1068,  339,  793,  180,  923, 1066,
      181,  182,  340, 1272,  793,  422,  793,  924,  925,  339,
      563,  341,  342,  181,  182,  180,  340,  339, 1272, 1098,
     1272, 1272,  339, 1272,  340,  341,  342, 1272, 1272,  340,
      563,  181,  182,  341,  342,  793,  793,  793,  341,  342,
      793, 1069, 1272, 1070, 1100,  922,  793,  793,  339, 1272,
      793, 1272,  923, 1272, 1272,  340, 1272, 1272,  793, 1071,
      793,  924,  925,  339,  341,  342,  339, 1272,  339, 1272,
      340,  339, 1072,  340, 1272,  340, 1272, 1272,  340,  341,
      342, 1073,  341,  342,  341,  342, 1076,  341,  342,  793,

      793,  793, 1075, 1272,  793, 1272, 1272, 1272, 1272, 1062,
      924,  924,  339,  563,  924, 1272,  339, 1272, 1272,  340,
     1272, 1272,  924,  340,  924,  793,  793, 1272,  341,  342,
     1272, 1272,  341,  342,  595,  375, 1272,  595, 1077, 1272,
      375, 1272,  772,  371, 1074,  595, 1272,  375,  595, 1272,
      372,  375, 1272,  924,  924,  595,  947, 1272,  595,  373,
      374, 1089, 1272,  745,  595,  595,  793,  375,  595,  793,
      746, 1272,  375, 1272,  948, 1272,  595, 1272,  595,  748,
      749, 1272,  776,  776,  595,  770,  776,  595, 1079, 1272,
      770, 1272,  954, 1272,  776, 1272,  776, 1272,  371, 1272,

     1272, 1272, 1272, 1272, 1272,  372, 1084,  595,  595,  793,
     1272, 1272,  793, 1272,  373,  374, 1272,  949,  793,  793,
     1085,  371,  793,  180,  950,  776,  776, 1272,  372, 1272,
      793,  180,  793,  951,  952,  371, 1272,  373,  374,  181,
      182, 1272,  372,  371, 1272, 1099,  780,  181,  182, 1272,
      372,  373,  374,  180, 1272, 1272, 1086, 1101, 1272,  373,
      374,  793,  793,  793, 1087, 1272,  793, 1272, 1272,  181,
      182,  949,  793,  793,  371, 1103,  793, 1272,  950, 1272,
     1272,  372, 1272, 1272,  793, 1272,  793,  951,  952,  371,
      373,  374,  793,  183, 1088,  793,  372, 1272,  183, 1272,

      794,  793, 1272,  183,  793,  373,  374,  183, 1272,  796,
      796, 1272, 1272,  796,  964,  793,  793,  793, 1272, 1272,
      793,  796, 1272,  796, 1090, 1082,  951,  951,  793,  593,
      951,  793, 1272, 1272,  593, 1272,  966, 1272,  951, 1272,
      951,  793,  793,  595,  593,  180,  595,  180, 1272,  593,
     1092,  799,  796,  796,  595, 1272,  593,  595, 1272,  180,
      593,  181,  182,  181,  182,  969, 1272, 1104, 1272,  951,
      951,  595,  180, 1272,  595,  181,  182, 1272, 1272,  773,
      595,  595,  180, 1102,  595,  180,  774, 1272,  181,  182,
     1107,  180,  595, 1272,  595,  776,  777, 1272,  181,  182,

      180,  181,  182,  180, 1106,  180, 1272,  181,  182, 1105,
      180, 1272, 1272, 1110, 1272,  180,  181,  182, 1272,  181,
      182,  181,  182,  595,  595,  793,  181,  182,  793, 1272,
     1272,  181,  182,  795,  793,  793,  180, 1108,  793,  180,
     1109,  180, 1272,  180, 1272, 1272,  793,  180,  793,  796,
      797, 1111,  181,  182,  180,  181,  182,  181,  182,  181,
      182, 1112, 1272,  181,  182,  180, 1272, 1113,  180, 1272,
      181,  182,  180, 1272, 1272,  180, 1272,  793,  793, 1114,
      180,  181,  182,  180,  181,  182,  180, 1115,  181,  182,
     1117,  181,  182,  180, 1272,  180,  181,  182,  180,  181,

      182,  180,  181,  182, 1272, 1116,  180, 1272, 1118,  181,
      182,  181,  182,  180,  181,  182,  180,  181,  182,  180,
     1119, 1272,  181,  182,  180, 1272, 1272, 1272,  180,  181,
      182,  180,  181,  182, 1272,  181,  182, 1272, 1120, 1272,
      181,  182, 1272, 1121,  181,  182, 1124,  181,  182, 1272,
     1272,  793,  268, 1272,  793, 1122, 1123,  268, 1272,  868,
     1272, 1272, 1272, 1125,  793, 1272,  268,  793,  871,  871,
      268, 1272,  871, 1020, 1272,  793,  680, 1272,  793, 1272,
      871,  680,  871, 1022,  595,  680, 1272,  595,  180, 1272,
      680,  264,  874,  595, 1272,  680,  595, 1127,  265,  680,

     1272, 1272, 1272,  264,  181,  182, 1025,  266,  267, 1128,
      265,  871,  871, 1272, 1272,  264, 1272,  264, 1272,  266,
      267, 1129,  265,  264,  265, 1272, 1272, 1272,  264, 1272,
      265,  266,  267,  266,  267,  265, 1272, 1272, 1272,  266,
      267,  264, 1272,  264,  266,  267, 1272,  264,  265, 1132,
      265, 1272, 1272, 1130,  265, 1131, 1272,  266,  267,  266,
      267,  264, 1272,  266,  267,  264, 1272,  264,  265,  264,
     1272, 1272,  265,  264,  265, 1133,  265,  266,  267, 1272,
      265,  266,  267,  266,  267,  266,  267,  264, 1272,  266,
      267, 1137,  264, 1136,  265, 1138, 1272, 1272, 1134,  265,

      264, 1272, 1135,  266,  267,  264, 1272,  265,  266,  267,
     1272, 1272,  265,  264, 1272, 1272,  266,  267, 1272, 1272,
      265,  266,  267, 1272, 1139,  264, 1272,  264, 1140,  266,
      267,  264,  265, 1272,  265, 1142, 1272,  180,  265, 1272,
     1141,  266,  267,  266,  267, 1272, 1272,  266,  267, 1272,
      264, 1272,  264,  181,  182, 1145, 1144,  265,  264,  265,
     1272, 1272, 1143, 1272, 1272,  265,  266,  267,  266,  267,
      793,  322, 1272,  793,  266,  267,  322, 1173,  911,  793,
     1272,  322,  793,  914,  914,  322, 1146,  914, 1272, 1147,
     1148, 1272, 1052,  793,  731,  914,  793,  914, 1272,  731,

     1272, 1054,  595,  731,  180,  595, 1272, 1272,  731, 1272,
      917,  595, 1272,  731,  595, 1150, 1272,  731, 1272, 1272,
      181,  182,  793,  343, 1057,  793,  914,  914,  343, 1272,
      921,  793, 1272,  343,  793,  924,  924,  343,  339,  924,
      793,  742, 1272,  793, 1059,  340,  742,  924, 1061,  924,
      595,  742, 1272,  595,  341,  342,  742, 1272,  927, 1272,
     1272, 1272, 1152,  595, 1272,  742,  595,  339, 1272,  742,
      339, 1272, 1064,  339,  340,  339, 1155,  340,  924,  924,
      340, 1272,  340,  341,  342, 1153,  341,  342, 1154,  341,
      342,  341,  342,  339, 1272, 1272, 1272,  339, 1272,  339,

      340,  339, 1272, 1272,  340, 1272,  340, 1272,  340,  341,
      342, 1156, 1157,  341,  342,  341,  342,  341,  342, 1159,
      339,  563, 1272, 1272,  339, 1272,  339,  340,  339, 1272,
     1158,  340, 1272,  340, 1272,  340,  341,  342, 1160, 1272,
      341,  342,  341,  342,  341,  342, 1162, 1272,  793,  375,
     1163,  793,  180, 1272,  375, 1161,  948,  563,  793, 1272,
      375,  793,  951,  951,  375, 1272,  951, 1272,  181,  182,
     1079, 1272,  793,  770,  951,  793,  951, 1272,  770, 1272,
     1081,  595,  770, 1175,  595, 1272, 1272,  770, 1272,  954,
      595, 1272,  770,  595, 1165,  371,  770,  371, 1272, 1272,

      371, 1272,  372, 1084,  372,  951,  951,  372,  371, 1272,
     1272,  373,  374,  373,  374,  372,  373,  374,  180, 1272,
      371, 1272,  371, 1166,  373,  374, 1167,  372, 1272,  372,
     1272,  383, 1272, 1272,  181,  182,  373,  374,  373,  374,
      793,  593, 1272,  793, 1171, 1168,  593,  180,  966,  793,
     1272,  593,  793,  180, 1272,  593, 1169,  180, 1272, 1170,
      970,  180, 1092,  181,  182,  180, 1272, 1272, 1272,  181,
      182, 1272, 1272,  181,  182,  180, 1272,  181,  182,  180,
     1272,  181,  182,  180, 1172,  180, 1272, 1177, 1174, 1272,
      180,  181,  182, 1176,  180,  181,  182,  180, 1272,  181,

      182,  181,  182, 1272,  180, 1179,  181,  182,  180, 1272,
      181,  182, 1180,  181,  182,  180, 1178,  180, 1272, 1181,
      181,  182,  180, 1272,  181,  182,  441, 1272, 1272,  180,
     1272,  181,  182,  181,  182,  180, 1272,  180,  181,  182,
      180, 1272,  180, 1272, 1183,  181,  182,  180, 1272, 1272,
     1272,  181,  182,  181,  182,  180,  181,  182,  181,  182,
     1182,  180, 1272,  181,  182,  180, 1184,  180, 1272, 1185,
      180,  181,  182,  793, 1272,  680,  793,  181,  182,  680,
     1272,  181,  182,  181,  182, 1272,  181,  182,  793,  680,
      264,  793,  264, 1186,  680, 1272, 1022,  265,  264,  265,

      180, 1187, 1188, 1272,  264,  265,  266,  267,  266,  267,
     1127,  265, 1272, 1272,  266,  267,  181,  182,  264, 1272,
      266,  267, 1218,  264, 1192,  265, 1272, 1189, 1272, 1190,
      265,  264, 1272, 1191,  266,  267, 1272, 1272,  265,  266,
      267, 1272, 1272,  264, 1272,  264, 1272,  266,  267, 1193,
      265,  264,  265, 1194, 1272, 1272, 1272,  264,  265,  266,
      267,  266,  267,  264,  265, 1272, 1272,  266,  267, 1272,
      265,  264, 1197,  266,  267,  264, 1196,  264,  265,  266,
      267, 1198,  265,  264,  265, 1195, 1272,  266,  267,  264,
      265,  266,  267,  266,  267,  264,  265, 1272, 1272,  266,

      267,  180,  265, 1201, 1272,  266,  267, 1272, 1199,  264,
     1272,  266,  267,  264, 1200,  264,  265,  181,  182, 1272,
      265, 1272,  265, 1219, 1272,  266,  267,  180, 1272,  266,
      267,  266,  267,  793,  731, 1272,  793, 1202, 1272,  731,
     1272, 1054, 1272,  181,  182, 1203, 1272, 1205, 1272, 1204,
      793, 1272,  731,  793,  339, 1150,  731,  793,  742, 1272,
      793,  340, 1272,  742, 1272, 1061,  793, 1272,  742,  793,
      341,  342,  742,  339, 1272, 1272,  339, 1272,  339, 1152,
      340, 1272, 1272,  340,  180,  340, 1272, 1272,  180,  341,
      342, 1206,  341,  342,  341,  342,  339, 1272, 1209,  339,

      181,  182, 1272,  340,  181,  182,  340,  339, 1272, 1272,
     1207, 1208,  341,  342,  340,  341,  342, 1272, 1210,  339,
     1272, 1221,  339,  341,  342, 1272,  340,  339,  563,  340,
     1272, 1272, 1272,  339,  340,  341,  342,  563,  341,  342,
      340, 1211, 1272,  341,  342,  793,  770,  371,  793,  341,
      342,  770, 1272, 1081,  372, 1212, 1272, 1272, 1213,  793,
     1272,  770,  793,  373,  374,  770,  371, 1165, 1272,  371,
     1272, 1272,  371,  372,  371,  563,  372,  180, 1214,  372,
     1272,  372,  373,  374,  180,  373,  374,  180,  373,  374,
      373,  374, 1272,  181,  182, 1216,  180, 1215, 1272, 1272,

      181,  182, 1272,  181,  182,  180, 1272,  180, 1217, 1272,
      383,  180,  181,  182,  180, 1220, 1272, 1272, 1222,  180,
     1272,  181,  182,  181,  182,  180, 1223,  181,  182,  180,
      181,  182,  180, 1224, 1272,  181,  182,  180, 1272, 1272,
      264,  181,  182, 1272,  264,  181,  182,  265,  181,  182,
     1225,  265,  264,  181,  182,  264,  266,  267, 1230,  265,
      266,  267,  265, 1272, 1272, 1272, 1226,  264,  266,  267,
     1228,  266,  267,  264,  265, 1272, 1272, 1227, 1229, 1272,
      265,  264, 1272,  266,  267, 1272,  264, 1272,  265,  266,
      267,  908, 1231,  265,  264, 1272,  515,  266,  267,  264,

     1272,  265,  266,  267, 1232,  908,  265,  264, 1272, 1272,
      266,  267, 1272,  264,  265,  266,  267, 1272,  264, 1272,
      265,  264, 1272,  266,  267,  265, 1272, 1272,  265,  266,
      267, 1272, 1233, 1234,  266,  267,  264,  266,  267,  264,
     1272, 1272, 1272,  265,  264, 1272,  265,  339, 1272, 1235,
      339,  265,  266,  267,  340,  266,  267,  340, 1236, 1272,
      266,  267,  339,  341,  342, 1272,  341,  342,  339,  340,
      339, 1272, 1237, 1238, 1272,  340, 1239,  340,  341,  342,
     1240,  339, 1272,  339,  341,  342,  341,  342,  340, 1272,
      340,  563, 1272, 1272, 1272,  339, 1272,  341,  342,  341,

      342, 1242,  340,  371, 1272, 1241,  371, 1272, 1243,  371,
      372,  341,  342,  372, 1272, 1244,  372,  371, 1272,  373,
      374,  180,  373,  374,  372,  373,  374,  383,  180, 1272,
      383,  180, 1272,  373,  374,  180, 1272,  181,  182, 1246,
     1245, 1272,  180, 1272,  181,  182,  180,  181,  182,  180,
     1272,  181,  182,  180, 1272, 1272,  180,  970,  181,  182,
      180, 1272,  181,  182, 1272,  181,  182,  264, 1272,  181,
      182,  828,  181,  182,  265, 1247,  181,  182,  264, 1272,
     1272,  264, 1248,  266,  267,  265,  264, 1272,  265, 1272,
     1272, 1272,  264,  265,  266,  267, 1272,  266,  267,  265,

     1272, 1272,  266,  267,  264, 1272, 1249, 1272,  266,  267,
     1272,  265,  264, 1272, 1272,  264, 1272, 1250, 1251,  265,
      266,  267,  265, 1253, 1252, 1272,  264, 1272,  266,  267,
     1254,  266,  267,  265, 1255, 1272, 1272,  264, 1272,  908,
      339, 1272,  266,  267,  265, 1272, 1272,  340,  339, 1272,
     1272,  339, 1272,  266,  267,  340,  341,  342,  340,  339,
     1272, 1272, 1256, 1272,  341,  342,  340,  341,  342, 1272,
     1272, 1272, 1272,  339, 1272,  341,  342,  339, 1272, 1257,
      340, 1272, 1272, 1272,  340,  339, 1272, 1258, 1259,  341,
      342, 1260,  340,  341,  342,  180, 1272,  371, 1272,  371,

     1272,  341,  342, 1261,  372, 1272,  372,  563,  180, 1272,
      563,  181,  182,  373,  374,  373,  374, 1272, 1272, 1272,
      264,  383,  264, 1272,  181,  182, 1272,  265, 1272,  265,
     1272,  999, 1272, 1272,  264,  383,  266,  267,  266,  267,
     1262,  265, 1263, 1272, 1264,  264, 1272,  264, 1272,  264,
      266,  267,  265, 1272,  265, 1272,  265, 1272, 1272, 1272,
     1265,  266,  267,  266,  267,  266,  267,  264, 1272, 1266,
      264, 1272,  339, 1272,  265,  339, 1272,  265, 1272,  340,
      693, 1272,  340,  266,  267, 1272,  266,  267,  341,  342,
      180,  341,  342,  339,  563,  339, 1272,  563,  339, 1272,

      340, 1272,  340, 1272, 1272,  340,  181,  182, 1272,  341,
      342,  341,  342, 1272,  341,  342,  264, 1272,  563, 1267,
      264, 1268,  264,  265,  264, 1272,  180,  265,  339,  265,
      563,  265,  266,  267, 1272,  340,  266,  267,  266,  267,
      266,  267,  181,  182,  341,  342,  264, 1272,  339, 1272,
      264, 1272, 1272,  265, 1269,  340, 1272,  265, 1272, 1272,
     1270, 1272,  266,  267,  341,  342,  266,  267, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1271, 1272,  563,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  179,  179, 1272, 1272,  179,
      179,  179,  183, 1272,  183,  183,  183,  183,  183,  183,
      183,  183,  263,  263, 1272, 1272,  263,  263,  263,  268,
     1272,  268,  268,  268,  268,  268,  268,  268,  268,  317,
      317, 1272, 1272,  317,  317,  317,  322, 1272,  322,  322,
      322,  322,  322,  322,  322,  322,  338,  338, 1272, 1272,
      338,  338,  338,  343, 1272,  343,  343,  343,  343,  343,

      343,  343,  343,  370,  370, 1272, 1272,  370,  370,  370,
      375, 1272,  375,  375,  375,  375,  375,  375,  375,  375,
      401, 1272, 1272, 1272,  401, 1272,  401,  401, 1272,  401,
      401,  405, 1272, 1272,  405,  405, 1272,  405,  405,  405,
      405,  405,  406,  406, 1272,  406,  406,  406,  406,  406,
      406,  406,  406,  407, 1272,  407,  407, 1272, 1272,  407,
     1272,  407,  409,  409,  409,  409,  409, 1272,  409,  497,
      497,  497,  497,  497, 1272,  497,  541,  541,  541,  541,
      541, 1272,  541,  551,  551,  551,  551,  551, 1272,  551,
      577,  577,  577,  577,  577, 1272,  577,  593, 1272,  593,

      593,  593,  593,  593,  593,  593,  593,  596, 1272, 1272,
     1272,  596,  596,  596,  596,  596,  596,  596,  680, 1272,
      680,  680,  680,  680,  680,  680,  680,  680,  682, 1272,
     1272, 1272,  682,  682,  682,  682,  682,  682,  682,  731,
     1272,  731,  731,  731,  731,  731,  731,  731,  731,  733,
     1272, 1272, 1272,  733,  733,  733,  733,  733,  733,  733,
      595, 1272, 1272, 1272,  595,  595,  595,  595,  595,  595,
      595,  742, 1272,  742,  742,  742,  742,  742,  742,  742,
      742,  744, 1272, 1272, 1272,  744,  744,  744,  744,  744,
      744,  744,  770, 1272,  770,  770,  770,  770,  770,  770,

      770,  770,  772, 1272, 1272, 1272,  772,  772,  772,  772,
      772,  772,  772,  791,  791, 1272,  791,  791,  791,  791,
      791,  791,  791,  791,  794, 1272, 1272, 1272,  794,  794,
      794,  794,  794,  794,  794,  799, 1272, 1272, 1272,  799,
      799,  799,  799,  799,  799,  799,  866,  866, 1272,  866,
      866,  866,  866,  866,  866,  866,  866,  868, 1272, 1272,
     1272,  868,  868,  868,  868,  868,  868,  868,  874, 1272,
     1272, 1272,  874,  874,  874,  874,  874,  874,  874,  909,
      909, 1272,  909,  909,  909,  909,  909,  909,  909,  909,
      911, 1272, 1272, 1272,  911,  911,  911,  911,  911,  911,

      911,  917, 1272, 1272, 1272,  917,  917,  917,  917,  917,
      917,  917,  793, 1272, 1272, 1272,  793,  793,  793,  793,
      793,  793,  793,  919,  919, 1272,  919,  919,  919,  919,
      919,  919,  919,  919,  921, 1272, 1272, 1272,  921,  921,
      921,  921,  921,  921,  921,  927, 1272, 1272, 1272,  927,
      927,  927,  927,  927,  927,  927,  946,  946, 1272,  946,
      946,  946,  946,  946,  946,  946,  946,  948, 1272, 1272,
     1272,  948,  948,  948,  948,  948,  948,  948,  954, 1272,
     1272, 1272,  954,  954,  954,  954,  954,  954,  954,  963,
      963, 1272,  963,  963,  963,  963,  963,  963,  963,  963,

      966, 1272, 1272, 1272,  966,  966,  966,  966,  966,  966,
      966,  968,  968, 1272,  968,  968,  968,  968,  968,  968,
      968,  968, 1019, 1019, 1272, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1022, 1272, 1272, 1272, 1022, 1022, 1022,
     1022, 1022, 1022, 1022,  682, 1272, 1272, 1272,  682,  682,
      682,  682,  682,  682,  682, 1024, 1024, 1272, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024,  263,  263, 1272, 1272,
      263,  263,  263, 1051, 1051, 1272, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1054, 1272, 1272, 1272, 1054, 1054,
     1054, 1054, 1054, 1054, 1054,  733, 1272, 1272, 1272,  733,

      733,  733,  733,  733,  733,  733, 1056, 1056, 1272, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056,  919,  919, 1272,
      919,  919,  919,  919,  919,  919,  919,  919,  921, 1272,
     1272, 1272,  921,  921,  921,  921,  921,  921,  921, 1058,
     1058, 1272, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1061, 1272, 1272, 1272, 1061, 1061, 1061, 1061, 1061, 1061,
     1061,  744, 1272, 1272, 1272,  744,  744,  744,  744,  744,
      744,  744, 1063, 1063, 1272, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063,  338,  338, 1272, 1272,  338,  338,  338,
      946,  946, 1272,  946,  946,  946,  946,  946,  946,  946,

      946,  948, 1272, 1272, 1272,  948,  948,  948,  948,  948,
      948,  948, 1078, 1078, 1272, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1081, 1272, 1272, 1272, 1081, 1081, 1081,
     1081, 1081, 1081, 1081,  772, 1272, 1272, 1272,  772,  772,
      772,  772,  772,  772,  772, 1083, 1083, 1272, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,  370,  370, 1272, 1272,
      370,  370,  370,  963,  963, 1272,  963,  963,  963,  963,
      963,  963,  963,  963,  793, 1272, 1272, 1272,  793,  793,
      793,  793,  793,  793,  793,  794, 1272, 1272, 1272,  794,
      794,  794,  794,  794,  794,  794, 1091, 1091, 1272, 1091,

     1091, 1091, 1091, 1091, 1091, 1091, 1091,  968,  968, 1272,
      968,  968,  968,  968,  968,  968,  968,  968,  179,  179,
     1272, 1272,  179,  179,  179, 1126, 1126, 1272, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1149, 1149, 1272, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1151, 1151, 1272,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1164, 1164,
     1272, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,   23,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272
    } ;

static yyconst flex_int16_t yy_chk[8527] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  951,   15,   15,   28,   15,   15,
       15,  924,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  914,   90,   28,   28,   13,   15,   13,  871,   29,
      799,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  796,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  774,   36,  599,   33,   33,   37,  109,  599,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  175,  175,  772,   39,
       39,  180,   39,   38,   39,   38,  184,  184,  746,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
       39,   41,   22,   22,   22,   40,   40,  269,  269,  323,
      323,  744,   42,  740,   38,   38,   22,   41,   41,  175,
      175,   40,   41,   43,   40,   46,  739,   40,   42,   42,
       41,   41,  735,   41,   42,   47,   41,   44,  733,   43,
       43,   46,   46,   45,   42,  684,   22,   22,  183,   22,
       42,   47,   47,   44,   44,   43,   46,   43,   43,   45,
       45,   47,  183,   45,   43,   45,   44,   44,   48,   44,

      682,   49,   44,  596,   44,  344,  344,  592,   45,  591,
      163,  550,  163,  549,   48,   48,   48,   49,   49,   49,
       49,   50,  264,   49,  548,   51,  163,   49,  547,   52,
       48,  376,  376,   49,   48,   53,  264,   50,   50,   50,
      546,   51,   51,   50,   51,   52,   52,   52,   51,   56,
      545,   53,   53,   50,   54,   51,   51,  686,   51,   50,
      400,   52,  686,   57,   52,   56,   56,   52,  268,   52,
       54,   54,   54,   53,   56,   56,   54,  318,  399,   57,
       57,   58,  268,   54,   56,  337,  322,  339,   59,  594,
      594,  318,   54,   55,   57,   61,  336,   58,   58,   58,

      322,  339,   61,   58,   59,   59,  343,   58,  335,   55,
       55,   61,   61,   59,   59,   55,   60,  334,   55,   64,
      343,  179,   64,   55,  737,   55,   64,   65,   55,  737,
       55,   55,   60,   60,   65,   64,   64,  179,  179,  107,
       60,   66,  106,   65,   65,   67,   60,   66,   66,  748,
      371,  375,   67,   66,  748,   67,   68,   66,   66,   69,
       23,   67,   67,   68,  371,  375,   69,    0,   68,  410,
       70,   70,   68,   68,   70,   69,   69,  498,    0,   71,
        0,   73,   70,  410,   70,   75,   71,   74,   73,  181,
        0,  498,   75,   76,   74,   71,   71,   73,   73,    0,

       76,   75,   75,   74,   74,  181,  181,   73,  542,   76,
       76,   76,    0,   70,   70,   71,   72,   75,   74,   86,
       75,   74,  542,   72,   78,  552,   86,    0,   74,  776,
      578,   78,   72,   72,  776,   86,   86,    0,   72,  552,
       78,   78,   79,   78,  578,   72,   72,    0,   72,   79,
       72,   72,  593,   72,   77,   86,   87,    0,   79,   79,
       79,   77,   80,   87,   79,    0,  593,    0,  680,   80,
       77,   77,   87,   87,   87,   77,   81,   77,   80,   80,
       82,   80,  680,   81,   80,   77,  185,   82,  196,  185,
       77,   77,   81,   81,   83,   81,   82,   82,   80,  731,

       84,   83,  185,  185,  196,  196,    0,   84,  189,   81,
       83,   83,   82,  731,   85,   82,   84,   84,  681,  681,
       83,   85,    0,   83,  189,  189,    0,   88,  732,  732,
       85,   85,   84,   84,   88,   89,   85,   84,   84,   88,
      189,   96,   89,   88,   88,  742,   85,   92,   96,   93,
       92,   89,   89,    0,   92,   93,   93,   96,   96,  742,
        0,  190,    0,   92,   92,   93,   93,   94,   94,   94,
       94,   94,   94,    0,   94,    0,   95,  190,  190,   97,
        0,   94,    0,   95,   95,   95,   97,   99,  770,  193,
       94,   94,   95,   95,   99,   97,   97,   98,   98,    0,

      190,   98,  770,   99,   99,  193,  193,  195,    0,   98,
      193,   98,  102,  102,  102,  102,  102,  102,   99,  743,
      743,  202,  102,  195,  195,  102,  104,  104,  104,  104,
      104,  104,    0,  195,  771,  771,  104,  202,  202,  104,
       98,   98,  105,  105,  105,  105,  105,  105,    0,  108,
        0,  112,  105,  114,  112,  105,  108,  115,  112,  114,
      114,    0,    0,  192,  115,  108,  108,  112,  112,  114,
      114,  116,    0,  115,  115,  120,    0,  117,  116,  192,
      192,    0,  120,    0,  117,    0,    0,  116,  116,  117,
        0,  120,  120,  117,  117,  121,  121,  122,  380,  121,

      192,  124,    0,  123,  122,  380,  380,  121,  124,  121,
      123,  380,  194,  122,  122,  125,    0,  124,  124,  123,
      123,    0,  125,    0,    0,    0,    0,  124,  194,  194,
        0,  125,  125,  122,  194,  123,  126,    0,  121,  121,
      123,  127,    0,  126,  134,    0,    0,  125,  127,  128,
      125,  134,  126,  126,  126,    0,  128,  127,  127,  779,
      134,  134,  127,  129,  127,  128,  128,  128,  779,    0,
      129,  128,  779,  779,  130,  779,  134,    0,  127,  129,
      129,  130,    0,    0,    0,  129,    0,  131,    0,  132,
      130,  130,  186,  130,  131,  133,  132,  205,  186,  129,

      137,    0,  133,  131,  131,  132,  132,  137,  186,  186,
        0,  133,  133,  205,  205,  132,  137,  137,  139,  131,
      140,  139,  131,  141,    0,  139,  140,  140,  133,    0,
      141,  142,  133,  205,  139,  139,  140,  140,  142,  141,
      141,  143,  143,  145,  198,  143,    0,  142,  142,    0,
      145,  145,  145,  143,    0,  143,  145,  146,    0,  147,
      198,  198,  145,  148,  146,  198,  147,    0,    0,    0,
      148,    0,    0,  146,  146,  147,  147,    0,  147,  148,
      148,    0,  148,    0,  143,  143,  144,    0,  146,  149,
        0,    0,    0,  144,  150,    0,  149,  151,    0,  148,

        0,  150,  144,  144,  151,  149,  149,    0,  144,    0,
      150,  150,    0,  151,  151,  144,  144,  152,    0,  187,
      144,  144,  149,  153,  152,  154,  151,  187,  187,  150,
      153,  197,  154,  152,  152,  187,  187,    0,    0,  153,
      153,  154,  154,  154,    0,    0,    0,  197,  197,  152,
        0,    0,    0,  197,    0,  152,    0,    0,    0,  153,
      155,  155,  155,  155,  155,  155,    0,  182,  182,  182,
      155,    0,  182,  155,  157,  157,  157,  157,  157,  157,
      182,    0,  182,    0,  157,    0,  199,  157,  158,  158,
      158,  158,  158,  158,    0,  188,  188,  191,  158,  188,

        0,  158,  199,  199,    0,  200,    0,  188,    0,  188,
        0,  182,  182,  191,  191,  199,  199,  199,  201,    0,
        0,  200,  200,  191,  199,  203,  191,  200,  204,    0,
      206,    0,    0,  207,  201,  201,    0,  201,  188,  188,
      208,  203,  203,  209,  204,  204,  206,  206,  210,  207,
      207,  204,  206,  207,  201,  203,  208,  208,  208,  209,
      209,    0,  211,    0,  210,  210,    0,    0,    0,  212,
      207,  213,    0,  214,    0,  209,  218,    0,  211,  211,
      215,    0,    0,  210,  211,  212,  212,  213,  213,  214,
      214,  216,  218,  218,  212,  218,  215,  215,  215,  217,

        0,  219,    0,    0,  214,  220,    0,  216,  216,  221,
      214,  216,  222,    0,    0,  217,  217,  219,  219,  219,
      223,  220,  220,  224,    0,  221,  221,  226,  222,  222,
      217,    0,    0,  219,    0,  225,  223,  223,  227,  224,
      224,  228,    0,  226,  226,    0,  221,    0,  222,  229,
      223,  225,  225,  230,  227,  227,  225,  228,  228,    0,
        0,    0,  226,    0,  224,  229,  229,  231,    0,  230,
      230,  232,    0,    0,    0,  233,  228,  234,  227,  229,
      230,  235,    0,  231,  231,  237,    0,  232,  232,  236,
      231,  233,  233,  234,  234,    0,    0,  235,  235,    0,

        0,  237,  237,  232,  238,  236,  236,  239,    0,  240,
        0,  237,    0,  234,  241,    0,  235,  237,  235,    0,
      238,  238,  236,  239,  239,  240,  240,  242,  239,  243,
      241,  241,    0,  244,    0,  240,    0,  246,    0,  245,
      238,    0,  247,  242,  242,  243,  243,    0,  242,  244,
      244,  241,    0,  246,  246,  245,  245,  245,  247,  247,
        0,  248,  244,  242,  249,  243,  242,  242,  245,  246,
        0,  250,    0,    0,  247,  251,  245,  248,  248,    0,
      249,  249,  252,    0,  253,    0,  249,  250,  250,  250,
      254,  251,  251,  250,  251,  255,  248,    0,  252,  252,

      253,  253,  256,    0,    0,  251,  254,  254,  254,  257,
        0,  255,  255,  258,  253,    0,  259,    0,  256,  256,
        0,  255,    0,  260,    0,  257,  257,    0,    0,  258,
      258,    0,  259,  259,  409,  258,  261,  256,  259,  260,
      260,  262,  261,    0,  257,    0,    0,  263,  259,  265,
      409,  409,  261,  261,  263,  266,  265,  262,  262,  262,
      260,    0,  266,  263,  263,  265,  265,    0,  267,  267,
      267,  266,  266,  267,    0,  270,    0,  272,  270,  271,
        0,  267,  270,  267,  272,  271,  271,  413,    0,    0,
      273,  270,  270,  272,  272,  271,  271,  273,  274,    0,

        0,    0,  276,  413,  413,  274,  273,  273,    0,  276,
        0,    0,  267,  267,  274,  274,  275,  275,  276,  276,
      275,    0,  413,    0,  277,    0,  278,    0,  275,  279,
      275,  277,    0,  278,    0,  414,  279,    0,  276,    0,
      277,  277,  278,  278,  278,  279,  279,  280,  279,  281,
        0,  414,  414,    0,  280,  282,  281,    0,  277,  275,
      275,  414,  282,  280,  280,  281,  281,    0,    0,  283,
        0,  282,  282,  284,    0,  285,  283,  280,  280,    0,
      284,  286,  285,    0,  282,  283,  283,  287,  286,  284,
      284,  285,  285,    0,  287,  288,  285,  286,  286,  289,

        0,  283,  288,  287,  287,    0,  289,    0,    0,    0,
      284,  288,  288,    0,    0,  289,  289,    0,  290,    0,
      292,    0,  291,    0,  287,  290,  293,  292,  291,  291,
      288,  289,  291,  293,  290,  290,  292,  292,  291,  291,
      294,    0,  293,  293,  291,  295,  293,  294,  792,  792,
      792,  792,  295,  296,  792,  290,  294,  294,  297,    0,
      296,  295,  295,    0,  298,  297,  299,  295,    0,  296,
      296,  298,  301,  299,  297,  297,    0,  297,    0,  301,
      298,  298,  299,  299,  300,  296,  300,  298,  301,  301,
      302,    0,    0,  300,  300,  297,  301,  302,  303,  300,

      300,    0,  304,    0,  303,  303,  302,  302,  415,  304,
        0,    0,    0,  305,  303,  303,  306,  302,  304,  304,
      305,  307,    0,  306,  415,  415,  415,    0,  307,  305,
      305,  304,  306,  306,  303,  305,  308,  307,  307,  309,
      306,  310,    0,  308,    0,  305,  309,  311,  310,    0,
        0,    0,  308,  308,  311,  309,  309,  310,  310,    0,
        0,  309,  312,  311,  311,  313,  311,  314,    0,  312,
      315,  308,  313,  316,  314,    0,  310,  315,  312,  312,
      316,  313,  313,  314,  314,  317,  315,  315,    0,  316,
      316,  319,  317,  314,    0,    0,  320,  312,  319,    0,

        0,  317,  317,  320,    0,  315,    0,  319,  319,  321,
      321,  321,  320,  320,  321,    0,  324,  329,  329,  324,
      325,  329,  321,  324,  321,    0,  325,  325,  330,  329,
      416,  329,  324,  324,    0,  330,  325,  325,  326,  326,
      326,  326,  326,  326,  330,  330,  416,  416,  326,  328,
        0,  326,    0,  321,  321,    0,  328,  328,  328,    0,
      329,  329,    0,    0,    0,  328,  328,  331,  331,  331,
      331,  331,  331,    0,  342,  342,  342,  331,    0,  342,
      331,  333,  333,  333,  333,  333,  333,  342,  338,  342,
      340,  333,  341,    0,  333,  338,    0,  340,    0,  341,

        0,    0,    0,    0,  338,  338,  340,  340,  341,  341,
      345,    0,    0,  345,  346,    0,  347,  345,  342,  342,
      346,  346,    0,  347,  348,  348,  345,  345,  348,    0,
      346,  346,  347,  347,  349,    0,  348,  351,  348,  352,
        0,  349,  350,    0,  351,  353,  352,  417,    0,  350,
      349,  349,  353,  351,  351,  352,  352,    0,  350,  350,
        0,  353,  353,  417,  417,    0,    0,  348,  348,  351,
      349,  354,  350,  350,  355,    0,  352,  357,  354,  356,
      353,  355,  417,    0,  357,    0,  356,  354,  354,  356,
      355,  355,  358,  357,  357,  356,  356,    0,    0,  358,

      359,  356,    0,  354,    0,  360,    0,  359,  358,  358,
      418,  355,  360,  361,  358,    0,  359,  359,  362,    0,
      361,  360,  360,    0,  363,  362,  418,  418,  360,  361,
      361,  363,    0,    0,  362,  362,    0,  359,  364,    0,
      363,  363,  362,  361,  422,  364,  365,    0,    0,  361,
      361,  363,  418,  365,  364,  364,    0,  366,    0,    0,
      422,  422,  365,  365,  366,    0,    0,  364,  365,  367,
        0,  368,    0,  366,  366,    0,  367,  369,  368,    0,
        0,  366,  370,    0,  369,  367,  367,  368,  368,  370,
        0,  367,  419,  369,  369,  372,    0,  373,  370,  370,

        0,    0,  372,    0,  373,    0,  368,  423,  419,  419,
      419,  372,  372,  373,  373,  374,  374,  374,  377,    0,
      374,  377,    0,  423,  423,  377,  378,    0,  374,    0,
      374,    0,  378,  378,  377,  377,  379,  379,  381,  423,
      379,    0,  378,  378,    0,  381,  382,    0,  379,    0,
      379,  383,    0,  382,  381,  381,  381,  384,  383,  374,
      374,    0,  382,  382,  384,  382,    0,  383,  383,    0,
        0,  385,    0,  384,  384,    0,    0,  386,  385,  379,
      379,    0,  387,    0,  386,    0,  384,  385,  385,  387,
      388,    0,  385,  386,  386,    0,  389,  388,  387,  387,

        0,  390,  387,  389,    0,    0,  388,  388,  390,  391,
        0,    0,  389,  389,  386,    0,  391,  390,  390,    0,
      389,    0,  388,  392,    0,  391,  391,  393,    0,    0,
      392,  394,    0,    0,  393,  395,    0,  390,  394,  392,
      392,  391,  395,  393,  393,    0,  393,  394,  394,    0,
      420,  395,  395,    0,    0,    0,    0,  394,  392,  396,
      396,  396,  396,  396,  396,  430,  420,  420,    0,  396,
      395,    0,  396,  398,  398,  398,  398,  398,  398,  420,
        0,  430,  430,  398,    0,  421,  398,  411,  424,    0,
      411,    0,    0,    0,    0,  411,  411,  411,  430,  425,

      411,  421,  421,  421,  424,  424,  426,  411,  411,  427,
      411,  411,  411,    0,    0,  425,  425,  428,  424,  425,
      425,  424,  426,  426,    0,  427,  427,    0,    0,  431,
      427,  429,    0,  428,  428,    0,  425,  426,    0,  411,
      411,  412,  432,    0,  412,  431,  431,  429,  429,  412,
      412,  412,  433,  429,  412,  428,  434,    0,  432,  432,
      435,  412,  412,  436,  412,  412,  412,  437,  433,  433,
      439,    0,  434,  434,  438,    0,  435,  435,    0,  436,
      436,  440,  435,  437,  437,  434,  439,  439,  437,  441,
      438,  438,  433,  412,  412,  442,    0,  440,  440,  444,

      436,  443,    0,  440,  438,  441,  441,  445,    0,  447,
      439,  442,  442,    0,    0,  444,  444,  443,  443,  446,
      444,  448,    0,  445,  445,  447,  447,  449,  442,  445,
      443,  450,    0,  451,    0,  446,  446,  448,  448,    0,
      446,  448,  447,  449,  449,  452,    0,  450,  450,  451,
      451,  453,    0,  454,    0,  455,  451,  456,    0,    0,
        0,  452,  452,  450,  457,    0,    0,  453,  453,  454,
      454,  455,  455,  456,  456,  458,  456,  459,    0,    0,
      457,  457,  454,  452,  460,  455,  453,  461,    0,    0,
        0,  458,  458,  459,  459,    0,  458,  462,    0,  463,

      460,  460,    0,  461,  461,  464,  460,  465,    0,  466,
        0,    0,  461,  462,  462,  463,  463,  467,  462,  468,
      460,  464,  464,  465,  465,  466,  466,  469,  464,    0,
      463,  470,  465,  467,  467,  468,  468,    0,    0,  471,
        0,  472,  464,  469,  469,  468,  473,  470,  470,    0,
      474,    0,    0,    0,  467,  471,  471,  472,  472,    0,
        0,  471,  473,  473,  475,  469,  474,  474,  476,  470,
      477,    0,  474,    0,    0,  478,  472,  479,    0,  480,
      475,  475,    0,    0,  476,  476,  477,  477,  481,    0,
      476,  478,  478,  479,  479,  480,  480,  482,  479,  475,

        0,    0,  483,    0,  481,  481,  484,    0,  485,  481,
      486,    0,    0,  482,  482,  478,  480,    0,  483,  483,
        0,    0,  484,  484,  485,  485,  486,  486,  481,  487,
        0,  488,  486,    0,  482,  483,  486,    0,  485,  489,
        0,  490,  484,    0,    0,  487,  487,  488,  488,  487,
      491,    0,  492,    0,  488,  489,  489,  490,  490,    0,
      490,    0,  493,    0,  494,  489,  491,  491,  492,  492,
        0,  867,  867,  867,  867,  489,  495,  867,  493,  493,
      494,  494,  496,    0,    0,    0,    0,  492,  497,  494,
      491,  493,  495,  495,  501,  497,  502,    0,  496,  496,

      601,  501,    0,  502,  497,  497,    0,  495,  503,    0,
      501,  501,  502,  502,    0,  503,  601,  601,    0,  496,
      499,    0,    0,  499,  503,  503,  501,    0,  499,  499,
      499,  504,  502,  499,    0,  499,    0,  601,  504,  506,
      499,  499,    0,  499,  499,  499,  506,  504,  504,  505,
      507,  505,    0,  508,    0,  506,  506,  507,    0,  505,
      508,  504,  604,    0,  505,  505,  507,  507,    0,  508,
      508,    0,  499,  499,  500,    0,    0,  500,  604,  604,
        0,    0,  500,  500,  500,  507,    0,  500,  604,  500,
      508,  509,    0,  509,  500,  500,  510,  500,  500,  500,

      509,  509,  509,  510,  511,    0,  509,  509,  512,  509,
        0,  511,  510,  510,    0,  512,  513,    0,  510,    0,
      511,  511,    0,  513,  512,  512,  500,  500,  514,    0,
      515,    0,  513,  513,  511,  514,    0,  515,  512,    0,
        0,  513,  516,    0,  514,  514,  515,  515,  517,  516,
      518,  512,    0,  514,  519,  517,    0,  518,  516,  516,
        0,  519,  520,    0,  517,  517,  518,  518,    0,  520,
      519,  519,  516,  516,  521,    0,  522,  517,  520,  520,
        0,  521,  523,  522,  520,  518,    0,  524,    0,  523,
      521,  521,  522,  522,  524,  526,  521,    0,  523,  523,

      525,    0,  526,  524,  524,    0,    0,  525,  527,    0,
        0,  526,  526,  522,  523,  527,  525,  525,  525,  528,
        0,  529,    0,  524,  527,  527,  528,    0,  529,    0,
      527,  526,  530,    0,  531,  528,  528,  529,  529,  530,
      532,  531,    0,    0,  528,  533,    0,  532,  530,  530,
      531,  531,  533,    0,  531,    0,  532,  532,    0,  534,
        0,  533,  533,    0,  535,    0,  534,    0,    0,    0,
      533,  535,  536,    0,  530,  534,  534,  532,  537,  536,
      535,  535,    0,    0,  535,  537,  538,    0,  536,  536,
      536,    0,  539,  538,  537,  537,  534,    0,  537,  539,

        0,    0,  538,  538,  540,    0,    0,    0,  539,  539,
      541,  540,  551,    0,  537,  555,  538,  541,  556,  551,
      540,  540,  555,  539,    0,  556,  541,  541,  551,  551,
        0,  555,  555,    0,  556,  556,  557,    0,    0,    0,
      540,  543,    0,  557,  543,    0,    0,  555,  556,  543,
      543,  543,  557,  557,  543,    0,  543,    0,    0,  557,
        0,  543,  543,  559,  543,  543,  543,  558,    0,  560,
      559,  561,  557,  602,  558,  563,  560,    0,  561,  559,
      559,    0,  563,  558,  558,  560,  560,  561,  561,  602,
      602,  563,  563,  543,  543,  544,    0,    0,  544,  560,

      559,    0,  558,  544,  544,  544,  562,    0,  544,  602,
      544,    0,    0,  562,  561,  544,  544,  566,  544,  544,
      544,  605,  562,  562,  566,  564,    0,    0,  565,    0,
        0,  562,  564,  566,  566,  565,    0,  605,  605,  566,
        0,  564,  564,    0,  565,  565,    0,  544,  544,  553,
        0,    0,  553,    0,    0,  564,  564,  553,  553,  553,
      567,    0,  553,  565,  553,  606,    0,  567,  568,  553,
      553,  569,  553,  553,  553,  568,  567,  567,  569,  572,
        0,  606,  606,    0,  568,  568,  572,  569,  569,    0,
        0,    0,  570,  606,    0,  572,  572,  567,  571,  570,

      568,  553,  553,  554,    0,  571,  554,  569,  570,  570,
      570,  554,  554,  554,  571,  571,  554,    0,  554,  612,
      571,  572,  573,  554,  554,    0,  554,  554,  554,  573,
        0,  607,    0,  574,    0,  612,  612,  575,  573,  573,
      574,  612,  573,    0,  575,  576,    0,  607,  607,  574,
      574,    0,  576,  575,  575,  554,  554,  575,  574,  577,
        0,  576,  576,  576,    0,  613,  577,  581,  607,    0,
        0,    0,  583,    0,  581,  577,  577,  579,    0,  583,
      579,  613,  613,  581,  581,  579,  579,  579,  583,  583,
      579,  613,  579,    0,  583,    0,    0,  579,  579,  584,

      579,  579,  579,  581,    0,  586,  584,  585,    0,    0,
      587,    0,  586,    0,  585,  584,  584,  587,    0,  610,
        0,  586,  586,  585,  585,    0,  587,  587,  584,  579,
      579,  580,  615,    0,  580,  610,  610,  610,    0,  580,
      580,  580,  586,  585,  580,    0,  580,  587,  615,  615,
      588,  580,  580,    0,  580,  580,  580,  588,  589,    0,
        0,  590,    0,  603,    0,  589,  588,  588,  590,  615,
      588,    0,    0,    0,  589,  589,    0,  590,  590,  603,
      603,    0,    0,  580,  580,  582,  588,  597,  597,  589,
      597,    0,  582,  597,  608,  597,  609,  590,    0,  603,

        0,  582,  582,  616,    0,    0,    0,    0,  582,  597,
      608,  608,  609,  609,    0,  582,    0,  582,    0,  616,
      616,  582,  582,  617,  582,  598,  611,    0,  598,  608,
        0,  609,    0,  598,  598,  598,    0,  614,  598,  617,
      617,  616,  611,  611,  618,    0,  598,  617,  598,  598,
      598,  619,  611,  614,  614,  620,    0,    0,  611,  621,
      618,  618,    0,  614,  622,    0,    0,  619,  619,  623,
        0,  620,  620,  618,    0,  621,  621,  598,  598,  600,
      622,  622,  600,    0,    0,  623,  623,  600,  600,  600,
      620,  624,  600,    0,  625,  622,  627,  621,  626,    0,

      600,  628,  600,  600,  600,    0,  623,  624,  624,  624,
      625,  625,  627,  627,  626,  626,    0,  628,  628,  629,
        0,  627,    0,    0,  630,    0,  631,    0,  632,  625,
      634,  600,  600,  626,  633,  629,  629,    0,    0,  628,
      630,  630,  631,  631,  632,  632,  634,  634,  635,    0,
      633,  633,  636,  630,  637,  629,  638,    0,    0,  633,
      639,    0,    0,  640,  635,  635,    0,  641,  636,  636,
      637,  637,  638,  638,  635,  642,  639,  639,  639,  640,
      640,  636,  638,  641,  641,  640,  637,  643,    0,    0,
        0,  642,  642,    0,  644,    0,  645,    0,  646,    0,

      647,    0,  648,  643,  643,  650,  642,    0,    0,  643,
      644,  644,  645,  645,  646,  646,  647,  647,  648,  648,
      649,  650,  650,  651,  648,    0,  647,  652,    0,  653,
        0,    0,  654,    0,    0,  646,  649,  649,    0,  651,
      651,  649,    0,  652,  652,  653,  653,  652,  654,  654,
      654,  655,    0,  656,    0,  651,  657,    0,  658,  653,
        0,    0,    0,  659,    0,  660,    0,  655,  655,  656,
      656,  661,  657,  657,  658,  658,  657,  655,  658,  659,
      659,  660,  660,  662,    0,    0,  663,  661,  661,  656,
      664,    0,    0,    0,  665,    0,  666,    0,    0,  662,

      662,  660,  663,  663,  667,    0,  664,  664,  668,  661,
      665,  665,  666,  666,  666,    0,  669,    0,  662,  670,
      667,  667,  663,    0,  668,  668,  671,    0,    0,  672,
        0,  665,  669,  669,  673,  670,  670,  674,  669,  668,
      675,    0,  671,  671,  671,  672,  672,  676,    0,    0,
      673,  673,    0,  674,  674,  677,  675,  675,  678,    0,
        0,  670,  675,  676,  676,  679,  673,    0,    0,  676,
        0,  677,  677,  674,  678,  678,  678,  801,    0,    0,
      688,  679,  679,  683,  683,  679,  683,  688,    0,  683,
        0,  683,    0,  801,  801,  690,  688,  688,    0,    0,

      688,  689,  690,    0,    0,  683,  685,  804,  689,  685,
        0,  690,  690,    0,  685,  685,  685,  689,  689,  685,
        0,  685,    0,  804,  804,  691,  804,  685,  692,  685,
      685,  685,  691,  690,    0,  692,  693,  689,    0,  694,
        0,  691,  691,  693,  692,  692,  694,    0,    0,    0,
      695,  691,  693,  693,    0,  694,  694,  695,  685,  685,
      687,    0,    0,  687,    0,  692,  695,  695,  687,  687,
      687,  694,  696,  687,    0,  697,    0,    0,  805,  696,
      695,  687,  697,  687,  687,  687,    0,  695,  696,  696,
      698,  697,  697,  699,  805,  805,    0,  698,    0,  805,

      699,  700,  696,    0,  701,  697,  698,  698,  700,  699,
      699,  701,  687,  687,    0,  698,    0,  700,  700,  702,
      701,  701,  701,  703,    0,  806,  702,  704,    0,    0,
      703,  705,  700,    0,  704,  702,  702,    0,  705,  703,
      703,  806,  806,  704,  704,  703,    0,  705,  705,  704,
      706,  806,  707,    0,  708,    0,  803,  706,  709,  707,
        0,  708,    0,  705,    0,  709,  706,  706,  707,  707,
      708,  708,  803,  803,  709,  709,  709,  710,  803,  711,
        0,  712,    0,  706,  710,    0,  711,  807,  712,  707,
        0,    0,  708,  710,  710,  711,  711,  712,  712,    0,

      713,    0,  716,  807,  807,  714,  710,  713,  715,  716,
        0,    0,  714,    0,    0,  715,  713,  713,  716,  716,
      711,  714,  714,  714,  715,  715,  717,    0,  718,  715,
        0,  719,    0,  717,  720,  718,    0,  808,  719,    0,
        0,  720,  717,  717,  718,  718,  717,  719,  719,    0,
      720,  720,  721,  808,  808,  722,  720,    0,    0,  721,
      718,  719,  722,  723,    0,    0,  726,    0,  721,  721,
      723,  722,  722,  726,  721,    0,    0,  724,    0,  723,
      723,  725,  726,  726,  724,  813,    0,    0,  725,  727,
        0,    0,  722,  724,  724,  726,  727,  725,  725,  723,

        0,  813,  813,  724,    0,  727,  727,  728,    0,  729,
        0,    0,  730,  728,  728,    0,  729,    0,  725,  730,
        0,  727,  813,  728,  728,  729,  729,    0,  730,  730,
        0,  734,  734,  729,  734,    0,    0,  734,    0,  734,
        0,    0,  810,  745,  745,    0,  745,    0,    0,  745,
        0,  745,    0,  734,  736,    0,    0,  736,  810,  810,
        0,    0,  736,  736,  736,  745,  750,  736,    0,  736,
        0,  810,  815,  750,  751,  736,    0,  736,  736,  736,
      817,  751,  750,  750,    0,  753,  750,  752,  815,  815,
      751,  751,  753,  754,  752,    0,  817,  817,  756,    0,

      754,  753,  753,  752,  752,  756,  736,  736,  738,  754,
      754,  738,  751,  752,  756,  756,  738,  738,  738,  755,
      756,  738,  753,  757,    0,  754,  755,  819,    0,  738,
      757,  738,  738,  738,  758,  755,  755,  755,    0,  757,
      757,  758,  759,  819,  819,  757,    0,  761,    0,  759,
      758,  758,  802,  819,  761,    0,    0,    0,  759,  759,
      738,  738,  747,  761,  761,  747,    0,  758,  802,  802,
      747,  747,  747,  760,  802,  747,    0,  747,  816,  759,
      760,    0,    0,  747,  802,  747,  747,  747,  761,  760,
      760,  760,  762,    0,  816,  816,  763,    0,  816,  762,

        0,    0,    0,  763,    0,  809,    0,    0,  762,  762,
      762,  764,  763,  763,  747,  747,  749,  763,  764,  749,
        0,  809,  809,    0,  749,  749,  749,  764,  764,  749,
        0,  764,  824,    0,    0,  765,  809,  749,  766,  749,
      749,  749,  765,    0,    0,  766,  767,    0,  824,  824,
      768,  765,  765,  767,  766,  766,    0,  768,  824,    0,
      766,    0,  767,  767,  769,  765,  768,  768,  749,  749,
        0,  769,  778,    0,    0,    0,  768,    0,  811,  778,
      769,  769,  812,  767,  773,  773,  780,  773,  778,  778,
      773,    0,  773,  780,  811,  811,    0,  781,  812,  812,

      812,  769,  780,  780,  781,    0,  773,  775,  778,  811,
      775,    0,    0,  781,  781,  775,  775,  775,  782,    0,
      775,    0,  775,    0,    0,  782,  783,  781,  775,  785,
      775,  775,  775,  783,  782,  782,  785,  784,    0,    0,
      786,    0,  783,  783,  784,  785,  785,  786,  782,  826,
        0,  783,    0,  784,  784,    0,  786,  786,    0,  775,
      775,  777,  786,    0,  777,  826,  826,  785,  784,  777,
      777,  777,  787,    0,  777,    0,  788,    0,    0,  787,
      789,    0,  777,  788,  777,  777,  777,  789,  787,  787,
      814,    0,  788,  788,  790,    0,  789,  789,    0,    0,

        0,  790,    0,    0,    0,  788,  814,  814,  787,  820,
      790,  790,  789,  777,  777,    0,  791,  791,  790,  791,
        0,  814,  791,    0,  791,  820,  820,  825,  795,  795,
      820,  795,    0,    0,  795,    0,  795,    0,  791,  794,
      821,    0,  794,  825,  825,  825,    0,  794,  794,  794,
      795,    0,  794,  823,  798,  798,  821,  821,  798,    0,
      794,  821,  794,  794,  794,  818,  798,  822,  798,  823,
      823,    0,  800,  800,    0,  800,    0,    0,  800,    0,
      800,  818,  818,  822,  822,    0,    0,  818,  827,  822,
      823,  794,  794,  797,  800,  828,  797,  798,  798,    0,

        0,  797,  797,  797,  827,  827,  797,  829,    0,  827,
      830,  828,  828,  831,  797,  832,  797,  797,  797,  833,
        0,    0,  834,  829,  829,  836,  830,  830,    0,  831,
      831,  832,  832,  835,    0,  833,  833,  832,  834,  834,
      837,  836,  836,  829,    0,  797,  797,  838,    0,  835,
      835,  839,    0,  834,  831,  840,  837,  837,  841,  833,
      836,    0,  835,  838,  838,  842,    0,  839,  839,  843,
        0,  840,  840,  844,  841,  841,  837,  837,  841,    0,
      845,  842,  842,    0,  840,  843,  843,  846,    0,  844,
      844,  847,    0,  848,    0,  844,  845,  845,  849,    0,

      843,    0,  845,  846,  846,  850,    0,  847,  847,  848,
      848,    0,    0,  851,  849,  849,  846,    0,  848,    0,
      852,  850,  850,  853,    0,  854,    0,  855,  847,  851,
      851,  856,    0,  851,    0,  849,  852,  852,    0,  853,
      853,  854,  854,  855,  855,    0,  852,  856,  856,  857,
        0,  854,  858,    0,  859,  856,  860,    0,  861,    0,
      862,    0,  855,  863,    0,  857,  857,  864,  858,  858,
      859,  859,  860,  860,  861,  861,  862,  862,  865,  863,
      863,    0,    0,  864,  864,  859,    0,    0,    0,    0,
      866,  866,  860,  866,  865,  865,  866,    0,  866,    0,

        0,    0,  864,  865,    0,  873,  873,    0,    0,  873,
        0,    0,  866,  868,    0,    0,  868,  873,    0,  873,
        0,  868,  868,  868,  869,  869,  868,  869,  868,    0,
      869,    0,  869,    0,  868,  970,  868,  868,  868,  875,
      875,    0,  875,  876,    0,  875,  869,  875,  873,  873,
      876,  970,  970,    0,    0,  877,    0,  878,    0,  876,
      876,  875,  877,    0,  878,  868,  868,  872,  973,  876,
      872,  877,  877,  878,  878,  872,  872,  872,    0,  879,
      872,    0,  880,    0,  973,  973,  879,    0,  872,  880,
      872,  872,  872,  881,  878,  879,  879,  882,  880,  880,

      881,    0,    0,  879,  882,    0,  973,    0,    0,  881,
      881,  883,    0,  882,  882,    0,    0,  880,  883,  872,
      872,  874,  882,    0,  874,    0,    0,  883,  883,  874,
      874,  874,  883,  884,  874,    0,  874,    0,    0,  972,
      884,  885,  874,    0,  874,  874,  874,  886,  885,  884,
      884,    0,  887,    0,  886,  972,  972,  885,  885,  887,
      888,    0,    0,  886,  886,    0,    0,  888,  887,  887,
      884,  889,  885,  874,  874,  972,  888,  888,  889,  890,
        0,    0,  886,    0,  887,    0,  890,  889,  889,    0,
        0,  891,  888,    0,  892,  890,  890,  889,  891,  893,

      890,  892,  894,    0,    0,  895,  893,  891,  891,  894,
      892,  892,  895,  896,    0,  893,  893,  897,  894,  894,
      896,  895,  895,  895,  897,  898,  894,    0,  891,  896,
      896,  899,  898,  897,  897,    0,    0,  901,  899,  900,
        0,  898,  898,    0,  901,    0,  900,  899,  899,  897,
      896,  902,  899,  901,  901,  900,  900,  898,  902,  900,
        0,    0,  903,    0,    0,  904,    0,  902,  902,  903,
        0,    0,  904,    0,    0,    0,  905,    0,  903,  903,
      903,  904,  904,  905,  906,    0,  974,  904,  907,    0,
      908,  906,  905,  905,  905,  907,    0,  908,    0,    0,

      906,  906,  974,  974,  907,  907,  908,  908,  909,  909,
        0,  909,    0,  907,  909,    0,  909,    0,  974,  906,
      910,  910,  910,  910,  916,  916,  910,    0,  916,    0,
      909,  911,    0,    0,  911,    0,  916,    0,  916,  911,
      911,  911,  912,  912,  911,  912,  911,    0,  912,    0,
      912,    0,  911,    0,  911,  911,  911,  918,  918,    0,
      918,    0,    0,  918,  912,  918,    0,  916,  916,  919,
      919,    0,  919,  931,    0,  919,    0,  919,    0,  918,
      931,    0,    0,  911,  911,  915,    0,  975,  915,  931,
      931,  919,    0,  915,  915,  915,    0,  931,  915,  920,

      920,  920,  920,  975,  975,  920,  915,    0,  915,  915,
      915,  922,  922,    0,  922,    0,    0,  922,  975,  922,
        0,    0,  926,  926,  928,  928,  926,  928,  934,    0,
      928,    0,  928,  922,  926,  934,  926,  915,  915,  917,
      971,    0,  917,    0,  934,  934,  928,  917,  917,  917,
        0,  929,  917,    0,  917,    0,  971,  971,  929,  934,
      917,    0,  917,  917,  917,  926,  926,  929,  929,  932,
        0,    0,  930,    0,    0,  971,  932,  929,    0,  930,
        0,  986,    0,  933,    0,  932,  932,    0,  930,  930,
      933,  917,  917,  921,  976,    0,  921,  986,  986,  933,

      933,  921,  921,  921,  932,  935,  921,  977,  921,  930,
      976,  976,  935,    0,  921,  976,  921,  921,  921,  936,
      933,  935,  935,  977,  977,  979,  936,  937,    0,  977,
        0,    0,  938,    0,  937,  936,  936,    0,    0,  938,
      935,  979,  979,  937,  937,  921,  921,  923,  938,  938,
      923,  936,    0,  937,  979,  923,  923,  923,  939,    0,
      923,    0,  923,    0,    0,  939,    0,    0,  923,  938,
      923,  923,  923,  940,  939,  939,  941,    0,  944,    0,
      940,  943,  939,  941,    0,  944,    0,    0,  943,  940,
      940,  940,  941,  941,  944,  944,  944,  943,  943,  923,

      923,  925,  943,    0,  925,    0,    0,    0,    0,  925,
      925,  925,  942,  941,  925,    0,  945,    0,    0,  942,
        0,    0,  925,  945,  925,  925,  925,    0,  942,  942,
        0,    0,  945,  945,  946,  946,    0,  946,  945,    0,
      946,    0,  946,  961,  942,  947,  947,  947,  947,    0,
      961,  947,    0,  925,  925,  927,  946,    0,  927,  961,
      961,  961,    0,  927,  927,  927,  949,  949,  927,  949,
      927,    0,  949,    0,  949,    0,  927,    0,  927,  927,
      927,    0,  953,  953,  955,  955,  953,  955,  949,    0,
      955,    0,  955,    0,  953,    0,  953,    0,  956,    0,

        0,    0,    0,    0,    0,  956,  955,  927,  927,  948,
        0,    0,  948,    0,  956,  956,    0,  948,  948,  948,
      956,  957,  948,  978,  948,  953,  953,    0,  957,    0,
      948,  980,  948,  948,  948,  958,    0,  957,  957,  978,
      978,    0,  958,  959,    0,  978,  957,  980,  980,    0,
      959,  958,  958,  982,    0,    0,  958,  980,    0,  959,
      959,  948,  948,  950,  959,    0,  950,    0,    0,  982,
      982,  950,  950,  950,  960,  982,  950,    0,  950,    0,
        0,  960,    0,    0,  950,    0,  950,  950,  950,  962,
      960,  960,  963,  963,  960,  963,  962,    0,  963,    0,

      963,  964,  964,  964,  964,  962,  962,  964,    0,  965,
      965,    0,    0,  965,  963,  950,  950,  952,    0,    0,
      952,  965,    0,  965,  962,  952,  952,  952,  967,  967,
      952,  967,    0,    0,  967,    0,  967,    0,  952,    0,
      952,  952,  952,  968,  968,  981,  968,  983,    0,  968,
      967,  968,  965,  965,  969,  969,  969,  969,    0,  987,
      969,  981,  981,  983,  983,  968,    0,  983,    0,  952,
      952,  954,  984,    0,  954,  987,  987,    0,    0,  954,
      954,  954,  985,  981,  954,  988,  954,    0,  984,  984,
      987,  991,  954,    0,  954,  954,  954,    0,  985,  985,

      989,  988,  988,  990,  985,  992,    0,  991,  991,  984,
      993,    0,    0,  991,    0,  994,  989,  989,    0,  990,
      990,  992,  992,  954,  954,  966,  993,  993,  966,    0,
        0,  994,  994,  966,  966,  966,  995,  989,  966,  996,
      990,  997,    0,  998,    0,    0,  966,  999,  966,  966,
      966,  994,  995,  995, 1000,  996,  996,  997,  997,  998,
      998,  996,    0,  999,  999, 1001,    0,  997, 1002,    0,
     1000, 1000, 1003,    0,    0, 1004,    0,  966,  966, 1000,
     1005, 1001, 1001, 1006, 1002, 1002, 1007, 1001, 1003, 1003,
     1003, 1004, 1004, 1008,    0, 1009, 1005, 1005, 1010, 1006,

     1006, 1011, 1007, 1007,    0, 1002, 1012,    0, 1007, 1008,
     1008, 1009, 1009, 1013, 1010, 1010, 1014, 1011, 1011, 1015,
     1010,    0, 1012, 1012, 1016,    0,    0,    0, 1017, 1013,
     1013, 1018, 1014, 1014,    0, 1015, 1015,    0, 1011,    0,
     1016, 1016,    0, 1012, 1017, 1017, 1016, 1018, 1018,    0,
        0, 1019, 1019,    0, 1019, 1013, 1015, 1019,    0, 1019,
        0,    0,    0, 1017, 1020, 1020, 1020, 1020, 1021, 1021,
     1020,    0, 1021, 1019,    0, 1023, 1023,    0, 1023,    0,
     1021, 1023, 1021, 1023, 1024, 1024,    0, 1024, 1094,    0,
     1024, 1026, 1024, 1025, 1025, 1025, 1025, 1023, 1026, 1025,

        0,    0,    0, 1027, 1094, 1094, 1024, 1026, 1026, 1026,
     1027, 1021, 1021,    0,    0, 1028,    0, 1029,    0, 1027,
     1027, 1027, 1028, 1030, 1029,    0,    0,    0, 1031,    0,
     1030, 1028, 1028, 1029, 1029, 1031,    0,    0,    0, 1030,
     1030, 1032,    0, 1033, 1031, 1031,    0, 1034, 1032, 1030,
     1033,    0,    0, 1028, 1034, 1029,    0, 1032, 1032, 1033,
     1033, 1035,    0, 1034, 1034, 1036,    0, 1037, 1035, 1038,
        0,    0, 1036, 1039, 1037, 1034, 1038, 1035, 1035,    0,
     1039, 1036, 1036, 1037, 1037, 1038, 1038, 1040,    0, 1039,
     1039, 1038, 1041, 1037, 1040, 1039,    0,    0, 1035, 1041,

     1042,    0, 1036, 1040, 1040, 1043,    0, 1042, 1041, 1041,
        0,    0, 1043, 1044,    0,    0, 1042, 1042,    0,    0,
     1044, 1043, 1043,    0, 1040, 1045,    0, 1046, 1042, 1044,
     1044, 1047, 1045,    0, 1046, 1044,    0, 1096, 1047,    0,
     1043, 1045, 1045, 1046, 1046,    0,    0, 1047, 1047,    0,
     1048,    0, 1049, 1096, 1096, 1047, 1046, 1048, 1050, 1049,
        0,    0, 1045,    0,    0, 1050, 1048, 1048, 1049, 1049,
     1051, 1051,    0, 1051, 1050, 1050, 1051, 1096, 1051, 1052,
     1052, 1052, 1052, 1053, 1053, 1052, 1048, 1053,    0, 1049,
     1050,    0, 1051, 1055, 1055, 1053, 1055, 1053,    0, 1055,

        0, 1055, 1056, 1056, 1097, 1056,    0,    0, 1056,    0,
     1056, 1057, 1057, 1057, 1057, 1055,    0, 1057,    0,    0,
     1097, 1097, 1058, 1058, 1056, 1058, 1053, 1053, 1058,    0,
     1058, 1059, 1059, 1059, 1059, 1060, 1060, 1059, 1067, 1060,
     1062, 1062,    0, 1062, 1058, 1067, 1062, 1060, 1062, 1060,
     1063, 1063,    0, 1063, 1067, 1067, 1063,    0, 1063,    0,
        0,    0, 1062, 1064, 1064, 1064, 1064, 1065,    0, 1064,
     1066,    0, 1063, 1068, 1065, 1069, 1067, 1066, 1060, 1060,
     1068,    0, 1069, 1065, 1065, 1065, 1066, 1066, 1066, 1068,
     1068, 1069, 1069, 1070,    0,    0,    0, 1071,    0, 1072,

     1070, 1073,    0,    0, 1071,    0, 1072,    0, 1073, 1070,
     1070, 1068, 1069, 1071, 1071, 1072, 1072, 1073, 1073, 1071,
     1074, 1072,    0,    0, 1075,    0, 1077, 1074, 1076,    0,
     1070, 1075,    0, 1077,    0, 1076, 1074, 1074, 1073,    0,
     1075, 1075, 1077, 1077, 1076, 1076, 1075,    0, 1078, 1078,
     1077, 1078, 1099,    0, 1078, 1074, 1078, 1076, 1079, 1079,
     1079, 1079, 1080, 1080, 1079,    0, 1080,    0, 1099, 1099,
     1078,    0, 1082, 1082, 1080, 1082, 1080,    0, 1082,    0,
     1082, 1083, 1083, 1099, 1083,    0,    0, 1083,    0, 1083,
     1084, 1084, 1084, 1084, 1082, 1085, 1084, 1086,    0,    0,

     1087,    0, 1085, 1083, 1086, 1080, 1080, 1087, 1088,    0,
        0, 1085, 1085, 1086, 1086, 1088, 1087, 1087, 1093,    0,
     1089,    0, 1090, 1086, 1088, 1088, 1087, 1089,    0, 1090,
        0, 1085,    0,    0, 1093, 1093, 1089, 1089, 1090, 1090,
     1091, 1091,    0, 1091, 1093, 1088, 1091, 1095, 1091, 1092,
     1092, 1092, 1092, 1098,    0, 1092, 1089, 1100,    0, 1090,
     1093, 1101, 1091, 1095, 1095, 1102,    0,    0,    0, 1098,
     1098,    0,    0, 1100, 1100, 1103,    0, 1101, 1101, 1104,
        0, 1102, 1102, 1105, 1095, 1106,    0, 1102, 1098,    0,
     1107, 1103, 1103, 1101, 1110, 1104, 1104, 1108,    0, 1105,

     1105, 1106, 1106,    0, 1109, 1105, 1107, 1107, 1111,    0,
     1110, 1110, 1107, 1108, 1108, 1112, 1104, 1113,    0, 1108,
     1109, 1109, 1114,    0, 1111, 1111, 1109,    0,    0, 1115,
        0, 1112, 1112, 1113, 1113, 1116,    0, 1117, 1114, 1114,
     1118,    0, 1119,    0, 1114, 1115, 1115, 1120,    0,    0,
        0, 1116, 1116, 1117, 1117, 1121, 1118, 1118, 1119, 1119,
     1113, 1122,    0, 1120, 1120, 1123, 1117, 1124,    0, 1120,
     1125, 1121, 1121, 1127, 1127, 1127, 1127, 1122, 1122, 1127,
        0, 1123, 1123, 1124, 1124,    0, 1125, 1125, 1126, 1126,
     1128, 1126, 1129, 1121, 1126,    0, 1126, 1128, 1130, 1129,

     1171, 1123, 1125,    0, 1131, 1130, 1128, 1128, 1129, 1129,
     1126, 1131,    0,    0, 1130, 1130, 1171, 1171, 1132,    0,
     1131, 1131, 1171, 1133, 1131, 1132,    0, 1128,    0, 1129,
     1133, 1134,    0, 1130, 1132, 1132,    0,    0, 1134, 1133,
     1133,    0,    0, 1135,    0, 1136,    0, 1134, 1134, 1132,
     1135, 1137, 1136, 1134,    0,    0,    0, 1138, 1137, 1135,
     1135, 1136, 1136, 1139, 1138,    0,    0, 1137, 1137,    0,
     1139, 1140, 1137, 1138, 1138, 1141, 1136, 1143, 1140, 1139,
     1139, 1139, 1141, 1142, 1143, 1135,    0, 1140, 1140, 1144,
     1142, 1141, 1141, 1143, 1143, 1145, 1144,    0,    0, 1142,

     1142, 1172, 1145, 1143,    0, 1144, 1144,    0, 1141, 1146,
        0, 1145, 1145, 1147, 1142, 1148, 1146, 1172, 1172,    0,
     1147,    0, 1148, 1172,    0, 1146, 1146, 1174,    0, 1147,
     1147, 1148, 1148, 1149, 1149,    0, 1149, 1145,    0, 1149,
        0, 1149,    0, 1174, 1174, 1146,    0, 1148,    0, 1147,
     1150, 1150, 1150, 1150, 1153, 1149, 1150, 1151, 1151,    0,
     1151, 1153,    0, 1151,    0, 1151, 1152, 1152, 1152, 1152,
     1153, 1153, 1152, 1154,    0,    0, 1155,    0, 1156, 1151,
     1154,    0,    0, 1155, 1175, 1156,    0,    0, 1177, 1154,
     1154, 1153, 1155, 1155, 1156, 1156, 1157,    0, 1156, 1158,

     1175, 1175,    0, 1157, 1177, 1177, 1158, 1159,    0,    0,
     1154, 1155, 1157, 1157, 1159, 1158, 1158,    0, 1157, 1160,
        0, 1175, 1161, 1159, 1159,    0, 1160, 1162, 1159, 1161,
        0,    0,    0, 1163, 1162, 1160, 1160, 1160, 1161, 1161,
     1163, 1158,    0, 1162, 1162, 1164, 1164, 1166, 1164, 1163,
     1163, 1164,    0, 1164, 1166, 1161,    0,    0, 1162, 1165,
     1165, 1165, 1165, 1166, 1166, 1165, 1167, 1164,    0, 1168,
        0,    0, 1169, 1167, 1170, 1163, 1168, 1178, 1166, 1169,
        0, 1170, 1167, 1167, 1173, 1168, 1168, 1176, 1169, 1169,
     1170, 1170,    0, 1178, 1178, 1168, 1179, 1167,    0,    0,

     1173, 1173,    0, 1176, 1176, 1180,    0, 1181, 1169,    0,
     1170, 1182, 1179, 1179, 1183, 1173,    0,    0, 1176, 1184,
        0, 1180, 1180, 1181, 1181, 1185, 1180, 1182, 1182, 1186,
     1183, 1183, 1187, 1182,    0, 1184, 1184, 1188,    0,    0,
     1191, 1185, 1185,    0, 1189, 1186, 1186, 1191, 1187, 1187,
     1183, 1189, 1190, 1188, 1188, 1192, 1191, 1191, 1191, 1190,
     1189, 1189, 1192,    0,    0,    0, 1186, 1193, 1190, 1190,
     1189, 1192, 1192, 1194, 1193,    0,    0, 1188, 1190,    0,
     1194, 1196,    0, 1193, 1193,    0, 1195,    0, 1196, 1194,
     1194, 1193, 1192, 1195, 1197,    0, 1195, 1196, 1196, 1198,

        0, 1197, 1195, 1195, 1194, 1196, 1198, 1199,    0,    0,
     1197, 1197,    0, 1200, 1199, 1198, 1198,    0, 1201,    0,
     1200, 1202,    0, 1199, 1199, 1201,    0,    0, 1202, 1200,
     1200,    0, 1199, 1200, 1201, 1201, 1203, 1202, 1202, 1204,
        0,    0,    0, 1203, 1205,    0, 1204, 1206,    0, 1201,
     1207, 1205, 1203, 1203, 1206, 1204, 1204, 1207, 1203,    0,
     1205, 1205, 1208, 1206, 1206,    0, 1207, 1207, 1209, 1208,
     1210,    0, 1205, 1206,    0, 1209, 1207, 1210, 1208, 1208,
     1208, 1211,    0, 1212, 1209, 1209, 1210, 1210, 1211,    0,
     1212, 1211,    0,    0,    0, 1213,    0, 1211, 1211, 1212,

     1212, 1210, 1213, 1214,    0, 1209, 1215,    0, 1212, 1216,
     1214, 1213, 1213, 1215,    0, 1213, 1216, 1217,    0, 1214,
     1214, 1218, 1215, 1215, 1217, 1216, 1216, 1214, 1219,    0,
     1215, 1220,    0, 1217, 1217, 1221,    0, 1218, 1218, 1217,
     1216,    0, 1222,    0, 1219, 1219, 1223, 1220, 1220, 1224,
        0, 1221, 1221, 1225,    0,    0, 1226, 1218, 1222, 1222,
     1227,    0, 1223, 1223,    0, 1224, 1224, 1228,    0, 1225,
     1225, 1221, 1226, 1226, 1228, 1225, 1227, 1227, 1229,    0,
        0, 1230, 1226, 1228, 1228, 1229, 1232,    0, 1230,    0,
        0,    0, 1231, 1232, 1229, 1229,    0, 1230, 1230, 1231,

        0,    0, 1232, 1232, 1233,    0, 1228,    0, 1231, 1231,
        0, 1233, 1234,    0,    0, 1235,    0, 1229, 1230, 1234,
     1233, 1233, 1235, 1232, 1231,    0, 1236,    0, 1234, 1234,
     1233, 1235, 1235, 1236, 1234,    0,    0, 1237,    0, 1235,
     1238,    0, 1236, 1236, 1237,    0,    0, 1238, 1239,    0,
        0, 1240,    0, 1237, 1237, 1239, 1238, 1238, 1240, 1241,
        0,    0, 1236,    0, 1239, 1239, 1241, 1240, 1240,    0,
        0,    0,    0, 1242,    0, 1241, 1241, 1243,    0, 1238,
     1242,    0,    0,    0, 1243, 1244,    0, 1239, 1240, 1242,
     1242, 1241, 1244, 1243, 1243, 1247,    0, 1245,    0, 1246,

        0, 1244, 1244, 1243, 1245,    0, 1246, 1244, 1248,    0,
     1242, 1247, 1247, 1245, 1245, 1246, 1246,    0,    0,    0,
     1249, 1245, 1250,    0, 1248, 1248,    0, 1249,    0, 1250,
        0, 1247,    0,    0, 1251, 1246, 1249, 1249, 1250, 1250,
     1248, 1251, 1249,    0, 1250, 1252,    0, 1253,    0, 1254,
     1251, 1251, 1252,    0, 1253,    0, 1254,    0,    0,    0,
     1251, 1252, 1252, 1253, 1253, 1254, 1254, 1255,    0, 1254,
     1256,    0, 1257,    0, 1255, 1258,    0, 1256,    0, 1257,
     1252,    0, 1258, 1255, 1255,    0, 1256, 1256, 1257, 1257,
     1262, 1258, 1258, 1259, 1257, 1260,    0, 1258, 1261,    0,

     1259,    0, 1260,    0,    0, 1261, 1262, 1262,    0, 1259,
     1259, 1260, 1260,    0, 1261, 1261, 1263,    0, 1261, 1259,
     1264, 1262, 1265, 1263, 1266,    0, 1268, 1264, 1267, 1265,
     1260, 1266, 1263, 1263,    0, 1267, 1264, 1264, 1265, 1265,
     1266, 1266, 1268, 1268, 1267, 1267, 1269,    0, 1270,    0,
     1271,    0,    0, 1269, 1265, 1270,    0, 1271,    0,    0,
     1267,    0, 1269, 1269, 1270, 1270, 1271, 1271,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1269,    0, 1270,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1278, 1278,    0,    0, 1278,
     1278, 1278, 1279,    0, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1280, 1280,    0,    0, 1280, 1280, 1280, 1281,
        0, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282,
     1282,    0,    0, 1282, 1282, 1282, 1283,    0, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1284, 1284,    0,    0,
     1284, 1284, 1284, 1285,    0, 1285, 1285, 1285, 1285, 1285,

     1285, 1285, 1285, 1286, 1286,    0,    0, 1286, 1286, 1286,
     1287,    0, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1288,    0,    0,    0, 1288,    0, 1288, 1288,    0, 1288,
     1288, 1289,    0,    0, 1289, 1289,    0, 1289, 1289, 1289,
     1289, 1289, 1290, 1290,    0, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1291,    0, 1291, 1291,    0,    0, 1291,
        0, 1291, 1292, 1292, 1292, 1292, 1292,    0, 1292, 1293,
     1293, 1293, 1293, 1293,    0, 1293, 1294, 1294, 1294, 1294,
     1294,    0, 1294, 1295, 1295, 1295, 1295, 1295,    0, 1295,
     1296, 1296, 1296, 1296, 1296,    0, 1296, 1297,    0, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298,    0,    0,
        0, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1299,    0,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300,    0,
        0,    0, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,
        0, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302,
        0,    0,    0, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1303,    0,    0,    0, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1304,    0, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1305,    0,    0,    0, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1306,    0, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1307,    0,    0,    0, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1308, 1308,    0, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1309,    0,    0,    0, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1310,    0,    0,    0, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1311, 1311,    0, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1312,    0,    0,
        0, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1313,    0,
        0,    0, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314,
     1314,    0, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1315,    0,    0,    0, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1316,    0,    0,    0, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1317,    0,    0,    0, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1318, 1318,    0, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1319,    0,    0,    0, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1320,    0,    0,    0, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321,    0, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,    0,    0,
        0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,    0,
        0,    0, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324,
     1324,    0, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,

     1325,    0,    0,    0, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1328,    0,    0,    0, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1329,    0,    0,    0, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1330, 1330,    0, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331,    0,    0,
     1331, 1331, 1331, 1332, 1332,    0, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1333,    0,    0,    0, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1334,    0,    0,    0, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335,    0, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1336, 1336,    0,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1337,    0,
        0,    0, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,
     1338,    0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1339,    0,    0,    0, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1340,    0,    0,    0, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1341, 1341,    0, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1342, 1342,    0,    0, 1342, 1342, 1342,
     1343, 1343,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1344,    0,    0,    0, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1345, 1345,    0, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1346,    0,    0,    0, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1347,    0,    0,    0, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348,    0, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349,    0,    0,
     1349, 1349, 1349, 1350, 1350,    0, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1351,    0,    0,    0, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1352,    0,    0,    0, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,    0, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,    0,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355,
        0,    0, 1355, 1355, 1355, 1356, 1356,    0, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357,    0, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,    0,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359,
        0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "./lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2866 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 114 "./lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3073 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1273 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8470 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "./lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "./lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 128 "./lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 129 "./lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 133 "./lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 137 "./lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "./lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "./lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "./lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "./lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "./lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "./lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "./lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "./lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "./lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "./lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "./lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "./lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "./lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "./lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "./lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "./lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "./lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "./lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "./lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "./lexer.ll"
return KW_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "./lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "./lexer.ll"
return KW_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "./lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "./lexer.ll"
return KW_GENERATE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "./lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "./lexer.ll"
return KW_MATCH;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "./lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "./lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "./lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "./lexer.ll"
return KW_SET;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "./lexer.ll"
return KW_SHOW;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "./lexer.ll"
return KW_ON;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "./lexer.ll"
return KW_OFF;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "./lexer.ll"
return KW_TRACE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "./lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "./lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "./lexer.ll"
return KW_DO;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "./lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "./lexer.ll"
return KW_BODY;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 177 "./lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "./lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "./lexer.ll"
return KW_SELECT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "./lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "./lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "./lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "./lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "./lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "./lexer.ll"
return KW_PRINT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "./lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "./lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "./lexer.ll"
return KW_COLOR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "./lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 190 "./lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 191 "./lexer.ll"
return KW_FLAT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "./lexer.ll"
return KW_WITH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "./lexer.ll"
return KW_PARENS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "./lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "./lexer.ll"
return KW_GC;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "./lexer.ll"
return KW_TIME;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "./lexer.ll"
return KW_STATS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "./lexer.ll"
return KW_TIMING;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "./lexer.ll"
return KW_CMD;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "./lexer.ll"
return KW_ALL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "./lexer.ll"
return KW_MODULES;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 202 "./lexer.ll"
return KW_MODULE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 203 "./lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "./lexer.ll"
return KW_SORTS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 205 "./lexer.ll"
return KW_OPS2;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 206 "./lexer.ll"
return KW_VARS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 207 "./lexer.ll"
return KW_MBS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 208 "./lexer.ll"
return KW_EQS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "./lexer.ll"
return KW_RLS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 210 "./lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "./lexer.ll"
return KW_KINDS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "./lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 213 "./lexer.ll"
return KW_COUNT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "./lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 215 "./lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "./lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 217 "./lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 218 "./lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "./lexer.ll"
return KW_RESUME;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "./lexer.ll"
return KW_ABORT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "./lexer.ll"
return KW_STEP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "./lexer.ll"
return KW_WHERE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "./lexer.ll"
return KW_DUMP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "./lexer.ll"
return KW_BREAK;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "./lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 226 "./lexer.ll"
return KW_PATH;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 227 "./lexer.ll"
return KW_LABEL;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 228 "./lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 229 "./lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 230 "./lexer.ll"
return KW_RAT;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 231 "./lexer.ll"
return *yytext;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 232 "./lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 237 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 251 "./lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 255 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 256 "./lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 257 "./lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 258 "./lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 266 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 271 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 111:
YY_RULE_SETUP
#line 283 "./lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "./lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "./lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "./lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "./lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "./lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "./lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "./lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "./lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "./lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "./lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "./lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "./lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "./lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 297 "./lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 298 "./lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 299 "./lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 300 "./lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 301 "./lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 302 "./lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 303 "./lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 304 "./lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 305 "./lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 306 "./lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 307 "./lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 308 "./lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "./lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "./lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "./lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "./lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "./lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "./lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "./lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "./lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "./lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "./lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "./lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "./lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "./lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "./lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "./lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "./lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "./lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "./lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "./lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "./lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "./lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 330 "./lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 331 "./lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 332 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 333 "./lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 334 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 163:
YY_RULE_SETUP
#line 341 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 347 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 353 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 359 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 365 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 371 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 377 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 383 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 389 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 398 "./lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 402 "./lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 413 "./lexer.ll"
STORE
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 414 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 425 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 436 "./lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 178:
YY_RULE_SETUP
#line 445 "./lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 453 "./lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 180:
YY_RULE_SETUP
#line 461 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 465 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 469 "./lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 183:
YY_RULE_SETUP
#line 481 "./lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 487 "./lexer.ll"
accumulator += ' ';
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 488 "./lexer.ll"
accumulator += '"';
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 489 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 490 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 491 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 492 "./lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 501 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 510 "./lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 516 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 517 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 194:
YY_RULE_SETUP
#line 526 "./lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 531 "./lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 196:
YY_RULE_SETUP
#line 540 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 541 "./lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 546 "./lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 560 "./lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 564 "./lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 568 "./lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 572 "./lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 575 "./lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 581 "./lexer.ll"
;
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 582 "./lexer.ll"
++lineNumber;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 583 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 588 "./lexer.ll"
ECHO;
	YY_BREAK
#line 4464 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1273 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1273 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1272);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 588 "./lexer.ll"



#include "lexerAux.cc"

