
#line 2 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 229
#define YY_END_OF_BUFFER 230
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1368] =
    {   0,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,    0,    0,    0,    0,  217,  217,
        0,    0,  230,  228,  226,  227,  227,  117,  228,  115,
      117,  117,  117,  115,  116,  116,  117,  228,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   17,  117,  117,  117,  117,  117,  117,  117,
      184,  228,  182,  182,  182,  184,  182,  182,  184,  228,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  125,  228,
      119,  125,  125,  123,  122,  119,  125,  228,  125,  125,

      125,  119,  127,  127,  126,  127,  127,  127,  127,  200,
      228,  195,  196,  200,  186,  200,  198,  185,  189,  187,
      188,  200,  228,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  197,  205,  205,  205,
      205,  205,  203,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  226,  202,  228,  227,
      211,  212,  213,  206,  210,  215,  214,  216,  217,  218,
      225,  219,  224,  224,  220,  221,  219,  222,  223,  226,
      117,    0,  117,    0,    0,    0,  117,  117,  116,    0,
      117,  117,  117,  117,  117,  117,  117,   12,  117,  117,

      117,  117,  117,  117,   48,  117,  117,  117,   83,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   70,  117,
      117,    5,  117,  117,  117,   16,  117,   15,  117,   82,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       43,   80,  117,  117,  117,  117,  117,  117,  117,  117,
       84,  117,   86,  117,  117,  117,  117,  117,  117,  117,
      117,  117,    6,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  184,    0,  183,  184,    0,    0,
        0,  184,  184,  177,  180,  181,  178,    0,  184,  184,
      184,  184,  184,  170,  184,  184,  184,  184,  184,  169,

      158,  184,  184,  184,  184,  157,  184,  156,  184,  184,
      184,  184,  167,  184,  184,  184,  163,  184,  158,  184,
      171,  173,  184,  184,  184,  184,  184,  128,  158,  184,
      179,  125,    0,  124,  125,    0,    0,    0,  125,  125,
        0,  118,  122,    0,  125,  125,    5,  226,  126,    0,
        0,    0,    0,    0,  200,    0,  199,  200,    0,    0,
        0,  200,  200,  191,  190,    0,  200,  200,  200,  200,
      200,  200,  200,  200,  193,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  192,  205,    0,  204,
      205,    0,    0,    0,  205,  205,    0,  205,  205,  205,

      201,  205,  205,  205,  201,  205,  205,  205,  201,  201,
      205,  205,  205,  201,  205,  226,  202,    0,    0,    0,
      211,  207,  208,  209,  215,  217,  219,  219,  117,    0,
        2,    2,  117,  117,  117,   75,  117,  117,  117,  117,
      117,  117,   74,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   18,   83,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   34,  117,  117,  117,  117,  117,
      117,  117,  117,   82,  117,  117,    6,   32,  117,  117,
      117,   44,  117,   80,  117,  117,  117,  117,  117,  117,
       11,  117,  109,   21,  117,  117,   24,   84,  117,   86,

      117,  117,   41,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   81,  117,
      117,  117,  117,  117,  117,  117,  117,  184,    0,    2,
        2,  184,  184,  168,  184,  184,  172,  174,  184,  184,
      184,  184,  184,  184,  184,  184,  133,  184,  158,  184,
      175,  184,  184,  184,  184,  184,  184,  151,  150,  184,
      164,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  166,  125,    0,    2,    2,    0,    0,  125,  125,
        0,    0,    2,    2,  200,    0,    2,    2,  200,  200,
      200,  200,  200,  200,  200,  200,  194,  200,  200,  200,

      200,  200,  200,  200,  194,  200,  200,  200,  200,  200,
      205,    0,    2,    2,  205,  205,  205,  201,  201,  205,
      205,  205,  205,  205,  201,    0,    0,    0,    0,    2,
        2,    2,    1,    2,    2,  117,  117,  117,   60,   50,
      117,  117,  117,  117,  117,  117,  117,  117,   57,  117,
       31,  117,   22,  117,  117,  117,  102,   25,  117,  117,
      117,   65,  114,  117,   26,  117,  117,  117,  117,  117,
      117,    9,   30,  117,    3,  117,  117,  117,  117,   20,
      117,    7,  117,  117,  105,   14,  117,  117,  117,  117,
       17,  117,  117,  117,  117,  117,   84,  117,  117,   42,

      117,  117,   79,   23,   27,  117,  100,  117,  117,  117,
      110,   71,  117,  117,  117,  117,   81,  117,    8,  117,
      117,  117,   66,  117,  117,    0,    0,    2,    2,    2,
        1,    2,    2,  184,  184,  132,  184,  184,  146,  184,
      184,  175,  184,  184,  176,  184,  184,  129,  184,  184,
      184,  134,  184,  184,  135,  184,  184,  136,    3,  184,
      184,  165,  184,  184,  145,  138,  184,  184,  159,  184,
      184,  184,  184,  184,  184,  166,    0,    0,    2,    2,
        2,    1,    2,    2,    0,    0,  125,  125,    1,    0,
        0,    2,    2,    2,    1,    2,    2,  200,  194,  200,

      200,  200,  200,  200,  200,  194,  200,  194,  200,  200,
      200,  200,  194,  194,  200,  200,  200,    0,    0,    2,
        2,    2,    1,    2,    2,  205,  205,  201,  201,  205,
      205,  205,  205,  205,  201,  205,  205,  205,  205,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,   99,
      117,   68,  117,  103,  117,   29,   49,   62,  117,  117,
      117,  117,  117,   69,  117,   90,  117,   95,  117,   28,
      117,  117,  117,  117,  117,  117,  117,  117,   63,  117,
       96,   88,  106,   37,  117,  117,  117,  117,  117,  117,
       67,   19,   59,  117,  117,   13,  117,  117,  117,  117,

      117,  117,  117,   10,  117,   79,  117,  117,   72,   85,
       58,  117,  117,   45,   40,  117,  117,   78,  117,  101,
       52,  117,  117,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,  131,  161,  184,  184,  184,  152,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      130,  147,  184,  184,  184,  184,  184,  184,  184,  137,
      159,  184,  141,  184,  184,  184,  158,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,  121,  125,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  194,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  194,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  201,  205,  205,  205,
      205,  205,  201,  205,  205,    1,    1,    1,    1,    1,
        2,    2,   46,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       92,  117,  117,    4,  117,  117,  117,  117,  106,   64,
       77,   32,  117,  117,  108,   67,  117,  117,  117,  117,
       21,   98,   56,  117,   39,   53,  117,  117,  117,   85,
      117,  117,   73,  117,  117,  117,  117,   38,    1,    1,
        1,    1,    1,    2,    2,  184,  184,  149,  184,  184,

        4,  144,  139,  184,  184,  184,  184,  184,  184,  184,
      150,  184,  184,  184,  184,  184,  184,  143,  184,  184,
      184,    1,    1,    1,    1,    1,    2,    2,  120,    1,
        1,    1,    1,    1,    2,    2,  200,  200,  194,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,    1,
        1,    1,    1,    1,    2,    2,  205,  205,  205,  205,
      205,  205,    1,    1,  117,   68,  117,  117,   51,   89,
      117,   55,  117,  117,  117,   22,  117,  117,  117,   94,
      117,  117,  117,  117,   93,  117,   76,   61,  117,  117,
      107,   91,  117,   24,  117,   23,  117,  117,   87,   36,

       47,  117,  117,    1,    1,  184,  184,  184,  184,  184,
      153,  184,  184,  184,  184,  151,  184,  154,  184,  184,
      184,  148,  184,  184,  160,  184,    1,    1,    1,    1,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,    1,    1,  205,  205,  205,  205,  201,  117,  117,
      117,   89,  117,  117,   69,   31,   54,  117,   25,   97,
      117,   26,  117,  117,  117,  117,  109,  117,   27,  117,
       35,  117,  117,  184,  184,  184,  184,  184,  184,  184,
      184,  135,  140,  184,  184,  184,  142,  162,  160,  184,
      200,  200,  200,  200,  200,  200,  200,  200,  205,  205,

      205,  201,  117,   60,  104,  117,   57,   69,   28,   65,
      117,  117,   20,  117,  117,  117,  112,   33,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  155,  200,  200,
      200,  200,  200,  200,  200,  205,  205,  113,  117,  117,
      111,  117,  184,  184,  184,  184,  134,  184,  138,  162,
      200,  200,  200,  200,  200,   96,  117,  131,  132,  184,
      145,  200,   58,  184,  200,  149,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,   13,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static const flex_int16_t yy_base[1462] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  753, 9075,  174, 9075, 9075,  309,  317, 9075,
      341, 9075,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  487,  431,  463,  470,  474,  511,  518,
      532,  541,  467,  553,  571,  572,  568,  595,  561,  602,
      620,  321, 9075,  622,  624,  642,  645,  653,  650,  670,
      673,  716,  677,  679,  705,  681,  754,  711,  742,  762,
      776,  780,  794,  793,  821,  719,  756,  832,  834,  324,
     9075,  852,  840,  877,  879,  882,  885,  902,  905,  909,

      913, 9075, 9075,  945, 9075,  959,  973,  738,  698,  973,
      366, 9075, 9075,  975, 9075,  977,  981,  995, 1001, 9075,
     9075, 1003, 1020, 1007, 1029, 1031, 1037, 1034, 1060, 1068,
     1071, 1063, 1089, 1092, 1094, 1042, 9075, 9075, 1112,  372,
     1123, 1135, 1137, 1143, 1156, 1202, 1148, 1156, 1167, 1178,
     1196, 1191, 1199, 1223, 1234, 1204, 1269, 9075, 1283, 1297,
        0, 9075, 9075, 9075,  464,    0, 9075, 9075,    0, 9075,
     9075,    0, 9075, 9075, 9075, 9075,  662, 9075, 9075,  188,
      417,  430,  630, 1283,  442,  405,  786,  999, 1297, 1306,
     1100,  708, 1242, 1299,  845, 1098,  864,  788, 1301, 1309,

     1322, 1324, 1330, 1342,  819, 1332,  933, 1039, 1356, 1360,
     1363, 1176, 1368, 1371, 1381, 1374, 1257, 1389, 1395, 1401,
     1404, 1408, 1413, 1415, 1423, 1419, 1433, 1437, 1441, 1443,
     1445, 1447, 1452, 1455, 1466, 1470, 1477, 1481, 1495, 1484,
     1503, 1509, 1513, 1521, 1515, 1517, 1523, 1535, 1542, 1546,
     1555, 1549, 1557, 1580, 1560, 1583, 1587, 1590, 1594, 1605,
     1612, 1618, 1620, 1632, 1639, 1643, 1647, 1650, 1658, 1670,
     1661, 1672, 1684, 1679, 1691,  481, 1699, 1703, 1712,  485,
      415, 1721, 1723, 1726, 1734, 1745, 1747, 1764, 1767, 1771,
     1773, 1785, 1799, 1807, 1810, 1821, 1818, 1836, 1840, 1848,

     1851, 1859, 1863, 1874, 1886, 1882, 1897, 1905, 1909, 1920,
     1923, 1928, 1941, 1932, 1949, 1954, 1972, 1967, 1975, 1986,
     1998, 2004, 2006, 2009, 2012, 2017, 2032, 2035, 2037, 2043,
     2055, 2057,  500, 2068, 2070, 2088,  509,  527, 2091, 2099,
     2116, 9075, 2118, 2135, 2138, 2142, 2144, 2179, 9075, 2193,
      699,  694,  688,  670, 2146,  525, 2193, 2195, 2203,  531,
      553, 2214, 2219, 2206, 2227, 2227, 2238, 2246, 2249, 2251,
     2273, 2275, 2278, 2296, 2293, 2304, 2316, 2322, 2324, 2327,
     2330, 2342, 2348, 2356, 2362, 2374, 2376, 2382,  538, 2387,
     2395, 2405,  560,  573, 2414, 2416, 2423, 2427, 2435, 2439,

     2447, 2459, 2462, 2465, 2473, 2477, 2485, 2491, 2496, 2504,
     2509, 2522, 2524, 2530, 2535, 2565, 9075, 2579,  671,  645,
        0, 9075, 9075, 9075,    0,    0,    0, 9075, 1732,  590,
     2594, 2648, 1759, 1796, 2065, 1781, 1884, 2079, 2152, 2270,
     2181, 2350, 2319, 2533, 2567, 2598, 2605, 2587, 2564, 2625,
     2629, 2652, 2616, 2654, 2656, 2658, 2662, 2666, 2681, 2688,
     2690, 2699, 2708, 2714, 2710, 2717, 2722, 2719, 2728, 2737,
     2740, 2746, 2752, 2758, 2760, 2764, 2766, 2773, 2778, 2784,
     2786, 2793, 2796, 2799, 2806, 2818, 2820, 2829, 2831, 2833,
     2839, 2853, 2857, 2859, 2861, 2863, 2865, 2871, 2886, 2889,

     2893, 2895, 2898, 2904, 2907, 2913, 2916, 2919, 2926, 2937,
     2945, 2941, 2948, 2951, 2955, 2960, 2963, 2973, 2985, 2987,
     2991, 2993, 2997, 2999, 3017, 3019, 3022, 3030,  614, 3068,
     3122, 3045, 3071, 3041, 3049,  887, 3082, 3086, 3109, 3094,
     3119, 3146, 3154, 3157, 3165, 3169, 3188, 3191, 3196, 3199,
     3202, 3210, 3223, 3231, 3235, 3237, 3243, 3249, 3255, 3263,
     3274, 3276, 3282, 3287, 3300, 3305, 3313, 3319, 3327, 3332,
     3338, 3350, 3358,  668, 3395, 3449,  620,  577, 3361, 3364,
      577,  558,  542,  532, 3376,  678, 3503, 3557, 3382, 3406,
     3409, 3417, 3421, 3453, 3468, 3471, 3473, 3506, 3525, 3517,

     3514, 3561, 3575, 3528, 3581, 3579, 3599, 3607, 3610, 3618,
     3622,  687, 3648, 3702, 3651, 3748, 3659, 3662, 3689, 3683,
     3716, 3721, 3724, 3735, 3756,  539,  509,  717,  622,    0,
      465, 3796, 3819,  364, 3873, 3027, 3143, 3431, 3074, 3104,
     3241, 3550, 3356, 3695, 3710, 3538, 3403, 3759, 3628, 3786,
     3656, 3790, 3799, 3801, 3812, 3822, 3388, 3826, 3831, 3840,
     3833, 3860, 3866, 3884, 3879, 3891, 3887, 3893, 3899, 3911,
     3913, 3919, 3921, 3923, 3933, 3941, 3943, 3945, 3952, 3963,
     3954, 3966, 3973, 3975, 3984, 3986, 3993, 3995, 3998, 4006,
     4008, 4016, 4018, 4026, 4028, 4036, 4041, 4047, 4049, 4054,

     4059, 4068, 4072, 4074, 4078, 4081, 4083, 4086, 4093, 4111,
     4105, 4115, 4118, 4120, 4124, 4138, 4143, 4145, 4147, 4151,
     4157, 4165, 4172, 4175, 4178,  729,  641,  442, 4204,  440,
     4227,  448, 4281, 4200, 4214, 4208, 4238, 4241, 4249, 4252,
     4263, 4285, 4303, 4288, 4307, 4311, 4329, 4332, 4334, 4337,
     4355, 4357, 4360, 4363, 4368, 4382, 4388, 4393, 4396, 4407,
     4415, 4421, 4426, 4434, 4440, 4445, 4458, 4469, 4471, 4477,
     4482, 4495, 4497, 4509, 4520, 4501,  768,  650,  438, 4540,
      423, 4563,  593, 4617,  429,  423, 4543, 4545,    0,  799,
      772,  398, 4589,  391, 4671,  722, 4725, 4594, 4583, 4620,

     4588, 4624, 4635, 4638, 4658, 4685, 4682, 4690, 4693, 4696,
     4728, 4736, 4747, 4750, 4758, 4771, 4773,  808,  813,  388,
     4801,  362, 4824,  846, 4878, 4791, 3440, 4804, 4806, 1297,
     4828, 4843, 4847, 4849, 4881, 4889, 4892, 4903, 4924, 4944,
      966,    0, 4967, 4957,  332, 5021, 4973,  320, 5000, 4274,
     4911, 4531, 4556, 4817, 4705, 4402, 4505, 4768, 4884, 4947,
     4929, 4973, 4987, 5015, 5025, 4786, 4985, 5027, 5029, 5047,
     5052, 5054, 5060, 5057, 5067, 5079, 5085, 5087, 5090, 5093,
     5108, 5112, 5115, 5117, 5119, 5121, 5123, 5141, 5145, 5148,
     5150, 5152, 5154, 5159, 5173, 5178, 5180, 5182, 5184, 5191,

     5202, 5205, 5209, 5212, 5215, 5217, 5224, 5235, 5238, 5242,
     5247, 5249, 5253, 5271, 5274, 5276, 5279, 5281, 5283, 5285,
     5289, 5294, 5303, 5332, 1254, 5355, 5344,    0,  313, 5409,
     5362, 5463, 5381, 5386, 5380, 5413, 5416, 5421, 5427, 5435,
     5466, 5477, 5485, 5488, 5496, 5509, 5511, 5523, 5517, 5529,
     5535, 5537, 5548, 5560, 5563, 5574, 5582, 5586, 5568, 5594,
     5605, 5608, 5613, 5616, 5631, 5636, 5639, 5665, 2832, 5688,
     5677, 5742,  306, 5796, 5695, 5850, 5714, 5713, 5719, 5753,
     3316, 5904, 5768, 5958,  296, 6012, 5770, 6066, 5781, 5777,
     5800, 5819, 5853, 5822, 5861, 5873, 5884, 5886, 5907, 5915,

     5918, 5930, 5938, 5961, 5969, 5972, 5832, 5390, 6120, 6023,
     6174,  289, 6228, 5995, 6282, 6038, 6043, 5926, 6047, 6069,
     6077, 6080, 6088, 6101, 6123, 6149, 5564, 6101, 6336, 6159,
     6185, 5723, 5317, 5651, 5431, 6032, 5789, 5335, 5858, 5628,
     5940, 5445, 5964, 5831, 6075, 6184, 5682, 6186, 6155, 6188,
     5881, 6209, 6221, 6197, 6232, 6240, 6242, 6234, 6246, 6254,
     6276, 6285, 6288, 6290, 6303, 6308, 6317, 6313, 6323, 6345,
     6348, 6350, 6354, 6356, 6358, 6368, 6376, 6379, 6382, 6386,
     6388, 6390, 6397, 6400, 6411, 6418, 6422, 6424, 6450, 6467,
     6453, 6507, 6477, 6481, 6490, 6487, 6510, 6518, 6529, 6531,

     6533, 6537, 6555, 6558, 6561, 6563, 6566, 6587, 6589, 6601,
     6607, 6612, 6615, 6620, 6639, 6641, 6644, 6647, 6662, 6665,
     6667, 6693, 6702, 6703,    0, 6717, 6727, 6740, 6673, 6744,
     6757, 6752,    0, 6768, 6777, 6786, 6776, 6788, 6800, 6802,
     6808, 6813, 6826, 6837, 6839, 6851, 6857, 6865, 6871, 6898,
     6868, 6898,    0, 6909, 6922, 6932, 6921, 6932, 6934, 6945,
     6947, 6959, 6979, 6975, 6543, 6430, 6773, 6889, 6713, 6978,
     6981, 6811, 6984, 6986, 6988, 6990, 6992, 7011, 7014, 7017,
     7021, 7024, 7035, 7039, 7043, 7045, 7047, 7053, 7065, 7067,
     7071, 7075, 7077, 7079, 7085, 7097, 7099, 7107, 7109, 7111,

     7117, 7119, 7122, 7148, 7163, 7152, 7160, 7163, 7165, 7171,
     7183, 7194, 7196, 7208, 7214, 7220, 7226, 7234, 7240, 7245,
     7248, 7253, 7268, 7271, 7279, 7282, 7308, 7299, 7325, 7334,
     7324, 7330, 7335, 7338, 7343, 7356, 7362, 7364, 7368, 7386,
     7388, 7399, 7414, 7411, 7415, 7419, 7433, 7437, 7206, 7439,
     7441, 7175, 7443, 7447, 7451, 7465, 7474, 7476, 7479, 7483,
     7485, 7488, 7494, 7497, 7503, 7507, 7512, 7516, 7518, 7521,
     7530, 7539, 7544, 7550, 7552, 7564, 7570, 7585, 7583, 7588,
     7596, 7608, 7610, 7616, 7622, 7628, 7630, 7636, 7648, 7650,
     7654, 7656, 7668, 7674, 7676, 7687, 7689, 7701, 7709, 7712,

     7715, 7723, 7727, 7734, 7737, 7741, 7748, 7752, 7755, 7759,
     7762, 7766, 7770, 7773, 7784, 7788, 7791, 7794, 7796, 7799,
     7817, 7820, 7823, 7825, 7846, 7848, 7850, 7871, 7873, 7875,
     7893, 7899, 7901, 7919, 7925, 7904, 7927, 7828, 7923, 7933,
     7879, 7881, 7948, 7951, 7959, 7971, 7974, 7977, 7979, 7982,
     8000, 8002, 8004, 8025, 8027, 7937, 8023, 8029, 8048, 8050,
     8052, 8056, 8058, 8070, 8076, 8078, 9075, 8116, 8127, 8138,
     8149, 8160, 8167, 8177, 8184, 8194, 8201, 8211, 8218, 8228,
     8235, 8245, 8256, 8267, 8278, 8288, 8294, 8301, 8308, 8315,
     8322, 8332, 8343, 8353, 8364, 8374, 8385, 8396, 8406, 8417,

     8427, 8438, 8449, 8460, 8471, 8482, 8493, 8504, 8515, 8526,
     8537, 8548, 8559, 8570, 8581, 8592, 8603, 8614, 8625, 8636,
     8647, 8658, 8669, 8680, 8691, 8698, 8709, 8720, 8731, 8742,
     8753, 8764, 8771, 8782, 8793, 8804, 8815, 8826, 8837, 8844,
     8855, 8866, 8877, 8888, 8899, 8910, 8917, 8928, 8939, 8950,
     8961, 8972, 8979, 8990, 9001, 9012, 9023, 9030, 9041, 9052,
     9063
    } ;

static const flex_int16_t yy_def[1462] =
    {   0,
     1367,    1, 1367,    3, 1367,    5, 1368, 1368, 1367,    9,
     1367,   11,   11,   13, 1369, 1369, 1370, 1370, 1371, 1371,
     1372, 1372, 1367, 1367, 1367, 1367, 1367, 1373, 1374, 1367,
     1373, 1367, 1373, 1373, 1373, 1373, 1373, 1367, 1373, 1373,
     1373, 1373, 1373,   41, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373,   41, 1373, 1373, 1373, 1373, 1373,
     1375, 1376, 1367, 1375, 1375, 1375, 1375, 1375, 1375, 1367,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375,   77, 1375, 1375, 1375, 1375, 1377, 1378,
     1367, 1377, 1377, 1377, 1377, 1377, 1377, 1367, 1377, 1377,

     1377, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1379,
     1380, 1367, 1367, 1379, 1367, 1379, 1379, 1379, 1379, 1367,
     1367, 1379, 1367, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1367, 1367, 1381, 1382,
     1381, 1381, 1381, 1381, 1367, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1367, 1367, 1367, 1367,
     1383, 1367, 1367, 1367, 1367, 1384, 1367, 1367, 1385, 1367,
     1367, 1386, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1373, 1374, 1373, 1387, 1374, 1374, 1373, 1373, 1373, 1367,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1375, 1376, 1375, 1375, 1388, 1376,
     1376, 1375, 1375, 1375, 1375, 1375, 1375, 1367, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375,   77, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1377, 1378, 1377, 1377, 1389, 1378, 1378, 1377, 1377,
     1367, 1367, 1377, 1367, 1377, 1377, 1377, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1379, 1380, 1379, 1379, 1390, 1380,
     1380, 1379, 1379, 1379, 1379, 1367, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1381, 1382, 1381,
     1381, 1391, 1382, 1382, 1381, 1381, 1367, 1381, 1381, 1381,

     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1367, 1367, 1367, 1367, 1367,
     1383, 1367, 1367, 1367, 1384, 1385, 1386, 1367, 1373, 1392,
     1393, 1393, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1375, 1394, 1395,
     1395, 1375, 1375, 1375, 1375,   77, 1375, 1375, 1375, 1375,
       77, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1377, 1396, 1397, 1397, 1367, 1367, 1377, 1377,
     1367, 1367, 1398, 1398, 1379, 1399, 1400, 1400, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1381, 1401, 1402, 1402, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1367, 1367, 1392, 1392, 1398,
      432, 1403, 1404,  432, 1405, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1394, 1394,  531, 1406,  531,
     1407,  531, 1408, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1396, 1396,  576, 1409,
      576, 1410,  576, 1411, 1367, 1367, 1377, 1377, 1412, 1399,
     1399,  588, 1413,  588, 1414,  588, 1415, 1379, 1379, 1379,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1401, 1401,  614,
     1416,  614, 1417,  614, 1418, 1381,  616, 1381, 1381,  616,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1403,
     1403, 1412, 1404, 1419,  843, 1420, 1398,  432, 1421, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1406, 1406, 1407, 1422,  926,  926, 1423,
     1398, 1424, 1425, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1428,
     1429, 1428,  972, 1430, 1398, 1431, 1432, 1433, 1433, 1434,
     1434, 1435, 1436, 1435,  984, 1437, 1398, 1438, 1439, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,

     1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441, 1442, 1443,
     1442, 1011, 1444, 1398, 1445, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1448, 1448, 1449, 1450, 1451,
     1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1449, 1455, 1456, 1457, 1457, 1458, 1458, 1458, 1458, 1458,

     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1429, 1429, 1449,  972, 1459, 1432, 1432, 1433, 1436,
     1436, 1449,  984, 1460, 1439, 1439, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1443,
     1443, 1449, 1011, 1461, 1446, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1451, 1451, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,

     1453, 1453, 1453, 1456, 1456, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1460, 1460,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1461, 1461, 1447, 1447, 1447, 1447, 1447, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1447, 1447,

     1447, 1447, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1447, 1447, 1453, 1453, 1453,
     1453, 1453, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1440, 1440, 1440, 1440, 1440, 1453, 1453, 1458, 1458, 1458,
     1458, 1440, 1453, 1458, 1440, 1458,    0, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367
    } ;

static const flex_int16_t yy_nxt[9132] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   30,   30,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   99,   89,  100,   89,   89,  101,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  102,  102,   89,   89,  104,  105,
      106,  107,  104,  104,  170,  180,  170,  170,  108,  180,
      180,  109,  104,  105,  106,  107,  104,  104,  170,  180,
      170,  170,  108,  180,  180,  109,   24,   25,   26,   24,

       27,   25,   25,  110,  111,  112,  113,  114,  110,  115,
      116,  117,  110,  110,  118,  119,  110,  120,  110,  121,
      122,  123,  124,  110,  125,  126,  110,  127,  128,  110,
      129,  110,  110,  130,  131,  110,  132,  133,  110,  134,
      135,  136,  110,  110,  110,  110,  110,  110,  137,  137,
      110,  110,  138,   25,   26,   24,   27,   25,   25,  139,
      140,  138,  138,  141,  139,  138,  142,  143,  139,  139,
      139,  139,  139,  138,  139,  138,  144,  145,  139,  139,
      146,  139,  147,  139,  139,  139,  148,  149,  139,  139,
      150,  139,  151,  152,  139,  153,  154,  139,  155,  156,

      139,  139,  139,  139,  138,  138,  139,  139,  157,  158,
      159,  160,  157,  157, 1152,  162,  163,  182,  163,  162,
      162, 1132,  164,  162,  163,  181,  163,  162,  162,  275,
      164, 1124,  332,  183,  184,  139,  165,  139, 1091,  186,
      631,  139,  139,  281,  165,  139,  338,  139,  139,  182,
      139,  139,  187,  139,  139,  167,  168, 1028,  168,  167,
      167,  168,  167,  168,  167,  183,  184,  167,  171,  182,
      173,  171,  174,  171,  355,  188,  171,  175,  176,  182,
      388,  182,  820,  182,  631,  183,  184,  182,  361,  847,
      177,  189,  189,  182,  394,  183,  184,  183,  184,  183,

      184,  183,  183,  183,  190,  183, 1367,  185,  820,  183,
      184,  792,  191,  183,  192,  183, 1367,  280,  792,  182,
      178,  179,  193,  171,  171,  182,  173,  171,  174,  171,
      194,  182,  171,  175,  176,  183,  184,  342,  181,  182,
      342,  183,  184,  779,  183,  183,  177,  183,  184,  182,
      181,  195,  186,  204,  196,  183,  184,  197,  779,  219,
      728,  220,  728,  205,  186,  183,  184,  206,  728,  207,
      422,  182,  423,  931,  221,  182,  178,  179,  182,  171,
      182,  208,  182,  209,  210,  631,  424,  183,  184,  275,
      211,  183,  184,  275,  183,  184,  183,  184,  183,  184,

      225,  198,  222,  281,  224,  199,  223,  281,  332,  200,
      201,  226,  202,  248,  227,  203,  181,  332,  228,  182,
      181,  212,  338,  417,  213,  214,  182,  215, 1367,  337,
      216,  338,  217,  355,  218,  183,  184,  229,  230,  355,
      182,  231,  183,  184,  234,  232,  388,  361,  235,  182,
      417,  233,  789,  361, 1367,  360,  183,  184,  236,  238,
      394,  182,  789,  239,  237,  183,  184,  243,  388,  182,
      240,  241,  349,  242, 1367,  393,  182,  183,  184,  249,
      182,  244,  394,  250,  245,  183,  184,  246,  349,  247,
      251,  786,  183,  184,  271,  272,  183,  184,  429,  252,

      253,  254,  262,  182,  255,  263,  264,  266,  256,  257,
      182,  258,  629,  779,  259,  265,  260,  261,  975,  183,
      184,  267,  528, 1367,  628,  268,  183,  184,  276,  269,
      276,  785,  276,  282,  273,  277,  727,  277,  182,  277,
      274,  270, 1367,  726,  278,  279,  278,  279,  278,  279,
      276, 1367,  777,  276,  183,  190,  283,  277,  276,  627,
      277,  276,  284,  285,  286,  277,  278,  279,  277,  278,
      279,  428,  428,  287,  278,  288,  573,  278,  279,  278,
      278,  276,  626,  278,  584,  276,  585,  276,  277,  276,
      778,  278,  277,  278,  277,  611,  277,  278,  279,  583,

      791,  278,  279,  278,  279,  278,  279,  304,  582,  819,
      581,  298,  354,  276,  428,  428,  182,  289,  299,  276,
      277,  300,  278,  278,  276,  429,  277,  276,  301,  278,
      279,  277,  183,  184,  277,  278,  279,  528,  310,  629,
      278,  279,  792,  278,  279,  302,  290,  987,  303,  353,
      276,  727, 1367,  291,  292,  434,  293,  277,  294,  295,
      296,  297,  276,  329,  276, 1367,  278,  279,  311,  277,
      276,  277,  312, 1367,  790, 1367,  573,  277,  278,  279,
      278,  279,  330,  305,  276,  306,  278,  279,  276,  313,
      778,  277,  314,  307,  182,  277,  182,  431,  308,  309,

      278,  279,  276,  316,  278,  279,  315,  585, 1367,  277,
      183,  184,  183,  184, 1367,  818,  611,  317,  278,  279,
      318,  791,  322,  319,  275, 1367, 1367,  182,  320,  276,
      819,  321,  275,  323,  324, 1367,  277,  275,  325,  326,
      276, 1367,  333,  183,  184,  278,  279,  277,  333,  334,
     1367,  327,  331,  182,  340,  334,  278,  279,  335,  336,
      333,  328, 1367,  339,  335,  336,  820,  334, 1367,  183,
      184, 1014,  182, 1367,  438, 1367,  335,  336,  341,  342,
      341,  341,  341,  341, 1367,  333, 1367,  333,  183,  184,
      333, 1367,  334,  333,  334,  343,  343,  334,  440, 1367,

      334,  335,  336,  335,  336, 1367,  335,  336, 1367,  335,
      344,  335,  335,  333, 1367,  335,  275,  333,  737, 1367,
      334,  333, 1367,  335,  334,  335,  275, 1367,  334,  335,
      336,  738,  275,  335,  336,  345, 1367,  335,  336, 1367,
     1367,  182, 1367,  346, 1367, 1367,  348,  349,  350,  350,
      348,  348,  347, 1367,  335,  335,  351,  183,  184,  352,
      350,  349,  350,  350,  350,  350,  630, 1367,  185,  630,
      351,  452,  185,  352,  350,  349,  350,  350,  350,  350,
     1367,  356, 1367,  356,  351,  356,  362,  352,  357,  356,
      357,  363,  357, 1367, 1367, 1367,  357,  358,  359,  358,

      359,  358,  359,  356, 1367,  358,  359,  182, 1367,  356,
      357,  356, 1367,  432,  364,  356,  357, 1367,  357,  358,
      359,  365,  357,  183,  184,  358,  359,  358,  366,  358,
      358,  358,  359,  358, 1367, 1367, 1367,  356, 1367,  356,
     1367,  358,  356,  358,  357,  356,  357,  182, 1367,  357,
      356,  367,  357,  358,  359,  358,  359,  357,  358,  359,
      373,  358,  359,  183,  184,  370,  358,  359,  356,  368,
      453,  356,  358,  358,  369,  357,  356,  371,  357,  356,
      372, 1367,  387,  357,  358,  359,  357,  358,  359,  374,
      381,  375,  358,  359,  377,  358,  359,  356,  378, 1367,

      356,  379,  356, 1367,  357,  376,  182,  357,  182,  357,
     1367, 1367, 1367,  358,  359,  380,  358,  359,  358,  359,
      389, 1367,  183,  184,  183,  184,  384,  390,  439,  382,
     1367,  389,  383, 1367,  395,  385,  391,  392,  390,  386,
      433, 1367, 1367,  389, 1367,  389, 1367,  391,  392,  396,
      390,  389,  390, 1367, 1367, 1367,  389, 1367,  390,  391,
      392,  391,  392,  390,  389,  391,  391,  391,  397,  391,
     1367,  390,  391,  392, 1367,  389, 1367,  391, 1367,  391,
      391,  392,  390, 1367,  182, 1367,  389,  404, 1367, 1367,
      401,  391,  392,  390,  407,  406, 1367,  405, 1367,  389,

      183,  184,  391,  392,  389,  401,  390,  389,  391,  391,
      389,  390,  389,  458,  390,  391,  392,  390, 1367,  390,
      391,  392,  408,  391,  392, 1367,  391,  392,  391,  392,
      415,  389,  398, 1367,  410, 1367,  401,  409,  390,  399,
      400, 1367,  389, 1367,  401,  402,  403,  391,  392,  390,
      182, 1367,  401, 1367,  630, 1367,  280,  630,  391,  392,
      280, 1367, 1367,  411, 1367,  182,  183,  184,  412,  413,
      416,  417,  418,  418,  416,  416,  435, 1367,  414,  436,
      419,  183,  184,  420,  418,  417,  418,  418,  418,  418,
      263,  430,  183,  183,  419, 1367,  183,  420,  418,  417,

      418,  418,  418,  418,  183,  182,  183,  182,  419,  182,
     1367,  420, 1367,  189,  189,  183,  183,  182, 1367,  183,
     1367,  183,  184,  183,  184,  183,  184,  183,  388,  183,
      182,  441,  182,  183,  184,  183,  183,  388,  182,  442,
      182,  388, 1019, 1367,  437, 1367,  183,  184,  183,  184,
      182,  443, 1367, 1367,  183,  184,  183,  184,  183,  183,
      448,  444,  445,  446,  182, 1367,  183,  184,  182,  449,
      447,  182, 1367, 1367, 1367,  451,  182, 1367, 1367,  182,
      183,  184,  182, 1367,  183,  184,  450,  183,  184,  182,
      455,  456,  183,  184,  459,  183,  184,  182,  183,  184,

      454, 1367, 1367,  182,  463,  183,  184, 1367,  457,  182,
     1367,  460,  182,  183,  184, 1367,  182, 1367,  461,  183,
      184,  182, 1367,  182,  462,  183,  184,  182,  183,  184,
      466,  182,  183,  184, 1367,  464,  467,  183,  184,  183,
      184,  182, 1367,  183,  184,  182,  465,  183,  184,  182,
      470,  182, 1367,  182,  469,  182,  468,  183,  184,  471,
      182,  183,  184,  182, 1367,  183,  184,  183,  184,  183,
      184,  183,  184,  472,  182, 1367,  183,  184,  182,  183,
      184,  477, 1367,  475, 1367,  182,  473,  474, 1367,  182,
      183,  184,  182, 1367,  183,  184,  476, 1367,  478, 1367,

     1367,  183,  184,  182, 1367,  183,  184, 1367,  183,  184,
     1367,  182, 1367,  480,  479,  481,  263,  182, 1367,  183,
      184,  182, 1367,  182,  483,  182,  482,  183,  184,  182,
     1367,  182, 1367,  183,  184, 1367, 1367,  183,  184,  183,
      184,  183,  184,  182, 1367,  183,  184,  183,  184,  488,
      182, 1367,  491,  484,  182,  489,  485,  182,  486,  183,
      184,  490,  487,  182, 1367,  182,  183,  184,  182,  492,
      183,  184, 1367,  183,  184,  494, 1367, 1367, 1367,  183,
      184,  183,  184, 1367,  183,  184,  499,  493,  182, 1367,
      495,  182, 1367,  496,  497,  182, 1367, 1367,  182,  498,

      504,  500,  182, 1367,  183,  184,  501,  183,  184, 1367,
     1367,  183,  184,  182,  183,  184, 1367,  502,  183,  184,
      182, 1367, 1367,  505,  509,  503,  182,  506,  182,  183,
      184,  510,  507,  508, 1367,  511,  183,  184,  263,  513,
      182, 1367,  183,  184,  183,  184, 1367,  182,  512, 1367,
      514,  182, 1367, 1367, 1367,  182,  183,  184,  182, 1367,
     1367, 1367,  515,  183,  184,  517,  182,  183,  184,  182,
      516,  183,  184, 1367,  183,  184, 1367,  518,  182, 1367,
      182, 1367,  183,  184,  522,  183,  184,  182,  521, 1367,
      519,  523,  182,  520,  183,  184,  183,  184,  526,  276,

     1367,  524, 1367,  183,  184,  527,  277,  276,  183,  184,
     1367,  276, 1367, 1367,  277,  278,  279,  525,  277, 1367,
      529,  278,  278,  278,  279,  278, 1367,  278,  288,  276,
     1367,  276,  530,  278,  276,  278,  277,  531,  277, 1367,
      182,  277,  276, 1367, 1367,  278,  279,  278,  279,  277,
      278,  279, 1367,  276, 1367,  276,  183,  184,  278,  279,
      277, 1367,  277, 1367,  278,  278, 1367,  182, 1367,  278,
      279,  278,  279,  278,  278,  276, 1367,  278, 1367,  276,
     1367,  276,  277,  183,  184,  278,  277,  278,  277,  182,
     1367,  278,  279,  276, 1367,  278,  279,  278,  279,  533,

      277, 1367,  636, 1367,  182,  183,  184,  276, 1367,  278,
      279,  532,  534,  294,  277,  276,  278,  278,  276, 1367,
      183,  184,  277,  278,  279,  277,  276, 1367, 1367,  276,
      637,  278,  279,  277,  278,  279,  277,  535,  536, 1367,
     1367, 1367,  278,  279,  276,  278,  279,  537,  276, 1367,
      538,  277, 1367, 1367, 1367,  277,  276, 1367,  539,  276,
      278,  279, 1367,  277,  278,  279,  277,  276, 1367,  541,
     1367,  276,  278,  279,  277,  278,  279, 1367,  277, 1367,
     1367,  540,  276,  278,  279, 1367, 1367,  278,  279,  277,
      276, 1367,  182, 1367,  276, 1367,  542,  277,  278,  279,

      546,  277,  543,  544,  547,  276,  278,  279,  183,  184,
      278,  279,  277,  276, 1367, 1367,  548,  276, 1367,  545,
      277,  278,  279, 1367,  277,  549, 1367,  639,  276,  278,
      279,  276, 1367,  278,  279,  277,  276, 1367,  277,  550,
     1367, 1367, 1367,  277,  278,  279, 1367,  278,  279,  276,
      552, 1367,  278,  279, 1367, 1367,  277,  276, 1367,  554,
      551,  275,  276,  275,  277,  278,  279, 1367,  553,  277,
      555,  275, 1367,  278,  279,  276,  556,  557,  278,  279,
      276,  558,  277,  276, 1367, 1367,  560,  277, 1367,  559,
      277,  278,  279, 1367,  276, 1367,  278,  279, 1367,  278,

      279,  277, 1367, 1367,  562,  563,  276, 1367, 1367, 1367,
      278,  279,  276,  277,  276,  564,  561,  276,  565,  277,
      276,  277,  278,  279,  277,  276, 1367,  277,  278,  279,
      278,  279,  277,  278,  279, 1367,  278,  279, 1367,  567,
      276,  278,  279,  276,  569,  276, 1367,  277, 1367,  566,
      277,  276,  277, 1367, 1367,  568,  278,  279,  277,  278,
      279,  278,  279,  276, 1367,  333, 1367,  278,  279, 1367,
      277,  571,  334,  182, 1367,  570,  333, 1367,  333,  278,
      279,  335,  336,  334, 1367,  334,  572,  182, 1367,  183,
      184,  638,  335,  336,  335,  344,  574,  335,  335,  333,

     1367,  335,  575,  183,  184, 1367,  334,  333, 1367,  335,
     1367,  335, 1367,  576,  334,  335,  336,  341,  342,  341,
      341,  341,  341,  335,  336, 1367,  333,  577, 1367,  640,
      578, 1367, 1367,  334,  343,  343, 1367, 1367, 1367, 1367,
      335,  335,  335,  336,  335,  335,  333, 1367,  335, 1367,
      333, 1367,  333,  334,  356, 1367,  335,  334,  335,  334,
      182,  357,  335,  336, 1367, 1367,  335,  336,  335,  336,
      358,  359, 1367, 1367, 1367,  579,  183,  184,  641,  580,
      348,  349,  350,  350,  348,  348, 1367,  335,  335,  182,
      351, 1367, 1367,  352,  350,  349,  350,  350,  350,  350,

     1367,  356, 1367,  356,  351,  183,  184,  352,  357,  643,
      357,  586,  358,  358,  356, 1367,  358,  358,  359,  358,
      366,  357,  356, 1367,  358,  587,  358,  356, 1367,  357,
      358,  359, 1367,  588,  357,  356,  358,  358,  358,  359,
      358, 1367,  357,  358,  359, 1367,  356, 1367,  358, 1367,
      358,  358,  359,  357,  356,  358,  358,  356, 1367,  356,
     1367,  357,  358,  359,  357, 1367,  357, 1367, 1367, 1367,
      358,  359, 1367,  358,  359,  358,  359, 1367,  182,  358,
      358,  356,  589,  356,  590,  591,  356, 1367,  357,  592,
      357, 1367, 1367,  357,  183,  184,  593,  358,  359,  358,

      359,  356,  358,  359,  356, 1367, 1367,  642,  357, 1367,
     1367,  357,  356, 1367,  597,  595,  594,  358,  359,  357,
      358,  359, 1367,  596,  356, 1367,  598,  182,  358,  359,
      356,  357,  356, 1367,  599,  356, 1367,  357,  356,  357,
      358,  359,  357,  183,  184,  357,  358,  359,  358,  359,
      356,  358,  359,  601,  358,  359,  356,  357,  182,  597,
     1367,  600,  602,  357,  356,  605,  358,  359,  603,  604,
      356,  357,  358,  359,  183,  184,  644,  357,  607,  606,
      358,  359,  356, 1367,  356, 1367,  358,  359,  608,  357,
      389,  357,  609, 1367, 1367,  389, 1367,  390,  358,  359,

      358,  359,  390,  389, 1367, 1367,  391,  392, 1367, 1367,
      390,  391,  392,  612,  391,  391, 1367,  610,  391,  391,
      397, 1367,  389, 1367,  389,  613,  391, 1367,  391,  390,
      614,  390,  391,  391, 1367,  389,  391, 1367,  391,  392,
      391,  392,  390,  389,  391, 1367,  391,  389, 1367, 1367,
      390,  391,  392, 1367,  390,  389, 1367,  391,  391,  391,
      392,  615,  390,  391,  392, 1367,  401,  389, 1367,  401,
      389,  391,  392,  389,  390,  391,  391,  390, 1367, 1367,
      390,  389, 1367,  391,  392,  389,  391,  392,  390,  391,
      392,  401,  390,  389,  616, 1367,  401,  391,  392,  389,

      390,  391,  392, 1367,  389,  618,  390, 1367, 1367,  391,
      392,  390,  389, 1367, 1367,  391,  392,  389,  617,  390,
      391,  392, 1367,  619,  390,  401, 1367, 1367,  391,  392,
      389, 1367,  389,  391,  392, 1367, 1367,  390,  389,  390,
      401,  182, 1367,  389,  620,  390,  391,  392,  391,  392,
      390,  623,  621, 1367,  391,  392, 1367,  183,  184,  391,
      392, 1367, 1367, 1367,  624,  622,  416,  417,  418,  418,
      416,  416,  182,  645, 1367,  182,  419, 1367,  625,  420,
      418,  417,  418,  418,  418,  418, 1367, 1367,  183,  184,
      419,  183,  184,  420,  630,  182, 1367,  630, 1367, 1367,

     1367, 1367,  632,  630,  630,  646,  182,  630,  647, 1367,
      654,  183,  184,  182,  633,  630,  653,  630,  634,  635,
     1367, 1367,  183,  184,  182, 1367,  648,  649, 1367,  183,
      184, 1367, 1367,  182, 1367, 1367, 1367,  182, 1367, 1367,
      183,  184,  650,  651,  652, 1367,  630,  630,  630,  183,
      184,  630, 1367,  183,  184,  655,  632,  630,  630,  656,
      182,  630,  182, 1367,  182, 1367,  182, 1367,  633,  630,
      182,  630,  634,  635,  182, 1367,  183,  184,  183,  184,
      183,  184,  183,  184, 1367, 1367,  183,  184, 1367,  182,
      183,  184,  660,  657, 1367,  659,  182, 1367,  182, 1367,

      630,  630, 1367, 1367,  658,  183,  184,  182, 1367, 1367,
     1367,  661,  183,  184,  183,  184,  182,  263,  182,  663,
     1367, 1367,  182,  183,  184,  182,  662,  182,  666, 1367,
      182, 1367,  183,  184,  183,  184,  182,  664,  183,  184,
     1367,  183,  184,  183,  184,  182,  183,  184,  182,  669,
     1367, 1367,  183,  184,  182, 1367,  665,  670,  667,  668,
      182,  183,  184, 1367,  183,  184,  182,  671,  182,  672,
      183,  184,  182, 1367,  182, 1367,  183,  184, 1367, 1367,
      674,  182,  183,  184,  183,  184,  182,  673,  183,  184,
      183,  184,  182, 1367,  182,  676, 1367,  183,  184, 1367,

      675,  182,  183,  184,  182, 1367, 1367,  182,  183,  184,
      183,  184,  677,  681,  182,  679,  678,  183,  184, 1367,
      183,  184,  680,  183,  184,  682,  182, 1367,  182, 1367,
      183,  184,  630, 1367,  337,  630,  683,  182,  337,  182,
     1367,  182,  183,  184,  183,  184, 1367,  182, 1367,  686,
      684,  685, 1367,  183,  184,  183,  184,  183,  184, 1367,
     1367,  182,  688,  183,  184,  182,  690,  182,  687,  182,
     1367,  182, 1367,  182, 1367, 1367,  689,  183,  184,  182,
     1367,  183,  184,  183,  184,  183,  184,  183,  184,  183,
      184,  692, 1367,  695,  182,  183,  184,  182,  691, 1367,

     1367,  182, 1367,  182, 1367,  693,  182,  694,  696, 1367,
      183,  184,  182,  183,  184,  182,  697,  183,  184,  183,
      184,  182,  183,  184,  182,  699, 1367,  182,  183,  184,
      702,  183,  184,  701,  182, 1367,  698,  183,  184, 1367,
      183,  184,  263,  183,  184,  182, 1367, 1367, 1367,  182,
      183,  184,  700,  182, 1367,  704,  182, 1367, 1367,  182,
     1367,  183,  184,  182,  703,  183,  184,  708,  182,  183,
      184,  182,  183,  184,  705,  183,  184, 1367, 1367,  183,
      184,  182,  706, 1367,  183,  184,  707,  183,  184,  710,
      712,  714,  709,  182,  713,  182, 1367,  183,  184,  182,

      711,  182, 1367, 1367,  715,  182, 1367,  182, 1367,  183,
      184,  183,  184, 1367,  718,  183,  184,  183,  184,  716,
     1367,  183,  184,  183,  184,  182, 1367,  182, 1367,  717,
      182, 1367,  720, 1367, 1367,  182,  722, 1367,  276,  719,
      721,  183,  184,  183,  184,  277,  183,  184, 1367,  276,
      723,  183,  184,  276,  278,  279,  277,  276,  724, 1367,
      277, 1367, 1367, 1367,  277,  278,  279,  725,  630,  278,
      279,  630,  850,  278,  279, 1367,  729,  630,  630,  276,
     1367,  630,  182,  730, 1367,  734,  277,  736,  731,  630,
      276,  630,  732,  733,  276,  278,  279,  277,  183,  184,

     1367,  277,  276, 1367, 1367, 1367,  278,  279,  853,  277,
      278,  279,  182, 1367, 1367,  735, 1367,  276,  278,  279,
      630,  630,  630, 1367,  277,  630, 1367, 1367,  183,  184,
      729,  630,  630,  278,  279,  630, 1367,  730, 1367,  740,
     1367, 1367,  731,  630, 1367,  630,  732,  733,  275, 1367,
      741,  182,  739, 1367,  276, 1367, 1367,  551,  275,  742,
     1367,  277,  276,  743,  744,  276,  745,  183,  184,  277,
      278,  279,  277,  276,  630,  630,  746,  276,  278,  279,
      277,  278,  279, 1367,  277, 1367, 1367,  851, 1367,  278,
      279, 1367,  747,  278,  279,  748,  276, 1367,  750,  276,

     1367, 1367,  751,  277,  276, 1367,  277,  276,  749, 1367,
      276,  277,  278,  279,  277,  278,  279,  277,  276, 1367,
      278,  279, 1367,  278,  279,  277,  278,  279, 1367,  752,
      753,  276, 1367,  754,  278,  279, 1367, 1367,  277,  276,
      756, 1367,  755,  276, 1367,  276,  277,  278,  279,  182,
      277,  276,  277,  757, 1367,  278,  279,  276,  277,  278,
      279,  278,  279,  276,  277,  183,  184,  278,  279,  761,
      277,  276, 1367,  278,  279,  759,  758,  854,  277,  278,
      279,  760,  276, 1367,  276,  763, 1367,  278,  279,  277,
      276,  277, 1367,  762, 1367,  276,  764,  277,  278,  279,

      278,  279,  277, 1367, 1367, 1367,  278,  279,  276, 1367,
      766,  278,  279,  276, 1367,  277,  630, 1367,  360,  630,
      277,  276,  360, 1367,  278,  279,  765,  276,  277,  278,
      279, 1367,  767,  768,  277,  276, 1367,  278,  279, 1367,
      276,  770,  277,  278,  279,  771,  276,  277, 1367, 1367,
      769,  278,  279,  277, 1367,  772,  278,  279,  276, 1367,
     1367, 1367,  278,  279,  182,  277,  333, 1367, 1367,  333,
      774,  773,  333,  334,  278,  279,  334,  775, 1367,  334,
      183,  184,  335,  336,  356,  335,  336,  787,  335,  336,
      356,  357,  856, 1367,  776,  630,  182,  357,  630, 1367,

      358,  359, 1367,  780,  630,  630,  358,  359,  630,  788,
      781,  182,  183,  184,  356,  782,  630,  356,  630,  783,
      784,  357,  798, 1367,  357,  356, 1367,  183,  184,  356,
      358,  359,  357,  358,  359, 1367,  357,  860, 1367,  182,
      800,  358,  359,  861,  799,  358,  359,  630,  630,  630,
     1367, 1367,  630,  801, 1367,  183,  184,  780,  630,  630,
      597,  356,  630, 1367,  781, 1367,  802, 1367,  357,  782,
      630,  388,  630,  783,  784,  852,  356,  358,  359,  356,
      388,  356, 1367,  357,  388, 1018,  357,  388,  357, 1367,
     1367,  803,  358,  359, 1367,  358,  359,  358,  359, 1367,

     1367,  630,  630,  630,  805, 1367,  630, 1367, 1367, 1367,
     1367,  793,  630,  630,  356, 1367,  630, 1367,  794,  804,
     1367,  357,  356,  795,  630,  356,  630,  796,  797,  357,
      358,  359,  357,  356, 1367, 1367,  356, 1367,  358,  359,
      357,  358,  359,  357,  806,  807,  182,  809, 1367,  358,
      359, 1367,  358,  359,  811,  630,  630,  630,  182,  597,
      630, 1367,  183,  184,  859,  793,  630,  630,  808,  356,
      630, 1367,  794, 1367,  183,  184,  357,  795,  630, 1367,
      630,  796,  797,  356, 1367,  358,  359,  356, 1367,  356,
      357, 1367, 1367, 1367,  357,  855,  357, 1367, 1367,  358,

      359,  597, 1367,  358,  359,  358,  359,  356, 1367,  630,
      630,  812, 1367, 1367,  357,  356, 1367, 1367,  356,  810,
     1367, 1367,  357,  358,  359,  357,  356,  814, 1367,  813,
      389,  358,  359,  357,  358,  359,  182,  390,  816, 1367,
      815, 1367,  358,  359,  817, 1367,  391,  392,  630, 1367,
     1367,  630,  183,  184, 1367, 1367,  821,  630,  630,  389,
     1367,  630,  863,  822,  182, 1367,  390,  389,  823,  630,
      389,  630,  824,  825,  390,  391,  392,  390, 1367, 1367,
      183,  184, 1367,  391,  392, 1367,  391,  392, 1367,  832,
      865,  389, 1367, 1367, 1367,  826, 1367,  389,  390,  833,

      630,  630,  630,  182,  390,  630, 1367,  391,  392, 1367,
      821,  630,  630,  391,  392,  630, 1367,  822,  182,  183,
      184, 1367,  823,  630,  389,  630,  824,  825,  834,  389,
     1367,  390,  389,  401,  183,  184,  390, 1367,  857,  390,
      391,  392, 1367,  389, 1367,  391,  392,  836,  391,  392,
      390, 1367,  837,  858,  630,  630,  389, 1367, 1367,  391,
      392,  835, 1367,  390,  389, 1367, 1367,  182,  838, 1367,
     1367,  390,  391,  392,  839, 1367, 1367, 1367, 1367,  827,
      391,  392, 1367,  183,  184, 1367,  828, 1367,  829,  862,
     1367, 1367,  830,  831,  182,  828,  630,  185,  182,  630,

      401, 1367,  185, 1367,  631, 1367, 1367,  182, 1367,  182,
      183,  184, 1367, 1367,  183,  184, 1367, 1367,  841,  842,
      182, 1367,  842,  183,  184,  183,  184,  844,  842,  842,
      182,  864,  842,  868,  182,  866,  183,  184, 1367,  182,
      842,  182,  842,  845,  846,  867,  183,  184,  182,  869,
      183,  184, 1367, 1367, 1367,  183,  184,  183,  184, 1367,
     1367, 1367, 1367,  874,  183,  184, 1367, 1367,  182,  871,
      870,  842,  842,  630,  182, 1367,  630,  872, 1367,  873,
     1367,  849,  634,  634,  183,  184,  634,  182, 1367, 1367,
      183,  184,  182, 1367,  634,  182,  634,  630,  630,  182,

     1367,  182, 1367,  183,  184,  875, 1367,  182,  183,  184,
      876,  183,  184, 1367, 1367,  183,  184,  183,  184,  182,
      879,  182,  877,  183,  184,  634,  634,  182,  881,  182,
      878,  182, 1367, 1367, 1367,  183,  184,  183,  184,  880,
     1367,  182, 1367,  183,  184,  183,  184,  183,  184,  182,
      883,  182, 1367,  182, 1367,  882,  884,  183,  184, 1367,
      182, 1367,  182, 1367, 1367,  183,  184,  183,  184,  183,
      184,  182, 1367, 1367,  182,  885,  183,  184,  183,  184,
      886,  182, 1367,  182,  890,  887,  888,  183,  184,  889,
      183,  184,  182, 1367,  182, 1367, 1367,  183,  184,  183,

      184,  182, 1367,  182, 1367,  892,  182, 1367,  183,  184,
      183,  184,  891, 1367,  182, 1367,  182,  183,  184,  183,
      184, 1367,  183,  184,  182, 1367,  182, 1367,  895,  894,
      183,  184,  183,  184,  182,  896,  182, 1367,  893, 1367,
      183,  184,  183,  184,  182, 1367,  898, 1367, 1367,  182,
      183,  184,  183,  184,  900,  182,  897,  182, 1367, 1367,
      183,  184,  182, 1367,  899,  183,  184,  182, 1367, 1367,
      901,  183,  184,  183,  184,  902,  182,  903,  183,  184,
      182, 1367,  182,  183,  184,  498,  182, 1367,  904,  182,
     1367,  182,  183,  184,  182, 1367,  183,  184,  183,  184,

     1367,  182,  183,  184, 1367,  183,  184,  183,  184, 1367,
      183,  184,  905,  182, 1367, 1367,  906,  183,  184,  182,
      907,  908, 1367,  182, 1367,  909,  182, 1367,  182,  183,
      184,  910,  182, 1367, 1367,  183,  184,  912,  911,  183,
      184, 1367,  183,  184,  183,  184,  182, 1367,  183,  184,
      914,  182, 1367,  182, 1367,  182, 1367,  913, 1367,  182,
     1367, 1367,  183,  184,  916,  182, 1367,  183,  184,  183,
      184,  183,  184,  182,  915,  183,  184,  919, 1367, 1367,
      182,  183,  184,  182, 1367,  917,  182,  920, 1367,  183,
      184,  918, 1367, 1367, 1367,  921,  183,  184, 1367,  183,

      184,  922,  183,  184,  630,  280,  923,  630,  276, 1367,
      280, 1367,  728, 1367, 1367,  277,  276, 1367, 1367, 1367,
     1367, 1367,  276,  277,  278,  279,  925,  842,  934,  277,
      842, 1367,  278,  279, 1367,  927,  842,  842,  278,  279,
      842, 1367,  928, 1367, 1367, 1367,  276, 1367,  842,  276,
      842,  929,  930,  277,  936, 1367,  277,  276,  935, 1367,
      276, 1367,  278,  279,  277,  278,  279,  277, 1367, 1367,
     1367,  276,  937,  278,  279, 1367,  278,  279,  277,  842,
      842,  630,  182, 1367,  630, 1367,  938,  278,  279,  933,
      732,  732,  939,  276,  732, 1367,  276, 1367,  183,  184,

      277,  551,  732,  277,  732,  630,  630, 1367,  940,  278,
      279,  276,  278,  279, 1367,  276, 1367, 1367,  277,  276,
     1367,  551,  277,  551, 1367, 1367,  277,  278,  279, 1367,
     1367,  278,  279,  732,  732,  278,  279,  276, 1367, 1367,
      276,  551,  276, 1367,  277,  276, 1367,  277,  941,  277,
      942, 1367,  277,  278,  279,  943,  278,  279,  278,  279,
     1367,  278,  279,  276,  944,  276, 1367,  945,  276, 1367,
      277,  276,  277, 1367, 1367,  277,  276, 1367,  277,  278,
      279,  278,  279,  277,  278,  279, 1367,  278,  279, 1367,
      276, 1367,  278,  279,  950,  946,  276,  277,  947, 1367,

     1367,  276, 1367,  277,  276,  948,  278,  279,  277,  949,
      182,  277,  278,  279, 1367,  276, 1367,  278,  279,  951,
      278,  279,  277,  276, 1367, 1367,  183,  184, 1367,  276,
      277,  278,  279,  953,  276, 1367,  277,  952, 1367,  278,
      279,  277,  276, 1367,  954,  278,  279, 1367,  276,  277,
      278,  279, 1367,  276,  955,  277, 1367, 1367,  278,  279,
      277, 1367, 1367, 1367,  278,  279,  276, 1367, 1367,  278,
      279, 1367, 1367,  277,  956,  958, 1367,  276,  957,  276,
     1367, 1367,  278,  279,  277,  276,  277, 1367,  959, 1367,
      276, 1367,  277,  278,  279,  278,  279,  277, 1367, 1367,

     1367,  278,  279,  276, 1367,  276,  278,  279, 1367,  276,
      277,  962,  277,  182,  960,  961,  277,  276, 1367,  278,
      279,  278,  279,  966,  277,  278,  279,  963,  276,  183,
      184, 1367,  964,  278,  279,  277, 1367,  965, 1367,  182,
      630,  337, 1367,  630,  278,  279,  337, 1367,  779, 1367,
     1367,  333,  967,  333, 1367,  183,  184, 1367,  334, 1367,
      334, 1035,  969,  842,  182, 1367,  842,  335,  336,  335,
      336,  971,  842,  842, 1367,  979,  842, 1367,  972, 1367,
      183,  184, 1367, 1036,  842, 1367,  842,  973,  974,  630,
      360,  356,  630,  978, 1367,  360,  356,  792,  357, 1367,

     1367, 1367,  356,  357, 1367, 1367, 1367,  358,  359,  357,
     1367,  981,  358,  359, 1367,  842,  842,  630,  358,  359,
      630, 1367,  990, 1367, 1367,  977,  783,  783,  356,  991,
      783, 1367,  356,  993, 1367,  357, 1367, 1367,  783,  357,
      783,  630,  630,  356,  358,  359,  356, 1367,  358,  359,
      357, 1367, 1367,  357,  992, 1367, 1367, 1367, 1367,  358,
      359,  994,  358,  359,  597, 1367,  356, 1367,  995,  783,
      783,  842, 1367,  357,  842, 1367, 1367, 1367, 1367,  983,
      842,  842,  358,  359,  842, 1367,  984, 1367,  996, 1367,
      356, 1367,  842,  356,  842,  985,  986,  357,  356, 1367,

      357,  356, 1367, 1367,  356,  357,  358,  359,  357,  358,
      359,  357, 1367,  182,  358,  359,  999,  358,  359, 1367,
      358,  359, 1000,  842,  842,  630,  997,  998,  630,  183,
      184, 1367, 1367,  989,  796,  796,  356, 1367,  796, 1038,
     1367, 1367,  597,  357,  356, 1367,  796, 1367,  796,  630,
      630,  357,  358,  359, 1367,  356, 1367, 1001,  356, 1367,
      358,  359,  357, 1367, 1002,  357,  356, 1367, 1367, 1367,
     1367,  358,  359,  357,  358,  359,  182,  796,  796,  356,
     1004,  356,  358,  359, 1367, 1003,  357, 1367,  357, 1367,
     1367, 1367,  183,  184,  182,  358,  359,  358,  359,  389,

     1367,  630,  393,  597,  630, 1005,  390,  393, 1367,  820,
      183,  184,  389, 1367,  389,  391,  392, 1367, 1006,  390,
     1367,  390, 1367, 1008,  842,  182, 1367,  842,  391,  392,
      391,  392, 1010,  842,  842, 1017,  389,  842, 1367, 1011,
     1367,  183,  184,  390,  828,  842, 1037,  842, 1012, 1013,
     1367,  389,  391,  392, 1367,  389, 1367,  389,  390, 1367,
     1367,  828,  390, 1367,  390, 1367, 1367,  391,  392, 1367,
     1367,  391,  392,  391,  392, 1367,  842,  842,  630, 1022,
     1367,  630, 1020, 1367, 1367, 1367, 1016,  824,  824,  389,
     1367,  824,  182, 1021, 1367, 1367,  390,  389, 1367,  824,

      389,  824,  630,  630,  390,  391,  392,  390,  183,  184,
     1367,  389, 1367,  391,  392, 1367,  391,  392,  390,  182,
     1367, 1367, 1367, 1039, 1367,  401, 1367,  391,  392, 1024,
      824,  824,  389, 1367, 1023,  183,  184,  182, 1367,  390,
     1367, 1033, 1367, 1025,  630,  185, 1367,  630,  391,  392,
      185, 1034,  631,  183,  184,  182,  401,  842,  185, 1367,
      842, 1367, 1367,  185, 1367,  843,  841,  842, 1041, 1367,
      842,  183,  184, 1367, 1367,  844,  842,  842, 1367, 1027,
      842,  182,  634,  634, 1040, 1367,  634, 1367,  842, 1367,
      842,  845,  846,  182,  634,  182,  634,  183,  184, 1042,

      630,  628, 1367,  630, 1367, 1367,  628, 1367,  848,  183,
      184,  183,  184, 1046, 1367, 1367, 1367, 1367, 1367,  842,
      842,  842, 1032,  182,  842,  634,  634, 1367, 1367, 1030,
      845,  845, 1043,  182,  845,  182, 1367,  182, 1367,  183,
      184, 1044,  845, 1367,  845,  842,  842, 1367, 1367,  183,
      184,  183,  184,  183,  184,  182, 1367, 1367, 1367, 1047,
      182, 1367,  182, 1367, 1045,  182, 1367, 1367,  182, 1367,
     1367,  183,  184,  845,  845,  182,  183,  184,  183,  184,
     1367,  183,  184, 1050,  183,  184, 1049,  182, 1367, 1051,
     1048,  183,  184,  182, 1367,  182, 1367, 1053,  182, 1367,

     1052,  182, 1367,  183,  184, 1367, 1367, 1367, 1367,  183,
      184,  183,  184, 1056,  183,  184,  182,  183,  184, 1055,
      182, 1367, 1057,  182, 1054,  182, 1367,  182, 1367,  182,
     1367,  182,  183,  184, 1367, 1367,  183,  184, 1367,  183,
      184,  183,  184,  183,  184,  183,  184,  183,  184,  182,
     1367, 1061, 1367,  182, 1058, 1367,  182, 1367,  182, 1059,
      182, 1367,  182, 1367, 1367,  183,  184,  182, 1060,  183,
      184, 1062,  183,  184,  183,  184,  183,  184,  183,  184,
     1063,  182, 1064,  183,  184, 1367,  182, 1367,  182, 1367,
      182, 1065,  182, 1367, 1066, 1067, 1068,  183,  184,  182,

     1367, 1069,  183,  184,  183,  184,  183,  184,  183,  184,
      182, 1367, 1071,  182, 1072,  183,  184,  182, 1367, 1070,
      182, 1367, 1367,  182, 1367,  182,  183,  184, 1073,  183,
      184, 1367,  182,  183,  184, 1367,  183,  184, 1075,  183,
      184,  183,  184,  182, 1367, 1077,  182, 1074,  183,  184,
      182, 1367, 1078, 1367, 1076,  182, 1367,  182, 1367,  183,
      184,  182,  183,  184, 1367, 1367,  183,  184, 1367, 1079,
     1367,  183,  184,  183,  184, 1367, 1367,  183,  184,  182,
     1367, 1081,  182, 1367,  182, 1083, 1080,  182, 1367,  182,
     1367,  182, 1082,  182, 1367,  183,  184,  182,  183,  184,

      183,  184,  182,  183,  184,  183,  184,  183,  184,  183,
      184,  182, 1367,  183,  184, 1084, 1367, 1367,  183,  184,
     1367, 1367, 1367, 1085, 1367,  182, 1086,  183,  184, 1367,
     1367, 1367,  630,  280, 1367,  630, 1088, 1087,  280, 1367,
      728,  183,  184,  182,  842,  280, 1367,  842, 1367, 1367,
      280, 1367,  926, 1367,  925,  842, 1367, 1367,  842,  183,
      184, 1367, 1367,  927,  842,  842, 1090, 1367,  842, 1367,
      928,  732,  732, 1367, 1169,  732,  842, 1367,  842,  929,
      930,  630,  726,  732,  630,  732, 1367,  726,  276,  932,
      630, 1367,  393,  630,  276,  277,  393, 1367, 1367, 1367,

     1367,  277, 1367, 1095,  278,  279, 1367,  842,  842,  842,
      278,  279,  842, 1367,  732,  732, 1367, 1093,  929,  929,
     1096,  276,  929, 1367,  276, 1367, 1367, 1367,  277,  276,
      929,  277,  929,  842,  842,  276,  277,  278,  279,  182,
      278,  279,  277,  276, 1367,  278,  279, 1367, 1098, 1367,
      277,  278,  279,  182, 1367,  183,  184, 1367, 1097,  278,
      279,  929,  929,  630, 1099, 1367,  630, 1367,  551,  183,
      184,  729,  630,  630,  276, 1166,  630, 1367,  730, 1367,
     1367,  277, 1172, 1367,  630,  276,  630,  732,  733, 1367,
      278,  279,  277,  276, 1367, 1367,  276, 1367, 1367,  551,

      277,  278,  279,  277,  276, 1367, 1100, 1367, 1367,  278,
      279,  277,  278,  279, 1367,  630,  630,  276, 1367,  276,
      278,  279, 1367, 1367,  277,  276,  277, 1102, 1367, 1367,
     1101,  276,  277,  278,  279,  278,  279,  276,  277, 1103,
     1367,  278,  279,  276,  277,  276, 1107,  278,  279, 1104,
      277, 1105,  277,  278,  279, 1367,  276, 1106, 1367,  278,
      279,  278,  279,  277,  842, 1367,  185,  842,  276, 1367,
      185,  276,  278,  279, 1108,  277,  276, 1367,  277, 1367,
     1109, 1367,  276,  277,  278,  279, 1110,  278,  279,  277,
      276, 1367,  278,  279,  276, 1367, 1115,  277,  278,  279,

     1367,  277,  276, 1367, 1367, 1367,  278,  279, 1111,  277,
      278,  279, 1367,  276, 1112, 1114,  276, 1367,  278,  279,
      277,  276, 1113,  277,  276, 1367, 1367, 1367,  277,  278,
      279,  277,  278,  279, 1116, 1367,  182,  278,  279,  276,
      278,  279, 1119, 1117,  276, 1367,  277,  276, 1367, 1367,
     1367,  277,  183,  184,  277,  278,  279, 1118, 1170,  182,
      278,  279, 1367,  278,  279,  630,  337, 1367,  630, 1121,
     1367,  337, 1367,  779, 1120,  183,  184,  842,  337, 1367,
      842, 1367, 1367,  337, 1367,  970, 1367,  969,  842, 1367,
      182,  842, 1367, 1367, 1165, 1367,  971,  842,  842, 1123,

     1367,  842, 1367,  972,  783,  783,  183,  184,  783,  842,
     1177,  842,  973,  974,  630,  777,  783,  630,  783, 1367,
      777,  333,  976,  630, 1367,  628,  630,  333,  334,  628,
     1367, 1367, 1367, 1367,  334, 1367, 1128,  335,  336, 1367,
      842,  842,  842,  335,  336,  842, 1367,  783,  783, 1367,
      971,  842,  842,  630,  360,  842,  630,  972, 1367,  360,
     1367,  792, 1129,  842, 1367,  842,  973,  974,  842,  360,
     1367,  842, 1367, 1367,  360,  981,  982, 1367, 1367,  796,
      796,  630,  790,  796,  630,  356, 1367,  790, 1367,  988,
     1131,  796,  357,  796,  842,  842,  842,  182, 1367,  842,

     1367,  358,  359, 1136, 1126,  973,  973, 1367,  356,  973,
     1367, 1137, 1367,  183,  184,  357, 1367,  973, 1367,  973,
      842,  842,  796,  796,  358,  359, 1367,  356, 1367, 1168,
      356, 1367,  630,  393,  357,  630, 1367,  357,  393,  182,
      820, 1367, 1367,  358,  359, 1138,  358,  359,  973,  973,
      630, 1139, 1367,  630, 1008,  183,  184, 1367,  780,  630,
      630,  356, 1367,  630, 1367,  781,  182,  597,  357,  356,
     1174,  630, 1367,  630,  783,  784,  357,  358,  359, 1367,
     1367,  356,  183,  184, 1367,  358,  359,  443,  357,  182,
     1367, 1367,  356, 1367,  356, 1367, 1140,  358,  359,  357,

      597,  357,  630,  630,  842,  183,  184,  842,  358,  359,
      358,  359,  983,  842,  842,  356,  597,  842, 1367,  984,
     1142, 1367,  357,  356, 1141,  842,  356,  842,  985,  986,
      357,  358,  359,  357,  389, 1367, 1367, 1367,  356,  358,
      359,  390,  358,  359, 1145,  357,  356, 1144,  182, 1367,
      391,  392, 1143,  357,  358,  359,  842,  842,  842,  828,
     1367,  842,  358,  359,  183,  184,  983,  842,  842,  356,
     1171,  842,  182,  984, 1367,  597,  357,  356, 1146,  842,
      356,  842,  985,  986,  357,  358,  359,  357,  183,  184,
     1147, 1367, 1367,  358,  359, 1148,  358,  359, 1173, 1367,

     1367, 1367, 1149, 1367,  824,  824, 1367, 1367,  824, 1367,
      842,  842,  842, 1367, 1367,  842,  824, 1367,  824, 1367,
     1134,  985,  985,  842,  393,  985,  842, 1367, 1367,  393,
     1367, 1009, 1367,  985, 1367,  985,  842,  842,  630,  818,
      182,  630, 1367, 1367,  818, 1151, 1015,  824,  824, 1367,
     1367,  389, 1367, 1367, 1367,  389,  183,  184,  390, 1367,
     1156, 1367,  390, 1367,  985,  985,  630,  391,  392,  630,
     1367,  391,  392, 1157,  793,  630,  630,  389, 1167,  630,
      828,  794, 1367,  182,  390,  389, 1367,  630,  389,  630,
      796,  797,  390,  391,  392,  390,  389, 1367, 1158,  183,

      184,  391,  392,  390,  391,  392, 1159, 1367, 1160,  389,
      845,  845,  391,  392,  845, 1367,  390, 1367,  630,  630,
      842, 1175,  845,  842,  845,  391,  392, 1161, 1010,  842,
      842,  389,  401,  842, 1367, 1011, 1367, 1367,  390, 1367,
     1367,  842, 1367,  842, 1012, 1013, 1367,  391,  392,  842,
      185, 1367,  842,  845,  845,  185, 1367,  843, 1367,  842,
      628, 1367,  842,  182, 1367,  628, 1162, 1029, 1367, 1367,
     1367, 1027,  842,  842,  842, 1367, 1367,  842, 1367,  183,
      184, 1164, 1010,  842,  842,  630,  628,  842,  630, 1011,
     1367,  628,  182,  848,  182,  842,  182,  842, 1012, 1013,

     1179, 1367, 1367, 1367, 1367,  182, 1367, 1032,  183,  184,
      183,  184,  183,  184, 1176, 1367, 1367,  182, 1180, 1367,
     1178,  183,  184, 1367, 1367, 1367,  842,  842,  842,  182,
     1367,  842, 1367,  183,  184, 1367, 1154, 1012, 1012, 1181,
      182, 1012,  182, 1367, 1367,  183,  184, 1367,  182, 1012,
      182, 1012,  842,  842,  182, 1367,  183,  184,  183,  184,
     1182, 1367,  182, 1367,  183,  184,  183,  184, 1367, 1367,
      183,  184, 1185, 1186, 1367, 1367, 1367, 1183,  183,  184,
     1012, 1012,  630, 1184,  182,  630, 1367, 1367, 1367, 1367,
      821,  630,  630,  182, 1367,  630,  182,  822,  182, 1367,

      183,  184, 1367,  630, 1367,  630,  824,  825, 1367,  183,
      184,  182,  183,  184,  183,  184,  182, 1367, 1188, 1367,
     1187,  182, 1367, 1367, 1189,  182, 1367,  183,  184, 1367,
     1367,  182,  183,  184,  630,  630,  842,  183,  184,  842,
     1367,  183,  184, 1191,  844,  842,  842,  183,  184,  842,
     1190, 1367, 1367,  182, 1367, 1367,  182,  842,  182,  842,
      845,  846,  182, 1367,  182, 1367,  182, 1367, 1192,  183,
      184, 1193,  183,  184,  183,  184,  182, 1367,  183,  184,
      183,  184,  183,  184,  182, 1367, 1194,  182,  842,  842,
      182, 1367,  183,  184,  182, 1367,  182, 1367,  182, 1367,

      183,  184, 1195,  183,  184,  182,  183,  184,  182, 1196,
      183,  184,  183,  184,  183,  184, 1367, 1367, 1367,  182,
     1367,  183,  184, 1367,  183,  184,  182, 1197, 1367, 1367,
      182, 1367,  182, 1198, 1367,  183,  184, 1367,  182, 1367,
     1199, 1201,  183,  184, 1367, 1200,  183,  184,  183,  184,
      842,  280, 1367,  842,  183,  184,  280, 1367,  926, 1367,
     1367, 1202,  929,  929, 1367, 1203,  929,  842, 1367,  280,
      842, 1367, 1090,  280,  929, 1367,  929,  842,  726, 1367,
      842,  630,  726,  726,  630, 1092, 1367,  726, 1367,  932,
      630, 1367,  726,  630, 1367,  276,  726, 1367, 1367, 1205,

     1367, 1367,  277, 1095, 1367,  929,  929,  842, 1367, 1367,
      842,  278,  279, 1206, 1367,  927,  842,  842,  276, 1367,
      842, 1367,  928, 1367, 1367,  277,  276, 1367,  842, 1367,
      842,  929,  930,  277,  278,  279, 1207,  276, 1367,  276,
     1367,  276,  278,  279,  277,  276,  277, 1367,  277, 1367,
     1367,  182,  277,  278,  279,  278,  279,  278,  279,  842,
      842,  278,  279,  276, 1208, 1210,  276,  183,  184,  276,
      277,  276, 1367,  277,  276, 1209,  277, 1249,  277,  278,
      279,  277,  278,  279, 1367,  278,  279,  278,  279, 1367,
      278,  279, 1367, 1033, 1211,  276, 1367,  276, 1367, 1367,

     1214, 1367,  277, 1367,  277, 1367, 1212, 1367, 1213,  276,
     1367,  278,  279,  278,  279,  276,  277, 1215, 1367, 1216,
      276, 1367,  277,  276, 1367,  278,  279,  277,  276, 1367,
      277,  278,  279, 1367, 1367,  277,  278,  279, 1367,  278,
      279, 1367, 1367, 1367,  278,  279, 1217,  276, 1218,  276,
     1220, 1367,  276, 1367,  277,  276,  277, 1367, 1219,  277,
     1367, 1367,  277,  278,  279,  278,  279, 1367,  278,  279,
      276,  278,  279,  276, 1367,  276, 1223,  277, 1222, 1367,
      277,  333,  277, 1367, 1221, 1367,  278,  279,  334,  278,
      279,  278,  279,  842,  337, 1367,  842,  335,  336,  337,

     1367,  970,  842, 1367,  337,  842, 1224, 1226,  337, 1367,
     1225, 1367,  973,  973, 1367, 1123,  973,  842,  777, 1367,
      842,  182, 1367,  777,  973, 1125,  973,  630,  777, 1367,
      630, 1367, 1367,  777, 1367,  976, 1367,  183,  184, 1228,
      630, 1367,  777,  630,  842,  360,  777,  842, 1367, 1128,
      360, 1367,  982, 1367, 1367,  973,  973,  842, 1367,  360,
      842,  985,  985,  360, 1367,  985, 1131, 1367,  842,  790,
     1367,  842, 1367,  985,  790,  985, 1133,  630,  790, 1367,
      630,  182, 1367,  790,  356,  988,  630, 1367,  790,  630,
     1230,  357,  790, 1367, 1367, 1367,  356,  183,  184, 1136,

      358,  359, 1231,  357,  985,  985, 1367, 1367,  356, 1367,
      356, 1367,  358,  359, 1232,  357,  356,  357, 1250,  182,
     1367,  356, 1367,  357,  358,  359,  358,  359,  357, 1367,
     1367, 1367,  358,  359,  356,  183,  184,  358,  359, 1367,
     1367,  357, 1367, 1367, 1367,  356, 1233,  356, 1234, 1367,
      358,  359,  357, 1235,  357, 1367, 1237, 1367, 1236,  356,
     1367,  358,  359,  358,  359,  356,  357,  597,  842, 1367,
      393,  842,  357,  356,  393,  358,  359, 1367, 1367,  356,
      357,  358,  359, 1367, 1238, 1367,  357, 1240, 1367,  358,
      359, 1367, 1367, 1367, 1239,  358,  359,  182,  842,  393,

     1367,  842,  597, 1241,  393, 1367, 1009, 1012, 1012,  842,
      818, 1012,  842,  183,  184,  818, 1367, 1153, 1367, 1012,
     1151, 1012,  630,  818, 1367,  630, 1367, 1367,  818,  389,
     1015, 1243,  630, 1367,  818,  630,  390, 1251,  818, 1367,
      389, 1367,  389, 1367, 1156,  391,  392,  390, 1367,  390,
     1012, 1012, 1367,  389, 1367,  389,  391,  392,  391,  392,
      390, 1367,  390, 1367, 1367,  401, 1244,  389, 1245,  391,
      392,  391,  392, 1367,  390,  842, 1367,  628,  842,  842,
      628,  628,  842,  391,  392,  628,  182, 1029, 1367,  182,
     1246, 1247,  182, 1367,  182, 1367,  182, 1367,  182, 1367,

      182, 1164,  183,  184, 1248,  183,  184, 1367,  183,  184,
      183,  184,  183,  184,  183,  184,  183,  184, 1256,  182,
     1253, 1252,  182, 1367, 1254,  182, 1367, 1367, 1367,  182,
     1367, 1255,  182, 1367, 1367,  183,  184, 1257,  183,  184,
     1367,  183,  184,  182, 1259,  183,  184,  182,  183,  184,
     1260,  182, 1367,  182, 1261,  182, 1258, 1367, 1367,  183,
      184,  182, 1367,  183,  184, 1262, 1367,  183,  184,  183,
      184,  183,  184,  182, 1264,  182, 1367,  183,  184,  182,
     1367, 1367, 1263,  182, 1367,  182, 1367,  182, 1367,  183,
      184,  183,  184,  182, 1367,  183,  184, 1266, 1367,  183,

      184,  183,  184,  183,  184,  182, 1367,  182, 1367,  183,
      184, 1367, 1367, 1367, 1267,  182, 1265,  182, 1367,  182,
     1367,  183,  184,  183,  184,  182, 1367,  182, 1268, 1269,
      182,  183,  184,  183,  184,  183,  184, 1367, 1367, 1367,
     1367,  183,  184,  183,  184, 1367,  183,  184,  842,  726,
     1367,  842, 1367, 1270,  726, 1271, 1092, 1367, 1367, 1272,
      276, 1367, 1273,  842, 1367,  726,  842,  277,  276,  726,
     1205,  276, 1367,  276, 1367,  277,  278,  279,  277,  276,
      277, 1367, 1367,  182,  278,  279,  277,  278,  279,  278,
      279,  276, 1367, 1277, 1367,  278,  279, 1274,  277,  183,

      184, 1367,  276, 1367,  276, 1275, 1276,  278,  279,  277,
     1278,  277, 1367, 1367,  182, 1367,  276, 1367,  278,  279,
      278,  279,  276,  277, 1279, 1367, 1367, 1367,  276,  277,
      183,  184,  278,  279,  276,  277, 1303, 1367,  278,  279,
     1367,  277,  276, 1282,  278,  279, 1280, 1281,  276,  277,
      278,  279, 1283,  276, 1367,  277,  276, 1367,  278,  279,
      277,  276, 1367,  277,  278,  279, 1367, 1367,  277,  278,
      279, 1367,  278,  279, 1367, 1367,  276,  278,  279,  276,
     1367, 1284, 1286,  277, 1285, 1367,  277,  276, 1367, 1367,
      276, 1367,  278,  279,  277,  278,  279,  277, 1367,  842,

     1367,  777,  842,  278,  279,  777,  278,  279,  842,  777,
     1367,  842, 1367, 1367,  777, 1288, 1125, 1367, 1287, 1367,
     1367, 1367, 1290, 1289, 1367,  842,  790, 1367,  842, 1367,
     1228,  790,  356, 1133,  842, 1367,  790,  842,  356,  357,
      790, 1367, 1367,  356, 1367,  357,  356, 1230,  358,  359,
      357,  356, 1367,  357,  358,  359, 1367, 1367,  357,  358,
      359, 1367,  358,  359,  356, 1367, 1294,  358,  359, 1291,
      356,  357,  356, 1295, 1367, 1292,  356,  357, 1293,  357,
      358,  359, 1367,  357, 1367, 1367,  358,  359,  358,  359,
      597,  597,  358,  359,  356, 1367,  356, 1367, 1367,  842,

      818,  357,  842,  357, 1367,  818, 1296, 1153, 1367, 1297,
      358,  359,  358,  359,  842, 1367,  818,  842, 1367,  389,
      818, 1243, 1367,  389, 1367, 1298,  390,  389, 1367, 1367,
      390, 1367, 1367, 1367,  390,  391,  392, 1367,  597,  391,
      392,  389, 1367,  391,  392,  389, 1367,  182,  390,  182,
     1299,  182,  390, 1301, 1300,  182, 1367,  391,  392,  182,
     1367,  391,  392,  183,  184,  183,  184,  183,  184, 1304,
     1367,  183,  184,  182, 1367,  183,  184, 1302, 1367, 1367,
     1305,  401,  182, 1367,  182, 1367, 1307,  182, 1306,  183,
      184,  182, 1367,  182, 1367, 1308,  182, 1367,  183,  184,

      183,  184,  182,  183,  184,  182, 1309,  183,  184,  183,
      184,  182,  183,  184, 1310,  182, 1367, 1367,  183,  184,
      182,  183,  184, 1312,  182, 1367,  182,  183,  184,  182,
     1367,  183,  184, 1313, 1311, 1367,  183,  184,  182, 1367,
      183,  184,  183,  184, 1315,  183,  184,  182, 1367, 1367,
     1367, 1314,  182, 1367,  183,  184, 1367, 1367,  276, 1367,
      276, 1367, 1367,  183,  184,  277, 1316,  277,  183,  184,
     1367, 1367,  276, 1367,  278,  279,  278,  279,  276,  277,
     1367, 1367, 1367, 1367, 1319,  277, 1320, 1317,  278,  279,
     1321,  276, 1318,  276,  278,  279,  276, 1367,  277, 1367,

      277, 1367, 1367,  277,  276, 1367,  547,  278,  279,  278,
      279,  277,  278,  279, 1367, 1322,  276,  967,  276, 1367,
      278,  279, 1323,  277,  276,  277, 1367, 1367,  967, 1367,
      276,  277,  278,  279,  278,  279,  276,  277,  276, 1367,
      278,  279, 1367,  277,  276,  277,  278,  279, 1367, 1324,
     1325,  277,  278,  279,  278,  279,  276, 1367,  276, 1367,
      278,  279,  356,  277,  356,  277, 1327, 1326, 1367,  357,
     1367,  357,  278,  279,  278,  279,  356, 1367,  358,  359,
      358,  359,  356,  357,  356, 1367, 1328, 1367, 1329,  357,
     1330,  357,  358,  359, 1331,  356, 1367,  356,  358,  359,

      358,  359,  357, 1367,  357,  597, 1367, 1367, 1367,  356,
     1367,  358,  359,  358,  359, 1333,  357,  389, 1367, 1332,
      389, 1367, 1334,  389,  390,  358,  359,  390, 1367, 1335,
      390,  389, 1367,  391,  392,  182,  391,  392,  390,  391,
      392,  401,  182, 1367,  401,  182, 1367,  391,  392,  182,
     1367,  183,  184, 1337, 1336, 1367,  182, 1367,  183,  184,
      182,  183,  184,  182, 1367,  183,  184,  182, 1367, 1367,
      182, 1033,  183,  184,  182, 1367,  183,  184,  182,  183,
      184,  182, 1367,  183,  184,  882,  183,  184, 1367, 1367,
      183,  184,  182, 1367,  183,  184,  182,  183,  184,  182,

     1367, 1367,  182, 1340,  276, 1339, 1367,  276,  183,  184,
     1338,  277,  183,  184,  277,  183,  184, 1341,  183,  184,
      278,  279, 1342,  278,  279,  276, 1367, 1367,  276, 1367,
     1367,  276,  277,  276, 1367,  277,  182, 1367,  277, 1367,
      277,  278,  279, 1343,  278,  279, 1344,  278,  279,  278,
      279, 1367,  183,  184,  276, 1367,  276, 1367,  276, 1348,
     1346,  277, 1345,  277, 1367,  277, 1367, 1367, 1347, 1367,
      278,  279,  278,  279,  278,  279, 1349, 1367, 1367,  276,
      967,  356, 1367,  356, 1367, 1367,  277,  182,  357,  182,
      357, 1367, 1367, 1367, 1350,  278,  279,  358,  359,  358,

      359,  356, 1367,  183,  184,  183,  184,  356,  357,  356,
     1367, 1367,  389, 1367,  357, 1367,  357,  358,  359,  390,
     1351, 1357, 1352,  358,  359,  358,  359,  356,  391,  392,
     1367,  182, 1367,  356,  357,  389,  401, 1367, 1353, 1354,
      357,  182,  390,  358,  359,  182,  597,  183,  184,  358,
      359,  391,  392, 1355, 1367,  597,  276,  183,  184,  276,
     1367,  183,  184,  277, 1367, 1367,  277,  276, 1356, 1367,
     1367,  401,  278,  279,  277,  278,  279, 1066, 1358,  276,
     1367, 1359,  276,  278,  279,  276,  277,  276, 1367,  277,
      276, 1367,  277, 1360,  277,  278,  279,  277,  278,  279,

     1367,  278,  279,  278,  279, 1361,  278,  279,  356, 1367,
      356, 1367,  356, 1367,  739,  357, 1367,  357, 1367,  357,
     1367, 1367, 1367, 1367,  358,  359,  358,  359,  358,  359,
      597,  182,  597,  356, 1367,  356, 1367,  276, 1362, 1367,
      357, 1367,  357, 1367,  277, 1367, 1367,  183,  184,  358,
      359,  358,  359,  278,  279,  597,  276, 1367,  276, 1367,
      276, 1367, 1363,  277,  356,  277,  182,  277,  597, 1367,
     1367,  357,  278,  279,  278,  279,  278,  279,  276, 1367,
      358,  359,  183,  184,  356,  277,  276, 1367, 1367, 1367,
     1364,  357, 1367,  277,  278,  279, 1365, 1367, 1367, 1367,

      358,  359,  278,  279, 1367, 1367, 1367, 1367, 1367, 1366,
     1367, 1367, 1367, 1367, 1367,  597,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  181,  181, 1367, 1367,  181,  181,  181,  185, 1367,
      185,  185,  185,  185,  185,  185,  185,  185,  275,  275,
     1367, 1367,  275,  275,  275,  280, 1367,  280,  280,  280,

      280,  280,  280,  280,  280,  332,  332, 1367, 1367,  332,
      332,  332,  337, 1367,  337,  337,  337,  337,  337,  337,
      337,  337,  355,  355, 1367, 1367,  355,  355,  355,  360,
     1367,  360,  360,  360,  360,  360,  360,  360,  360,  388,
      388, 1367, 1367,  388,  388,  388,  393, 1367,  393,  393,
      393,  393,  393,  393,  393,  393,  421, 1367, 1367, 1367,
      421, 1367,  421,  421, 1367,  421,  421,  425, 1367, 1367,
      425,  425, 1367,  425,  425,  425,  425,  425,  426,  426,
     1367,  426,  426,  426,  426,  426,  426,  426,  426,  427,
     1367,  427,  427, 1367, 1367,  427, 1367,  427,  429,  429,

      429,  429,  429, 1367,  429,  528,  528,  528,  528,  528,
     1367,  528,  573,  573,  573,  573,  573, 1367,  573,  585,
      585,  585,  585,  585, 1367,  585,  611,  611,  611,  611,
      611, 1367,  611,  628, 1367,  628,  628,  628,  628,  628,
      628,  628,  628,  631, 1367, 1367, 1367,  631,  631,  631,
      631,  631,  631,  631,  726, 1367,  726,  726,  726,  726,
      726,  726,  726,  726,  728, 1367, 1367, 1367,  728,  728,
      728,  728,  728,  728,  728,  777, 1367,  777,  777,  777,
      777,  777,  777,  777,  777,  779, 1367, 1367, 1367,  779,
      779,  779,  779,  779,  779,  779,  630, 1367, 1367, 1367,

      630,  630,  630,  630,  630,  630,  630,  790, 1367,  790,
      790,  790,  790,  790,  790,  790,  790,  792, 1367, 1367,
     1367,  792,  792,  792,  792,  792,  792,  792,  818, 1367,
      818,  818,  818,  818,  818,  818,  818,  818,  820, 1367,
     1367, 1367,  820,  820,  820,  820,  820,  820,  820,  840,
      840, 1367,  840,  840,  840,  840,  840,  840,  840,  840,
      843, 1367, 1367, 1367,  843,  843,  843,  843,  843,  843,
      843,  848, 1367, 1367, 1367,  848,  848,  848,  848,  848,
      848,  848,  924,  924, 1367,  924,  924,  924,  924,  924,
      924,  924,  924,  926, 1367, 1367, 1367,  926,  926,  926,

      926,  926,  926,  926,  932, 1367, 1367, 1367,  932,  932,
      932,  932,  932,  932,  932,  968,  968, 1367,  968,  968,
      968,  968,  968,  968,  968,  968,  970, 1367, 1367, 1367,
      970,  970,  970,  970,  970,  970,  970,  976, 1367, 1367,
     1367,  976,  976,  976,  976,  976,  976,  976,  842, 1367,
     1367, 1367,  842,  842,  842,  842,  842,  842,  842,  980,
      980, 1367,  980,  980,  980,  980,  980,  980,  980,  980,
      982, 1367, 1367, 1367,  982,  982,  982,  982,  982,  982,
      982,  988, 1367, 1367, 1367,  988,  988,  988,  988,  988,
      988,  988, 1007, 1007, 1367, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1009, 1367, 1367, 1367, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1015, 1367, 1367, 1367, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1026, 1026, 1367, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1029, 1367, 1367, 1367,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1031, 1031, 1367,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1089, 1089,
     1367, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1092,
     1367, 1367, 1367, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
      728, 1367, 1367, 1367,  728,  728,  728,  728,  728,  728,
      728, 1094, 1094, 1367, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094,  275,  275, 1367, 1367,  275,  275,  275,  968,
      968, 1367,  968,  968,  968,  968,  968,  968,  968,  968,
      970, 1367, 1367, 1367,  970,  970,  970,  970,  970,  970,
      970, 1122, 1122, 1367, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1125, 1367, 1367, 1367, 1125, 1125, 1125, 1125,
     1125, 1125, 1125,  779, 1367, 1367, 1367,  779,  779,  779,
      779,  779,  779,  779, 1127, 1127, 1367, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127,  332,  332, 1367, 1367,  332,
      332,  332,  980,  980, 1367,  980,  980,  980,  980,  980,
      980,  980,  980,  982, 1367, 1367, 1367,  982,  982,  982,

      982,  982,  982,  982, 1130, 1130, 1367, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1133, 1367, 1367, 1367, 1133,
     1133, 1133, 1133, 1133, 1133, 1133,  792, 1367, 1367, 1367,
      792,  792,  792,  792,  792,  792,  792, 1135, 1135, 1367,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,  355,  355,
     1367, 1367,  355,  355,  355, 1007, 1007, 1367, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1009, 1367, 1367, 1367,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1150, 1150, 1367,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1153, 1367,
     1367, 1367, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  820,

     1367, 1367, 1367,  820,  820,  820,  820,  820,  820,  820,
     1155, 1155, 1367, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155,  388,  388, 1367, 1367,  388,  388,  388, 1026, 1026,
     1367, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,  842,
     1367, 1367, 1367,  842,  842,  842,  842,  842,  842,  842,
      843, 1367, 1367, 1367,  843,  843,  843,  843,  843,  843,
      843, 1163, 1163, 1367, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1031, 1031, 1367, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031,  181,  181, 1367, 1367,  181,  181,  181,
     1089, 1089, 1367, 1089, 1089, 1089, 1089, 1089, 1089, 1089,

     1089,  926, 1367, 1367, 1367,  926,  926,  926,  926,  926,
      926,  926, 1204, 1204, 1367, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1094, 1094, 1367, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  275,  275, 1367, 1367,  275,  275,
      275, 1227, 1227, 1367, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1229, 1229, 1367, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1242, 1242, 1367, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242,   23, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367
    } ;

static const flex_int16_t yy_chk[9132] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  180,
       20,   20,    8,  180,  180,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13, 1012,   15,   15,   28,   15,   15,
       15,  985,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  973,   90,   28,   28,   13,   15,   13,  929,   29,
      848,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  845,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  111,   33,   21,   21,   21,   34,
      140,   35,  822,   36,  634,   33,   33,   37,  111,  634,
       21,   36,   36,   39,  140,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  186,  186,  820,   39,
       39,  794,   39,   38,   39,   38,  281,  281,  792,   40,
       21,   21,   39,   21,   22,  181,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  786,  182,   45,
      785,  181,  181,  781,   38,   38,   22,   42,   42,   43,
      185,   40,  182,   42,   40,   45,   45,   40,  779,   45,
      730,   45,  728,   42,  185,   43,   43,   42,  732,   42,
      165,   46,  165,  732,   45,   53,   22,   22,   47,   22,
       41,   43,   48,   43,   43,  631,  165,   46,   46,  276,
       43,   53,   53,  280,   47,   47,   41,   41,   48,   48,

       48,   41,   46,  276,   47,   41,   46,  280,  333,   41,
       41,   48,   41,   53,   48,   41,   44,  337,   48,   49,
       44,   44,  333,  627,   44,   44,   50,   44,  338,  338,
       44,  337,   44,  356,   44,   49,   49,   49,   49,  360,
       51,   49,   50,   50,   50,   49,  389,  356,   50,   52,
      626,   49,  584,  360,  361,  361,   51,   51,   50,   51,
      389,   54,  583,   51,   50,   52,   52,   52,  393,   59,
       51,   51,  582,   51,  394,  394,   57,   54,   54,   54,
       56,   52,  393,   54,   52,   59,   59,   52,  581,   52,
       54,  578,   57,   57,   59,   59,   56,   56,  430,   54,

       55,   55,   56,   58,   55,   56,   56,   57,   55,   55,
       60,   55,  430,  783,   55,   56,   55,   55,  783,   58,
       58,   58,  529,  629,  629,   58,   60,   60,   61,   58,
       64,  577,   65,   64,   60,   61,  529,   64,  183,   65,
       60,   58,  727,  727,   61,   61,   64,   64,   65,   65,
       66,  778,  778,   67,  183,  183,   66,   66,   69,  420,
       67,   68,   66,   67,   67,   69,   66,   66,   68,   67,
       67,  177,  177,   68,   69,   69,  574,   68,   68,   70,
       70,   71,  419,   70,  354,   73,  586,   74,   71,   76,
      574,   70,   73,   70,   74,  612,   76,   71,   71,  353,

      586,   73,   73,   74,   74,   76,   76,   76,  352,  612,
      351,   73,  109,   75,  177,  177,  192,   71,   74,   78,
       75,   74,   70,   70,   72,  628,   78,   86,   74,   75,
       75,   72,  192,  192,   86,   78,   78,  726,   78,  628,
       72,   72,  796,   86,   86,   75,   72,  796,   75,  108,
       79,  726,   23,   72,   72,  192,   72,   79,   72,   72,
       72,   72,   77,   86,   87,    0,   79,   79,   79,   77,
       80,   87,   79,  791,  791,    0,  777,   80,   77,   77,
       87,   87,   87,   77,   81,   77,   80,   80,   82,   80,
      777,   81,   80,   77,  187,   82,  198,  187,   77,   77,

       81,   81,   83,   81,   82,   82,   80,  790,    0,   83,
      187,  187,  198,  198,  819,  819,  818,   81,   83,   83,
       82,  790,   84,   82,   84,    0,    0,  205,   83,   85,
      818,   83,   84,   84,   84,    0,   85,   84,   84,   84,
       88,    0,   89,  205,  205,   85,   85,   88,   93,   89,
        0,   85,   88,  195,   93,   93,   88,   88,   89,   89,
       92,   85,    0,   92,   93,   93,  824,   92,    0,  195,
      195,  824,  197,    0,  195,    0,   92,   92,   94,   94,
       94,   94,   94,   94,    0,   94,    0,   95,  197,  197,
       96,    0,   94,   97,   95,   95,   95,   96,  197,    0,

       97,   94,   94,   95,   95,    0,   96,   96,    0,   97,
       97,   98,   98,   99,    0,   98,  536,  100,  536,    0,
       99,  101,    0,   98,  100,   98,  536,    0,  101,   99,
       99,  536,  536,  100,  100,   99,    0,  101,  101,    0,
        0,  207,    0,  100,    0,    0,  104,  104,  104,  104,
      104,  104,  101,    0,   98,   98,  104,  207,  207,  104,
      106,  106,  106,  106,  106,  106,  841,  841,  841,  841,
      106,  207,  841,  106,  107,  107,  107,  107,  107,  107,
        0,  110,    0,  114,  107,  116,  114,  107,  110,  117,
      114,  116,  116,    0,    0,    0,  117,  110,  110,  114,

      114,  116,  116,  118,    0,  117,  117,  188,    0,  119,
      118,  122,    0,  188,  118,  124,  119,    0,  122,  118,
      118,  119,  124,  188,  188,  119,  119,  122,  122,  123,
      123,  124,  124,  123,    0,    0,    0,  125,    0,  126,
        0,  123,  128,  123,  125,  127,  126,  208,    0,  128,
      136,  124,  127,  125,  125,  126,  126,  136,  128,  128,
      128,  127,  127,  208,  208,  126,  136,  136,  129,  125,
      208,  132,  123,  123,  125,  129,  130,  127,  132,  131,
      127,    0,  136,  130,  129,  129,  131,  132,  132,  129,
      132,  129,  130,  130,  130,  131,  131,  133,  130,    0,

      134,  131,  135,    0,  133,  129,  196,  134,  191,  135,
        0,    0,    0,  133,  133,  131,  134,  134,  135,  135,
      139,    0,  196,  196,  191,  191,  134,  139,  196,  133,
        0,  141,  133,    0,  141,  135,  139,  139,  141,  135,
      191,    0,    0,  142,    0,  143,    0,  141,  141,  142,
      142,  144,  143,    0,    0,    0,  147,    0,  144,  142,
      142,  143,  143,  147,  148,  145,  145,  144,  144,  145,
        0,  148,  147,  147,    0,  149,    0,  145,    0,  145,
      148,  148,  149,    0,  212,    0,  150,  147,    0,    0,
      147,  149,  149,  150,  149,  148,    0,  147,    0,  152,

      212,  212,  150,  150,  151,  150,  152,  153,  145,  145,
      146,  151,  156,  212,  153,  152,  152,  146,    0,  156,
      151,  151,  150,  153,  153,    0,  146,  146,  156,  156,
      156,  154,  146,    0,  152,    0,  153,  151,  154,  146,
      146,    0,  155,    0,  146,  146,  146,  154,  154,  155,
      193,    0,  154,    0,  925,  925,  925,  925,  155,  155,
      925,    0,    0,  154,    0,  217,  193,  193,  154,  154,
      157,  157,  157,  157,  157,  157,  193,    0,  155,  193,
      157,  217,  217,  157,  159,  159,  159,  159,  159,  159,
      217,  184,  184,  184,  159,    0,  184,  159,  160,  160,

      160,  160,  160,  160,  184,  189,  184,  194,  160,  199,
        0,  160,    0,  189,  189,  190,  190,  200,    0,  190,
        0,  189,  189,  194,  194,  199,  199,  190,  830,  190,
      201,  199,  202,  200,  200,  184,  184,  830,  203,  200,
      206,  830,  830,    0,  194,    0,  201,  201,  202,  202,
      204,  201,    0,    0,  203,  203,  206,  206,  190,  190,
      203,  202,  202,  202,  209,    0,  204,  204,  210,  204,
      202,  211,    0,    0,    0,  206,  213,    0,    0,  214,
      209,  209,  216,    0,  210,  210,  204,  211,  211,  215,
      210,  211,  213,  213,  213,  214,  214,  218,  216,  216,

      209,    0,    0,  219,  216,  215,  215,    0,  211,  220,
        0,  214,  221,  218,  218,    0,  222,    0,  215,  219,
      219,  223,    0,  224,  215,  220,  220,  226,  221,  221,
      221,  225,  222,  222,    0,  218,  222,  223,  223,  224,
      224,  227,    0,  226,  226,  228,  220,  225,  225,  229,
      225,  230,    0,  231,  224,  232,  223,  227,  227,  227,
      233,  228,  228,  234,    0,  229,  229,  230,  230,  231,
      231,  232,  232,  227,  235,    0,  233,  233,  236,  234,
      234,  233,    0,  231,    0,  237,  229,  230,    0,  238,
      235,  235,  240,    0,  236,  236,  232,    0,  234,    0,

        0,  237,  237,  239,    0,  238,  238,    0,  240,  240,
        0,  241,    0,  236,  235,  237,  238,  242,    0,  239,
      239,  243,    0,  245,  240,  246,  239,  241,  241,  244,
        0,  247,    0,  242,  242,    0,    0,  243,  243,  245,
      245,  246,  246,  248,    0,  244,  244,  247,  247,  245,
      249,    0,  247,  242,  250,  245,  243,  252,  243,  248,
      248,  246,  244,  251,    0,  253,  249,  249,  255,  248,
      250,  250,    0,  252,  252,  250,    0,    0,    0,  251,
      251,  253,  253,    0,  255,  255,  252,  249,  254,    0,
      250,  256,    0,  250,  250,  257,    0,    0,  258,  251,

      255,  253,  259,    0,  254,  254,  254,  256,  256,    0,
        0,  257,  257,  260,  258,  258,    0,  254,  259,  259,
      261,    0,    0,  256,  259,  254,  262,  257,  263,  260,
      260,  260,  257,  258,    0,  260,  261,  261,  260,  261,
      264,    0,  262,  262,  263,  263,    0,  265,  260,    0,
      261,  266,    0,    0,    0,  267,  264,  264,  268,    0,
        0,    0,  262,  265,  265,  265,  269,  266,  266,  271,
      264,  267,  267,    0,  268,  268,    0,  266,  270,    0,
      272,    0,  269,  269,  270,  271,  271,  274,  269,    0,
      267,  271,  273,  268,  270,  270,  272,  272,  273,  275,

        0,  271,    0,  274,  274,  274,  275,  277,  273,  273,
        0,  278,    0,    0,  277,  275,  275,  272,  278,    0,
      279,  279,  279,  277,  277,  279,    0,  278,  278,  282,
        0,  283,  282,  279,  284,  279,  282,  283,  283,    0,
      429,  284,  285,    0,    0,  282,  282,  283,  283,  285,
      284,  284,    0,  286,    0,  287,  429,  429,  285,  285,
      286,    0,  287,    0,  279,  279,    0,  433,    0,  286,
      286,  287,  287,  288,  288,  289,    0,  288,    0,  290,
        0,  291,  289,  433,  433,  288,  290,  288,  291,  436,
        0,  289,  289,  292,    0,  290,  290,  291,  291,  291,

      292,    0,  433,    0,  434,  436,  436,  293,    0,  292,
      292,  289,  292,  290,  293,  294,  288,  288,  295,    0,
      434,  434,  294,  293,  293,  295,  297,    0,    0,  296,
      434,  294,  294,  297,  295,  295,  296,  293,  293,    0,
        0,    0,  297,  297,  298,  296,  296,  295,  299,    0,
      296,  298,    0,    0,    0,  299,  300,    0,  297,  301,
      298,  298,    0,  300,  299,  299,  301,  302,    0,  299,
        0,  303,  300,  300,  302,  301,  301,    0,  303,    0,
        0,  298,  304,  302,  302,    0,    0,  303,  303,  304,
      306,    0,  437,    0,  305,    0,  301,  306,  304,  304,

      305,  305,  302,  303,  305,  307,  306,  306,  437,  437,
      305,  305,  307,  308,    0,    0,  305,  309,    0,  304,
      308,  307,  307,    0,  309,  307,    0,  437,  310,  308,
      308,  311,    0,  309,  309,  310,  312,    0,  311,  309,
        0,    0,    0,  312,  310,  310,    0,  311,  311,  313,
      311,    0,  312,  312,    0,    0,  313,  315,    0,  312,
      310,  314,  316,  314,  315,  313,  313,    0,  311,  316,
      314,  314,    0,  315,  315,  318,  314,  314,  316,  316,
      317,  315,  318,  319,    0,    0,  317,  317,    0,  316,
      319,  318,  318,    0,  320,    0,  317,  317,    0,  319,

      319,  320,    0,    0,  318,  319,  321,    0,    0,    0,
      320,  320,  322,  321,  323,  319,  317,  324,  320,  322,
      325,  323,  321,  321,  324,  326,    0,  325,  322,  322,
      323,  323,  326,  324,  324,    0,  325,  325,    0,  324,
      327,  326,  326,  328,  326,  329,    0,  327,    0,  323,
      328,  330,  329,    0,    0,  325,  327,  327,  330,  328,
      328,  329,  329,  331,    0,  332,    0,  330,  330,    0,
      331,  329,  332,  435,    0,  327,  334,    0,  335,  331,
      331,  332,  332,  334,    0,  335,  330,  438,    0,  435,
      435,  435,  334,  334,  335,  335,  336,  336,  336,  339,

        0,  336,  339,  438,  438,    0,  339,  340,    0,  336,
        0,  336,    0,  340,  340,  339,  339,  341,  341,  341,
      341,  341,  341,  340,  340,    0,  343,  341,    0,  438,
      341,    0,    0,  343,  343,  343,    0,    0,    0,    0,
      336,  336,  343,  343,  344,  344,  345,    0,  344,    0,
      346,    0,  347,  345,  355,    0,  344,  346,  344,  347,
      439,  355,  345,  345,    0,    0,  346,  346,  347,  347,
      355,  355,    0,    0,    0,  345,  439,  439,  439,  346,
      348,  348,  348,  348,  348,  348,    0,  344,  344,  441,
      348,    0,    0,  348,  350,  350,  350,  350,  350,  350,

        0,  357,    0,  358,  350,  441,  441,  350,  357,  441,
      358,  359,  359,  359,  364,    0,  359,  357,  357,  358,
      358,  364,  362,    0,  359,  362,  359,  363,    0,  362,
      364,  364,    0,  363,  363,  365,  366,  366,  362,  362,
      366,    0,  365,  363,  363,    0,  367,    0,  366,    0,
      366,  365,  365,  367,  368,  359,  359,  369,    0,  370,
        0,  368,  367,  367,  369,    0,  370,    0,    0,    0,
      368,  368,    0,  369,  369,  370,  370,    0,  440,  366,
      366,  371,  367,  372,  368,  368,  373,    0,  371,  369,
      372,    0,    0,  373,  440,  440,  370,  371,  371,  372,

      372,  375,  373,  373,  374,    0,    0,  440,  375,    0,
        0,  374,  376,    0,  374,  372,  371,  375,  375,  376,
      374,  374,    0,  373,  377,    0,  374,  443,  376,  376,
      378,  377,  379,    0,  376,  380,    0,  378,  381,  379,
      377,  377,  380,  443,  443,  381,  378,  378,  379,  379,
      382,  380,  380,  378,  381,  381,  383,  382,  442,  380,
        0,  377,  379,  383,  384,  381,  382,  382,  379,  379,
      385,  384,  383,  383,  442,  442,  442,  385,  383,  382,
      384,  384,  386,    0,  387,    0,  385,  385,  384,  386,
      388,  387,  385,    0,    0,  390,    0,  388,  386,  386,

      387,  387,  390,  391,    0,    0,  388,  388,    0,    0,
      391,  390,  390,  392,  392,  392,    0,  386,  392,  391,
      391,    0,  395,    0,  396,  395,  392,    0,  392,  395,
      396,  396,  397,  397,    0,  398,  397,    0,  395,  395,
      396,  396,  398,  399,  397,    0,  397,  400,    0,    0,
      399,  398,  398,    0,  400,  401,    0,  392,  392,  399,
      399,  399,  401,  400,  400,    0,  400,  402,    0,  398,
      403,  401,  401,  404,  402,  397,  397,  403,    0,    0,
      404,  405,    0,  402,  402,  406,  403,  403,  405,  404,
      404,  403,  406,  407,  404,    0,  402,  405,  405,  408,

      407,  406,  406,    0,  409,  406,  408,    0,    0,  407,
      407,  409,  410,    0,    0,  408,  408,  411,  405,  410,
      409,  409,    0,  408,  411,  407,    0,    0,  410,  410,
      412,    0,  413,  411,  411,    0,    0,  412,  414,  413,
      409,  444,    0,  415,  410,  414,  412,  412,  413,  413,
      415,  413,  411,    0,  414,  414,    0,  444,  444,  415,
      415,    0,    0,    0,  414,  412,  416,  416,  416,  416,
      416,  416,  449,  444,    0,  445,  416,    0,  415,  416,
      418,  418,  418,  418,  418,  418,    0,    0,  449,  449,
      418,  445,  445,  418,  431,  448,    0,  431,    0,    0,

        0,    0,  431,  431,  431,  445,  446,  431,  445,    0,
      449,  448,  448,  447,  431,  431,  448,  431,  431,  431,
        0,    0,  446,  446,  453,    0,  446,  446,    0,  447,
      447,    0,    0,  450,    0,    0,    0,  451,    0,    0,
      453,  453,  446,  446,  447,    0,  431,  431,  432,  450,
      450,  432,    0,  451,  451,  450,  432,  432,  432,  451,
      452,  432,  454,    0,  455,    0,  456,    0,  432,  432,
      457,  432,  432,  432,  458,    0,  452,  452,  454,  454,
      455,  455,  456,  456,    0,    0,  457,  457,    0,  459,
      458,  458,  457,  452,    0,  456,  460,    0,  461,    0,

      432,  432,    0,    0,  455,  459,  459,  462,    0,    0,
        0,  458,  460,  460,  461,  461,  463,  460,  465,  461,
        0,    0,  464,  462,  462,  466,  459,  468,  464,    0,
      467,    0,  463,  463,  465,  465,  469,  462,  464,  464,
        0,  466,  466,  468,  468,  470,  467,  467,  471,  468,
        0,    0,  469,  469,  472,    0,  463,  469,  466,  467,
      473,  470,  470,    0,  471,  471,  474,  470,  475,  471,
      472,  472,  476,    0,  477,    0,  473,  473,    0,    0,
      473,  478,  474,  474,  475,  475,  479,  472,  476,  476,
      477,  477,  480,    0,  481,  476,    0,  478,  478,    0,

      475,  482,  479,  479,  483,    0,    0,  484,  480,  480,
      481,  481,  477,  481,  485,  479,  478,  482,  482,    0,
      483,  483,  480,  484,  484,  483,  486,    0,  487,    0,
      485,  485,  969,  969,  969,  969,  485,  488,  969,  489,
        0,  490,  486,  486,  487,  487,    0,  491,    0,  487,
      485,  486,    0,  488,  488,  489,  489,  490,  490,    0,
        0,  492,  489,  491,  491,  493,  490,  494,  488,  495,
        0,  496,    0,  497,    0,    0,  489,  492,  492,  498,
        0,  493,  493,  494,  494,  495,  495,  496,  496,  497,
      497,  493,    0,  496,  499,  498,  498,  500,  492,    0,

        0,  501,    0,  502,    0,  494,  503,  495,  497,    0,
      499,  499,  504,  500,  500,  505,  499,  501,  501,  502,
      502,  506,  503,  503,  507,  502,    0,  508,  504,  504,
      507,  505,  505,  505,  509,    0,  501,  506,  506,    0,
      507,  507,  506,  508,  508,  510,    0,    0,    0,  512,
      509,  509,  504,  511,    0,  509,  513,    0,    0,  514,
        0,  510,  510,  515,  508,  512,  512,  512,  516,  511,
      511,  517,  513,  513,  509,  514,  514,    0,    0,  515,
      515,  518,  510,    0,  516,  516,  511,  517,  517,  514,
      516,  517,  513,  519,  516,  520,    0,  518,  518,  521,

      515,  522,    0,    0,  518,  523,    0,  524,    0,  519,
      519,  520,  520,    0,  520,  521,  521,  522,  522,  519,
        0,  523,  523,  524,  524,  525,    0,  526,    0,  519,
      527,    0,  522,    0,    0,  636,  524,    0,  528,  521,
      523,  525,  525,  526,  526,  528,  527,  527,    0,  534,
      525,  636,  636,  532,  528,  528,  534,  535,  526,    0,
      532,    0,    0,    0,  535,  534,  534,  527,  530,  532,
      532,  530,  636,  535,  535,    0,  530,  530,  530,  533,
        0,  530,  639,  530,    0,  532,  533,  535,  530,  530,
      537,  530,  530,  530,  538,  533,  533,  537,  639,  639,

        0,  538,  540,    0,    0,    0,  537,  537,  639,  540,
      538,  538,  640,    0,    0,  533,    0,  539,  540,  540,
      530,  530,  531,    0,  539,  531,    0,    0,  640,  640,
      531,  531,  531,  539,  539,  531,    0,  531,    0,  540,
        0,    0,  531,  531,    0,  531,  531,  531,  541,    0,
      541,  637,  539,    0,  542,    0,    0,  541,  541,  541,
        0,  542,  543,  541,  541,  544,  541,  637,  637,  543,
      542,  542,  544,  545,  531,  531,  542,  546,  543,  543,
      545,  544,  544,    0,  546,    0,    0,  637,    0,  545,
      545,    0,  543,  546,  546,  544,  547,    0,  545,  548,

        0,    0,  546,  547,  549,    0,  548,  550,  544,    0,
      551,  549,  547,  547,  550,  548,  548,  551,  552,    0,
      549,  549,    0,  550,  550,  552,  551,  551,    0,  548,
      548,  553,    0,  549,  552,  552,    0,    0,  553,  554,
      552,    0,  550,  555,    0,  556,  554,  553,  553,  641,
      555,  557,  556,  553,    0,  554,  554,  558,  557,  555,
      555,  556,  556,  559,  558,  641,  641,  557,  557,  557,
      559,  560,    0,  558,  558,  555,  554,  641,  560,  559,
      559,  556,  561,    0,  562,  559,    0,  560,  560,  561,
      563,  562,    0,  558,    0,  564,  560,  563,  561,  561,

      562,  562,  564,    0,    0,    0,  563,  563,  565,    0,
      563,  564,  564,  566,    0,  565,  981,  981,  981,  981,
      566,  567,  981,    0,  565,  565,  562,  568,  567,  566,
      566,    0,  564,  565,  568,  569,    0,  567,  567,    0,
      570,  567,  569,  568,  568,  568,  571,  570,    0,    0,
      566,  569,  569,  571,    0,  569,  570,  570,  572,    0,
        0,    0,  571,  571,  643,  572,  573,    0,    0,  579,
      570,  569,  580,  573,  572,  572,  579,  571,    0,  580,
      643,  643,  573,  573,  585,  579,  579,  579,  580,  580,
      589,  585,  643,    0,  572,  575,  657,  589,  575,    0,

      585,  585,    0,  575,  575,  575,  589,  589,  575,  580,
      575,  647,  657,  657,  590,  575,  575,  591,  575,  575,
      575,  590,  589,    0,  591,  592,    0,  647,  647,  593,
      590,  590,  592,  591,  591,    0,  593,  647,    0,  638,
      591,  592,  592,  647,  590,  593,  593,  575,  575,  576,
        0,    0,  576,  591,    0,  638,  638,  576,  576,  576,
      592,  594,  576,    0,  576,    0,  593,    0,  594,  576,
      576,  827,  576,  576,  576,  638,  595,  594,  594,  596,
      827,  597,    0,  595,  827,  827,  596,  827,  597,    0,
        0,  594,  595,  595,    0,  596,  596,  597,  597,    0,

        0,  576,  576,  587,  596,    0,  587,    0,    0,    0,
        0,  587,  587,  587,  598,    0,  587,    0,  587,  595,
        0,  598,  601,  587,  587,  600,  587,  587,  587,  601,
      598,  598,  600,  599,    0,    0,  604,    0,  601,  601,
      599,  600,  600,  604,  598,  598,  646,  600,    0,  599,
      599,    0,  604,  604,  604,  587,  587,  588,  642,  601,
      588,    0,  646,  646,  646,  588,  588,  588,  599,  602,
      588,    0,  588,    0,  642,  642,  602,  588,  588,    0,
      588,  588,  588,  603,    0,  602,  602,  606,    0,  605,
      603,    0,    0,    0,  606,  642,  605,    0,    0,  603,

      603,  602,    0,  606,  606,  605,  605,  607,    0,  588,
      588,  605,    0,    0,  607,  608,    0,    0,  609,  603,
        0,    0,  608,  607,  607,  609,  610,  607,    0,  606,
      611,  608,  608,  610,  609,  609,  649,  611,  609,    0,
      608,    0,  610,  610,  610,    0,  611,  611,  613,    0,
        0,  613,  649,  649,    0,    0,  613,  613,  613,  615,
        0,  613,  649,  613,  651,    0,  615,  617,  613,  613,
      618,  613,  613,  613,  617,  615,  615,  618,    0,    0,
      651,  651,    0,  617,  617,    0,  618,  618,    0,  617,
      651,  620,    0,    0,    0,  615,    0,  619,  620,  618,

      613,  613,  614,  644,  619,  614,    0,  620,  620,    0,
      614,  614,  614,  619,  619,  614,    0,  614,  645,  644,
      644,    0,  614,  614,  621,  614,  614,  614,  620,  622,
        0,  621,  623,  619,  645,  645,  622,    0,  644,  623,
      621,  621,    0,  624,    0,  622,  622,  622,  623,  623,
      624,    0,  623,  645,  614,  614,  616,    0,    0,  624,
      624,  621,    0,  616,  625,    0,    0,  648,  623,    0,
        0,  625,  616,  616,  624,    0,    0,    0,    0,  616,
      625,  625,    0,  648,  648,    0,  616,    0,  616,  648,
        0,    0,  616,  616,  650,  616,  632,  632,  652,  632,

      625,    0,  632,    0,  632,    0,    0,  653,    0,  654,
      650,  650,    0,    0,  652,  652,    0,    0,  632,  633,
      655,    0,  633,  653,  653,  654,  654,  633,  633,  633,
      656,  650,  633,  654,  658,  652,  655,  655,    0,  659,
      633,  661,  633,  633,  633,  653,  656,  656,  660,  655,
      658,  658,    0,    0,    0,  659,  659,  661,  661,    0,
        0,    0,    0,  661,  660,  660,    0,    0,  662,  658,
      656,  633,  633,  635,  663,    0,  635,  659,    0,  660,
        0,  635,  635,  635,  662,  662,  635,  665,    0,    0,
      663,  663,  664,    0,  635,  667,  635,  635,  635,  666,

        0,  668,    0,  665,  665,  662,    0,  669,  664,  664,
      664,  667,  667,    0,    0,  666,  666,  668,  668,  670,
      667,  671,  665,  669,  669,  635,  635,  672,  669,  673,
      666,  674,    0,    0,    0,  670,  670,  671,  671,  668,
        0,  675,    0,  672,  672,  673,  673,  674,  674,  676,
      671,  677,    0,  678,    0,  670,  674,  675,  675,    0,
      679,    0,  681,    0,    0,  676,  676,  677,  677,  678,
      678,  680,    0,    0,  682,  676,  679,  679,  681,  681,
      677,  683,    0,  684,  681,  678,  679,  680,  680,  680,
      682,  682,  685,    0,  686,    0,    0,  683,  683,  684,

      684,  687,    0,  688,    0,  684,  689,    0,  685,  685,
      686,  686,  683,    0,  690,    0,  691,  687,  687,  688,
      688,    0,  689,  689,  692,    0,  693,    0,  689,  688,
      690,  690,  691,  691,  694,  690,  695,    0,  687,    0,
      692,  692,  693,  693,  696,    0,  693,    0,    0,  697,
      694,  694,  695,  695,  695,  698,  692,  699,    0,    0,
      696,  696,  700,    0,  694,  697,  697,  701,    0,    0,
      696,  698,  698,  699,  699,  698,  702,  699,  700,  700,
      703,    0,  704,  701,  701,  697,  705,    0,  701,  706,
        0,  707,  702,  702,  708,    0,  703,  703,  704,  704,

        0,  709,  705,  705,    0,  706,  706,  707,  707,    0,
      708,  708,  702,  711,    0,    0,  703,  709,  709,  710,
      704,  705,    0,  712,    0,  706,  713,    0,  714,  711,
      711,  708,  715,    0,    0,  710,  710,  710,  709,  712,
      712,    0,  713,  713,  714,  714,  716,    0,  715,  715,
      714,  717,    0,  718,    0,  719,    0,  713,    0,  720,
        0,    0,  716,  716,  716,  721,    0,  717,  717,  718,
      718,  719,  719,  722,  715,  720,  720,  720,    0,    0,
      723,  721,  721,  724,    0,  718,  725,  721,    0,  722,
      722,  719,    0,    0,    0,  722,  723,  723,    0,  724,

      724,  724,  725,  725,  729,  729,  725,  729,  734,    0,
      729,    0,  729,    0,    0,  734,  736,    0,    0,    0,
        0,    0,  735,  736,  734,  734,  729,  731,  734,  735,
      731,    0,  736,  736,    0,  731,  731,  731,  735,  735,
      731,    0,  731,    0,    0,    0,  737,    0,  731,  738,
      731,  731,  731,  737,  736,    0,  738,  739,  735,    0,
      740,    0,  737,  737,  739,  738,  738,  740,    0,    0,
        0,  741,  737,  739,  739,    0,  740,  740,  741,  731,
      731,  733,  850,    0,  733,    0,  738,  741,  741,  733,
      733,  733,  740,  742,  733,    0,  744,    0,  850,  850,

      742,  741,  733,  744,  733,  733,  733,    0,  741,  742,
      742,  743,  744,  744,    0,  745,    0,    0,  743,  746,
        0,  744,  745,  742,    0,    0,  746,  743,  743,    0,
        0,  745,  745,  733,  733,  746,  746,  747,    0,    0,
      748,  743,  749,    0,  747,  750,    0,  748,  743,  749,
      746,    0,  750,  747,  747,  747,  748,  748,  749,  749,
        0,  750,  750,  751,  749,  752,    0,  750,  753,    0,
      751,  754,  752,    0,    0,  753,  755,    0,  754,  751,
      751,  752,  752,  755,  753,  753,    0,  754,  754,    0,
      756,    0,  755,  755,  755,  751,  757,  756,  752,    0,

        0,  758,    0,  757,  759,  753,  756,  756,  758,  754,
      856,  759,  757,  757,    0,  760,    0,  758,  758,  756,
      759,  759,  760,  761,    0,    0,  856,  856,    0,  762,
      761,  760,  760,  760,  763,    0,  762,  757,    0,  761,
      761,  763,  764,    0,  761,  762,  762,    0,  765,  764,
      763,  763,    0,  766,  763,  765,    0,    0,  764,  764,
      766,    0,    0,    0,  765,  765,  767,    0,    0,  766,
      766,    0,    0,  767,  764,  766,    0,  768,  765,  769,
        0,    0,  767,  767,  768,  770,  769,    0,  767,    0,
      771,    0,  770,  768,  768,  769,  769,  771,    0,    0,

        0,  770,  770,  772,    0,  773,  771,  771,    0,  776,
      772,  770,  773,  857,  768,  769,  776,  774,    0,  772,
      772,  773,  773,  774,  774,  776,  776,  771,  775,  857,
      857,    0,  772,  774,  774,  775,    0,  773,    0,  852,
      780,  780,    0,  780,  775,  775,  780,    0,  780,    0,
        0,  787,  775,  788,    0,  852,  852,    0,  787,    0,
      788,  852,  780,  782,  853,    0,  782,  787,  787,  788,
      788,  782,  782,  782,    0,  788,  782,    0,  782,    0,
      853,  853,    0,  853,  782,    0,  782,  782,  782,  793,
      793,  799,  793,  787,    0,  793,  801,  793,  799,    0,

        0,    0,  798,  801,    0,    0,    0,  799,  799,  798,
        0,  793,  801,  801,    0,  782,  782,  784,  798,  798,
      784,    0,  798,    0,    0,  784,  784,  784,  800,  799,
      784,    0,  802,  801,    0,  800,    0,    0,  784,  802,
      784,  784,  784,  803,  800,  800,  804,    0,  802,  802,
      803,    0,    0,  804,  800,    0,    0,    0,    0,  803,
      803,  803,  804,  804,  802,    0,  805,    0,  804,  784,
      784,  795,    0,  805,  795,    0,    0,    0,    0,  795,
      795,  795,  805,  805,  795,    0,  795,    0,  805,    0,
      807,    0,  795,  806,  795,  795,  795,  807,  808,    0,

      806,  809,    0,    0,  810,  808,  807,  807,  809,  806,
      806,  810,    0,  855,  808,  808,  808,  809,  809,    0,
      810,  810,  810,  795,  795,  797,  806,  807,  797,  855,
      855,    0,    0,  797,  797,  797,  811,    0,  797,  855,
        0,    0,  809,  811,  812,    0,  797,    0,  797,  797,
      797,  812,  811,  811,    0,  813,    0,  811,  814,    0,
      812,  812,  813,    0,  812,  814,  815,    0,    0,    0,
        0,  813,  813,  815,  814,  814,  858,  797,  797,  816,
      814,  817,  815,  815,    0,  813,  816,    0,  817,    0,
        0,    0,  858,  858,  866,  816,  816,  817,  817,  826,

        0,  821,  821,  815,  821,  816,  826,  821,    0,  821,
      866,  866,  828,    0,  829,  826,  826,    0,  817,  828,
        0,  829,    0,  821,  823,  854,    0,  823,  828,  828,
      829,  829,  823,  823,  823,  826,  831,  823,    0,  823,
        0,  854,  854,  831,  829,  823,  854,  823,  823,  823,
        0,  832,  831,  831,    0,  833,    0,  834,  832,    0,
        0,  831,  833,    0,  834,    0,    0,  832,  832,    0,
        0,  833,  833,  834,  834,    0,  823,  823,  825,  834,
        0,  825,  832,    0,    0,    0,  825,  825,  825,  835,
        0,  825,  859,  833,    0,    0,  835,  836,    0,  825,

      837,  825,  825,  825,  836,  835,  835,  837,  859,  859,
        0,  838,    0,  836,  836,    0,  837,  837,  838,  851,
        0,    0,    0,  859,    0,  835,    0,  838,  838,  837,
      825,  825,  839,    0,  836,  851,  851,  861,    0,  839,
        0,  851,    0,  838,  840,  840,    0,  840,  839,  839,
      840,  851,  840,  861,  861,  860,  839,  844,  844,    0,
      844,    0,    0,  844,    0,  844,  840,  843,  861,    0,
      843,  860,  860,    0,    0,  843,  843,  843,    0,  844,
      843,  862,  847,  847,  860,    0,  847,    0,  843,    0,
      843,  843,  843,  867,  847,  863,  847,  862,  862,  862,

      849,  849,    0,  849,    0,    0,  849,    0,  849,  867,
      867,  863,  863,  867,    0,    0,    0,    0,    0,  843,
      843,  846,  849,  864,  846,  847,  847,    0,    0,  846,
      846,  846,  863,  865,  846,  868,    0,  869,    0,  864,
      864,  864,  846,    0,  846,  846,  846,    0,    0,  865,
      865,  868,  868,  869,  869,  870,    0,    0,    0,  869,
      871,    0,  872,    0,  865,  874,    0,    0,  873,    0,
        0,  870,  870,  846,  846,  875,  871,  871,  872,  872,
        0,  874,  874,  872,  873,  873,  871,  876,    0,  873,
      870,  875,  875,  877,    0,  878,    0,  875,  879,    0,

      874,  880,    0,  876,  876,    0,    0,    0,    0,  877,
      877,  878,  878,  878,  879,  879,  881,  880,  880,  877,
      882,    0,  880,  883,  876,  884,    0,  885,    0,  886,
        0,  887,  881,  881,    0,    0,  882,  882,    0,  883,
      883,  884,  884,  885,  885,  886,  886,  887,  887,  888,
        0,  886,    0,  889,  881,    0,  890,    0,  891,  883,
      892,    0,  893,    0,    0,  888,  888,  894,  885,  889,
      889,  887,  890,  890,  891,  891,  892,  892,  893,  893,
      888,  895,  889,  894,  894,    0,  896,    0,  897,    0,
      898,  890,  899,    0,  891,  891,  894,  895,  895,  900,

        0,  895,  896,  896,  897,  897,  898,  898,  899,  899,
      901,    0,  898,  902,  899,  900,  900,  903,    0,  897,
      904,    0,    0,  905,    0,  906,  901,  901,  900,  902,
      902,    0,  907,  903,  903,    0,  904,  904,  902,  905,
      905,  906,  906,  908,    0,  905,  909,  901,  907,  907,
      910,    0,  907,    0,  903,  911,    0,  912,    0,  908,
      908,  913,  909,  909,    0,    0,  910,  910,    0,  908,
        0,  911,  911,  912,  912,    0,    0,  913,  913,  914,
        0,  911,  915,    0,  916,  913,  910,  917,    0,  918,
        0,  919,  912,  920,    0,  914,  914,  921,  915,  915,

      916,  916,  922,  917,  917,  918,  918,  919,  919,  920,
      920,  923,    0,  921,  921,  916,    0,    0,  922,  922,
        0,    0,    0,  917,    0, 1033,  919,  923,  923,    0,
        0,    0,  924,  924,    0,  924,  923,  922,  924,    0,
      924, 1033, 1033, 1038,  927,  927,    0,  927,    0,    0,
      927,    0,  927,    0,  924,  926,    0,    0,  926, 1038,
     1038,    0,    0,  926,  926,  926,  927,    0,  926,    0,
      926,  931,  931,    0, 1038,  931,  926,    0,  926,  926,
      926,  933,  933,  931,  933,  931,    0,  933,  935,  933,
     1008, 1008, 1008, 1008,  934,  935, 1008,    0,    0,    0,

        0,  934,    0,  933,  935,  935,    0,  926,  926,  930,
      934,  934,  930,    0,  931,  931,    0,  930,  930,  930,
      934,  936,  930,    0,  937,    0,    0,    0,  936,  938,
      930,  937,  930,  930,  930,  939,  938,  936,  936, 1035,
      937,  937,  939,  940,    0,  938,  938,    0,  937,    0,
      940,  939,  939, 1042,    0, 1035, 1035,    0,  936,  940,
      940,  930,  930,  932,  938,    0,  932,    0,  940, 1042,
     1042,  932,  932,  932,  941, 1035,  932,    0,  932,    0,
        0,  941, 1042,    0,  932,  942,  932,  932,  932,    0,
      941,  941,  942,  943,    0,    0,  944,    0,    0,  941,

      943,  942,  942,  944,  945,    0,  942,    0,    0,  943,
      943,  945,  944,  944,    0,  932,  932,  946,    0,  947,
      945,  945,    0,    0,  946,  949,  947,  944,    0,    0,
      943,  948,  949,  946,  946,  947,  947,  950,  948,  945,
        0,  949,  949,  951,  950,  952,  949,  948,  948,  946,
      951,  947,  952,  950,  950,    0,  953,  948,    0,  951,
      951,  952,  952,  953, 1027, 1027, 1027, 1027,  954,    0,
     1027,  955,  953,  953,  950,  954,  959,    0,  955,    0,
      953,    0,  956,  959,  954,  954,  954,  955,  955,  956,
      957,    0,  959,  959,  958,    0,  959,  957,  956,  956,

        0,  958,  960,    0,    0,    0,  957,  957,  955,  960,
      958,  958,    0,  961,  956,  958,  962,    0,  960,  960,
      961,  963,  957,  962,  964,    0,    0,    0,  963,  961,
      961,  964,  962,  962,  962,    0, 1040,  963,  963,  965,
      964,  964,  964,  963,  966,    0,  965,  967,    0,    0,
        0,  966, 1040, 1040,  967,  965,  965,  963, 1040, 1034,
      966,  966,    0,  967,  967,  968,  968,    0,  968,  966,
        0,  968,    0,  968,  965, 1034, 1034,  971,  971,    0,
      971,    0,    0,  971,    0,  971,    0,  968,  970,    0,
     1047,  970,    0,    0, 1034,    0,  970,  970,  970,  971,

        0,  970,    0,  970,  975,  975, 1047, 1047,  975,  970,
     1047,  970,  970,  970,  977,  977,  975,  977,  975,    0,
      977,  978,  977, 1032, 1032, 1032, 1032,  979,  978, 1032,
        0,    0,    0,    0,  979,    0,  977,  978,  978,    0,
      970,  970,  972,  979,  979,  972,    0,  975,  975,    0,
      972,  972,  972,  980,  980,  972,  980,  972,    0,  980,
        0,  980,  979,  972,    0,  972,  972,  972,  983,  983,
        0,  983,    0,    0,  983,  980,  983,    0,    0,  987,
      987,  989,  989,  987,  989,  990,    0,  989,    0,  989,
      983,  987,  990,  987,  972,  972,  974, 1037,    0,  974,

        0,  990,  990,  989,  974,  974,  974,    0,  991,  974,
        0,  990,    0, 1037, 1037,  991,    0,  974,    0,  974,
      974,  974,  987,  987,  991,  991,    0,  992,    0, 1037,
      994,    0, 1007, 1007,  992, 1007,    0,  994, 1007, 1044,
     1007,    0,    0,  992,  992,  991,  994,  994,  974,  974,
      976,  992,    0,  976, 1007, 1044, 1044,    0,  976,  976,
      976,  993,    0,  976,    0,  976, 1039,  994,  993,  995,
     1044,  976,    0,  976,  976,  976,  995,  993,  993,    0,
        0,  996, 1039, 1039,    0,  995,  995, 1039,  996, 1051,
        0,    0,  997,    0,  998,    0,  993,  996,  996,  997,

      995,  998,  976,  976,  982, 1051, 1051,  982,  997,  997,
      998,  998,  982,  982,  982,  999,  996,  982,    0,  982,
      998,    0,  999, 1000,  997,  982, 1001,  982,  982,  982,
     1000,  999,  999, 1001, 1018,    0,    0,    0, 1002, 1000,
     1000, 1018, 1001, 1001, 1001, 1002, 1003, 1000, 1041,    0,
     1018, 1018,  999, 1003, 1002, 1002,  982,  982,  984, 1018,
        0,  984, 1003, 1003, 1041, 1041,  984,  984,  984, 1004,
     1041,  984, 1043,  984,    0, 1002, 1004, 1005, 1003,  984,
     1006,  984,  984,  984, 1005, 1004, 1004, 1006, 1043, 1043,
     1004,    0,    0, 1005, 1005, 1005, 1006, 1006, 1043,    0,

        0,    0, 1006,    0, 1014, 1014,    0,    0, 1014,    0,
      984,  984,  986,    0,    0,  986, 1014,    0, 1014,    0,
      986,  986,  986, 1010, 1010,  986, 1010,    0,    0, 1010,
        0, 1010,    0,  986,    0,  986,  986,  986, 1016, 1016,
     1036, 1016,    0,    0, 1016, 1010, 1016, 1014, 1014,    0,
        0, 1017,    0,    0,    0, 1019, 1036, 1036, 1017,    0,
     1016,    0, 1019,    0,  986,  986,  988, 1017, 1017,  988,
        0, 1019, 1019, 1017,  988,  988,  988, 1020, 1036,  988,
     1019,  988,    0, 1045, 1020, 1021,    0,  988, 1022,  988,
      988,  988, 1021, 1020, 1020, 1022, 1023,    0, 1020, 1045,

     1045, 1021, 1021, 1023, 1022, 1022, 1021,    0, 1022, 1024,
     1028, 1028, 1023, 1023, 1028,    0, 1024,    0,  988,  988,
     1009, 1045, 1028, 1009, 1028, 1024, 1024, 1024, 1009, 1009,
     1009, 1025, 1023, 1009,    0, 1009,    0,    0, 1025,    0,
        0, 1009,    0, 1009, 1009, 1009,    0, 1025, 1025, 1026,
     1026,    0, 1026, 1028, 1028, 1026,    0, 1026,    0, 1030,
     1030,    0, 1030, 1049,    0, 1030, 1025, 1030,    0,    0,
        0, 1026, 1009, 1009, 1011,    0,    0, 1011,    0, 1049,
     1049, 1030, 1011, 1011, 1011, 1031, 1031, 1011, 1031, 1011,
        0, 1031, 1046, 1031, 1048, 1011, 1050, 1011, 1011, 1011,

     1049,    0,    0,    0,    0, 1054,    0, 1031, 1046, 1046,
     1048, 1048, 1050, 1050, 1046,    0,    0, 1052, 1050,    0,
     1048, 1054, 1054,    0,    0,    0, 1011, 1011, 1013, 1053,
        0, 1013,    0, 1052, 1052,    0, 1013, 1013, 1013, 1052,
     1055, 1013, 1058,    0,    0, 1053, 1053,    0, 1056, 1013,
     1057, 1013, 1013, 1013, 1059,    0, 1055, 1055, 1058, 1058,
     1053,    0, 1060,    0, 1056, 1056, 1057, 1057,    0,    0,
     1059, 1059, 1057, 1058,    0,    0,    0, 1055, 1060, 1060,
     1013, 1013, 1015, 1056, 1061, 1015,    0,    0,    0,    0,
     1015, 1015, 1015, 1062,    0, 1015, 1063, 1015, 1064,    0,

     1061, 1061,    0, 1015,    0, 1015, 1015, 1015,    0, 1062,
     1062, 1065, 1063, 1063, 1064, 1064, 1066,    0, 1063,    0,
     1061, 1068,    0,    0, 1064, 1067,    0, 1065, 1065,    0,
        0, 1069, 1066, 1066, 1015, 1015, 1029, 1068, 1068, 1029,
        0, 1067, 1067, 1068, 1029, 1029, 1029, 1069, 1069, 1029,
     1067,    0,    0, 1070,    0,    0, 1071, 1029, 1072, 1029,
     1029, 1029, 1073,    0, 1074,    0, 1075,    0, 1069, 1070,
     1070, 1070, 1071, 1071, 1072, 1072, 1076,    0, 1073, 1073,
     1074, 1074, 1075, 1075, 1077,    0, 1074, 1078, 1029, 1029,
     1079,    0, 1076, 1076, 1080,    0, 1081,    0, 1082,    0,

     1077, 1077, 1077, 1078, 1078, 1083, 1079, 1079, 1084, 1078,
     1080, 1080, 1081, 1081, 1082, 1082,    0,    0,    0, 1085,
        0, 1083, 1083,    0, 1084, 1084, 1086, 1079,    0,    0,
     1087,    0, 1088, 1081,    0, 1085, 1085,    0, 1166,    0,
     1082, 1085, 1086, 1086,    0, 1084, 1087, 1087, 1088, 1088,
     1089, 1089,    0, 1089, 1166, 1166, 1089,    0, 1089,    0,
        0, 1086, 1091, 1091,    0, 1087, 1091, 1090, 1090, 1090,
     1090,    0, 1089, 1090, 1091,    0, 1091, 1093, 1093,    0,
     1093, 1094, 1094, 1093, 1094, 1093,    0, 1094,    0, 1094,
     1095, 1095, 1095, 1095,    0, 1096, 1095,    0,    0, 1093,

        0,    0, 1096, 1094,    0, 1091, 1091, 1092,    0,    0,
     1092, 1096, 1096, 1096,    0, 1092, 1092, 1092, 1097,    0,
     1092,    0, 1092,    0,    0, 1097, 1098,    0, 1092,    0,
     1092, 1092, 1092, 1098, 1097, 1097, 1097, 1099,    0, 1100,
        0, 1101, 1098, 1098, 1099, 1102, 1100,    0, 1101,    0,
        0, 1165, 1102, 1099, 1099, 1100, 1100, 1101, 1101, 1092,
     1092, 1102, 1102, 1103, 1098, 1100, 1104, 1165, 1165, 1105,
     1103, 1106,    0, 1104, 1107, 1099, 1105, 1165, 1106, 1103,
     1103, 1107, 1104, 1104,    0, 1105, 1105, 1106, 1106,    0,
     1107, 1107,    0, 1165, 1104, 1108,    0, 1109,    0,    0,

     1107,    0, 1108,    0, 1109,    0, 1105,    0, 1106, 1110,
        0, 1108, 1108, 1109, 1109, 1111, 1110, 1108,    0, 1109,
     1112,    0, 1111, 1113,    0, 1110, 1110, 1112, 1114,    0,
     1113, 1111, 1111,    0,    0, 1114, 1112, 1112,    0, 1113,
     1113,    0,    0,    0, 1114, 1114, 1110, 1115, 1112, 1116,
     1114,    0, 1117,    0, 1115, 1118, 1116,    0, 1113, 1117,
        0,    0, 1118, 1115, 1115, 1116, 1116,    0, 1117, 1117,
     1119, 1118, 1118, 1120,    0, 1121, 1117, 1119, 1116,    0,
     1120, 1129, 1121,    0, 1115,    0, 1119, 1119, 1129, 1120,
     1120, 1121, 1121, 1122, 1122,    0, 1122, 1129, 1129, 1122,

        0, 1122, 1123, 1123, 1123, 1123, 1119, 1121, 1123,    0,
     1120,    0, 1124, 1124,    0, 1122, 1124, 1126, 1126,    0,
     1126, 1169,    0, 1126, 1124, 1126, 1124, 1127, 1127,    0,
     1127,    0,    0, 1127,    0, 1127,    0, 1169, 1169, 1126,
     1128, 1128, 1128, 1128, 1130, 1130, 1128, 1130,    0, 1127,
     1130,    0, 1130,    0,    0, 1124, 1124, 1131, 1131, 1131,
     1131, 1132, 1132, 1131,    0, 1132, 1130,    0, 1134, 1134,
        0, 1134,    0, 1132, 1134, 1132, 1134, 1135, 1135,    0,
     1135, 1167,    0, 1135, 1137, 1135, 1136, 1136, 1136, 1136,
     1134, 1137, 1136,    0,    0,    0, 1138, 1167, 1167, 1135,

     1137, 1137, 1137, 1138, 1132, 1132,    0,    0, 1139,    0,
     1140,    0, 1138, 1138, 1138, 1139, 1141, 1140, 1167, 1172,
        0, 1142,    0, 1141, 1139, 1139, 1140, 1140, 1142,    0,
        0,    0, 1141, 1141, 1143, 1172, 1172, 1142, 1142,    0,
        0, 1143,    0,    0,    0, 1144, 1139, 1145, 1140,    0,
     1143, 1143, 1144, 1141, 1145,    0, 1143,    0, 1142, 1146,
        0, 1144, 1144, 1145, 1145, 1147, 1146, 1144, 1151, 1151,
     1151, 1151, 1147, 1148, 1151, 1146, 1146,    0,    0, 1149,
     1148, 1147, 1147,    0, 1145,    0, 1149, 1147,    0, 1148,
     1148,    0,    0,    0, 1146, 1149, 1149, 1168, 1150, 1150,

        0, 1150, 1148, 1149, 1150,    0, 1150, 1152, 1152, 1154,
     1154, 1152, 1154, 1168, 1168, 1154,    0, 1154,    0, 1152,
     1150, 1152, 1155, 1155,    0, 1155,    0,    0, 1155, 1157,
     1155, 1154, 1156, 1156, 1156, 1156, 1157, 1168, 1156,    0,
     1158,    0, 1159,    0, 1155, 1157, 1157, 1158,    0, 1159,
     1152, 1152,    0, 1160,    0, 1161, 1158, 1158, 1159, 1159,
     1160,    0, 1161,    0,    0, 1157, 1158, 1162, 1159, 1160,
     1160, 1161, 1161,    0, 1162, 1164, 1164, 1164, 1164, 1163,
     1163, 1164, 1163, 1162, 1162, 1163, 1170, 1163,    0, 1171,
     1160, 1161, 1173,    0, 1174,    0, 1175,    0, 1176,    0,

     1177, 1163, 1170, 1170, 1162, 1171, 1171,    0, 1173, 1173,
     1174, 1174, 1175, 1175, 1176, 1176, 1177, 1177, 1175, 1178,
     1171, 1170, 1179,    0, 1173, 1180,    0,    0,    0, 1181,
        0, 1174, 1182,    0,    0, 1178, 1178, 1177, 1179, 1179,
        0, 1180, 1180, 1183, 1179, 1181, 1181, 1184, 1182, 1182,
     1181, 1185,    0, 1186, 1182, 1187, 1178,    0,    0, 1183,
     1183, 1188,    0, 1184, 1184, 1183,    0, 1185, 1185, 1186,
     1186, 1187, 1187, 1189, 1186, 1190,    0, 1188, 1188, 1191,
        0,    0, 1184, 1192,    0, 1193,    0, 1194,    0, 1189,
     1189, 1190, 1190, 1195,    0, 1191, 1191, 1190,    0, 1192,

     1192, 1193, 1193, 1194, 1194, 1196,    0, 1197,    0, 1195,
     1195,    0,    0,    0, 1193, 1198, 1189, 1199,    0, 1200,
        0, 1196, 1196, 1197, 1197, 1201,    0, 1202, 1195, 1197,
     1203, 1198, 1198, 1199, 1199, 1200, 1200,    0,    0,    0,
        0, 1201, 1201, 1202, 1202,    0, 1203, 1203, 1204, 1204,
        0, 1204,    0, 1198, 1204, 1200, 1204,    0,    0, 1202,
     1206,    0, 1203, 1205, 1205, 1205, 1205, 1206, 1207, 1205,
     1204, 1208,    0, 1209,    0, 1207, 1206, 1206, 1208, 1210,
     1209,    0,    0, 1252, 1207, 1207, 1210, 1208, 1208, 1209,
     1209, 1211,    0, 1209,    0, 1210, 1210, 1206, 1211, 1252,

     1252,    0, 1212,    0, 1213, 1207, 1208, 1211, 1211, 1212,
     1210, 1213,    0,    0, 1249,    0, 1214,    0, 1212, 1212,
     1213, 1213, 1215, 1214, 1212,    0,    0,    0, 1216, 1215,
     1249, 1249, 1214, 1214, 1217, 1216, 1249,    0, 1215, 1215,
        0, 1217, 1218, 1215, 1216, 1216, 1213, 1214, 1219, 1218,
     1217, 1217, 1217, 1220,    0, 1219, 1221,    0, 1218, 1218,
     1220, 1222,    0, 1221, 1219, 1219,    0,    0, 1222, 1220,
     1220,    0, 1221, 1221,    0,    0, 1223, 1222, 1222, 1224,
        0, 1219, 1221, 1223, 1220,    0, 1224, 1225,    0,    0,
     1226,    0, 1223, 1223, 1225, 1224, 1224, 1226,    0, 1228,

     1228, 1228, 1228, 1225, 1225, 1228, 1226, 1226, 1227, 1227,
        0, 1227,    0,    0, 1227, 1224, 1227,    0, 1223,    0,
        0,    0, 1226, 1225,    0, 1229, 1229,    0, 1229,    0,
     1227, 1229, 1231, 1229, 1230, 1230, 1230, 1230, 1232, 1231,
     1230,    0,    0, 1233,    0, 1232, 1234, 1229, 1231, 1231,
     1233, 1235,    0, 1234, 1232, 1232,    0,    0, 1235, 1233,
     1233,    0, 1234, 1234, 1236,    0, 1234, 1235, 1235, 1231,
     1237, 1236, 1238, 1235,    0, 1232, 1239, 1237, 1233, 1238,
     1236, 1236,    0, 1239,    0,    0, 1237, 1237, 1238, 1238,
     1238, 1237, 1239, 1239, 1240,    0, 1241,    0,    0, 1242,

     1242, 1240, 1242, 1241,    0, 1242, 1236, 1242,    0, 1239,
     1240, 1240, 1241, 1241, 1243, 1243, 1243, 1243,    0, 1244,
     1243, 1242,    0, 1245,    0, 1240, 1244, 1246,    0,    0,
     1245,    0,    0,    0, 1246, 1244, 1244,    0, 1241, 1245,
     1245, 1247,    0, 1246, 1246, 1248,    0, 1250, 1247, 1251,
     1244, 1253, 1248, 1246, 1245, 1254,    0, 1247, 1247, 1255,
        0, 1248, 1248, 1250, 1250, 1251, 1251, 1253, 1253, 1250,
        0, 1254, 1254, 1256,    0, 1255, 1255, 1247,    0,    0,
     1251, 1248, 1257,    0, 1258,    0, 1254, 1259, 1253, 1256,
     1256, 1260,    0, 1261,    0, 1255, 1262,    0, 1257, 1257,

     1258, 1258, 1263, 1259, 1259, 1264, 1258, 1260, 1260, 1261,
     1261, 1265, 1262, 1262, 1261, 1266,    0,    0, 1263, 1263,
     1267, 1264, 1264, 1264, 1268,    0, 1269, 1265, 1265, 1270,
        0, 1266, 1266, 1265, 1263,    0, 1267, 1267, 1271,    0,
     1268, 1268, 1269, 1269, 1268, 1270, 1270, 1272,    0,    0,
        0, 1266, 1273,    0, 1271, 1271,    0,    0, 1274,    0,
     1275,    0,    0, 1272, 1272, 1274, 1270, 1275, 1273, 1273,
        0,    0, 1276,    0, 1274, 1274, 1275, 1275, 1277, 1276,
        0,    0,    0,    0, 1274, 1277, 1275, 1272, 1276, 1276,
     1276, 1279, 1273, 1278, 1277, 1277, 1280,    0, 1279,    0,

     1278,    0,    0, 1280, 1281,    0, 1280, 1279, 1279, 1278,
     1278, 1281, 1280, 1280,    0, 1277, 1282, 1278, 1283,    0,
     1281, 1281, 1279, 1282, 1284, 1283,    0,    0, 1281,    0,
     1285, 1284, 1282, 1282, 1283, 1283, 1286, 1285, 1287,    0,
     1284, 1284,    0, 1286, 1288, 1287, 1285, 1285,    0, 1284,
     1285, 1288, 1286, 1286, 1287, 1287, 1289,    0, 1290,    0,
     1288, 1288, 1291, 1289, 1292, 1290, 1288, 1286,    0, 1291,
        0, 1292, 1289, 1289, 1290, 1290, 1293,    0, 1291, 1291,
     1292, 1292, 1294, 1293, 1295,    0, 1290,    0, 1291, 1294,
     1292, 1295, 1293, 1293, 1293, 1296,    0, 1297, 1294, 1294,

     1295, 1295, 1296,    0, 1297, 1296,    0,    0,    0, 1298,
        0, 1296, 1296, 1297, 1297, 1295, 1298, 1299,    0, 1294,
     1300,    0, 1297, 1301, 1299, 1298, 1298, 1300,    0, 1298,
     1301, 1302,    0, 1299, 1299, 1303, 1300, 1300, 1302, 1301,
     1301, 1299, 1304,    0, 1300, 1305,    0, 1302, 1302, 1306,
        0, 1303, 1303, 1302, 1301,    0, 1307,    0, 1304, 1304,
     1308, 1305, 1305, 1309,    0, 1306, 1306, 1310,    0,    0,
     1311, 1303, 1307, 1307, 1312,    0, 1308, 1308, 1313, 1309,
     1309, 1314,    0, 1310, 1310, 1306, 1311, 1311,    0,    0,
     1312, 1312, 1315,    0, 1313, 1313, 1316, 1314, 1314, 1317,

        0,    0, 1318, 1314, 1319, 1312,    0, 1320, 1315, 1315,
     1311, 1319, 1316, 1316, 1320, 1317, 1317, 1315, 1318, 1318,
     1319, 1319, 1316, 1320, 1320, 1321,    0,    0, 1322,    0,
        0, 1323, 1321, 1324,    0, 1322, 1338,    0, 1323,    0,
     1324, 1321, 1321, 1319, 1322, 1322, 1320, 1323, 1323, 1324,
     1324,    0, 1338, 1338, 1325,    0, 1326,    0, 1327, 1324,
     1322, 1325, 1321, 1326,    0, 1327,    0,    0, 1323,    0,
     1325, 1325, 1326, 1326, 1327, 1327, 1325,    0,    0, 1328,
     1326, 1329,    0, 1330,    0,    0, 1328, 1341, 1329, 1342,
     1330,    0,    0,    0, 1327, 1328, 1328, 1329, 1329, 1330,

     1330, 1331,    0, 1341, 1341, 1342, 1342, 1332, 1331, 1333,
        0,    0, 1336,    0, 1332,    0, 1333, 1331, 1331, 1336,
     1329, 1342, 1330, 1332, 1332, 1333, 1333, 1334, 1336, 1336,
        0, 1339,    0, 1335, 1334, 1337, 1336,    0, 1331, 1332,
     1335, 1340, 1337, 1334, 1334, 1356, 1333, 1339, 1339, 1335,
     1335, 1337, 1337, 1334,    0, 1335, 1343, 1340, 1340, 1344,
        0, 1356, 1356, 1343,    0,    0, 1344, 1345, 1339,    0,
        0, 1337, 1343, 1343, 1345, 1344, 1344, 1340, 1343, 1346,
        0, 1344, 1347, 1345, 1345, 1348, 1346, 1349,    0, 1347,
     1350,    0, 1348, 1345, 1349, 1346, 1346, 1350, 1347, 1347,

        0, 1348, 1348, 1349, 1349, 1348, 1350, 1350, 1351,    0,
     1352,    0, 1353,    0, 1346, 1351,    0, 1352,    0, 1353,
        0,    0,    0,    0, 1351, 1351, 1352, 1352, 1353, 1353,
     1351, 1357, 1352, 1354,    0, 1355,    0, 1358, 1353,    0,
     1354,    0, 1355,    0, 1358,    0,    0, 1357, 1357, 1354,
     1354, 1355, 1355, 1358, 1358, 1355, 1359,    0, 1360,    0,
     1361,    0, 1357, 1359, 1362, 1360, 1363, 1361, 1354,    0,
        0, 1362, 1359, 1359, 1360, 1360, 1361, 1361, 1364,    0,
     1362, 1362, 1363, 1363, 1365, 1364, 1366,    0,    0,    0,
     1360, 1365,    0, 1366, 1364, 1364, 1362,    0,    0,    0,

     1365, 1365, 1366, 1366,    0,    0,    0,    0,    0, 1364,
        0,    0,    0,    0,    0, 1365, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373,    0,    0, 1373, 1373, 1373, 1374,    0,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375,
        0,    0, 1375, 1375, 1375, 1376,    0, 1376, 1376, 1376,

     1376, 1376, 1376, 1376, 1376, 1377, 1377,    0,    0, 1377,
     1377, 1377, 1378,    0, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1379, 1379,    0,    0, 1379, 1379, 1379, 1380,
        0, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
     1381,    0,    0, 1381, 1381, 1381, 1382,    0, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1383,    0,    0,    0,
     1383,    0, 1383, 1383,    0, 1383, 1383, 1384,    0,    0,
     1384, 1384,    0, 1384, 1384, 1384, 1384, 1384, 1385, 1385,
        0, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386,
        0, 1386, 1386,    0,    0, 1386,    0, 1386, 1387, 1387,

     1387, 1387, 1387,    0, 1387, 1388, 1388, 1388, 1388, 1388,
        0, 1388, 1389, 1389, 1389, 1389, 1389,    0, 1389, 1390,
     1390, 1390, 1390, 1390,    0, 1390, 1391, 1391, 1391, 1391,
     1391,    0, 1391, 1392,    0, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1393,    0,    0,    0, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1394,    0, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1395,    0,    0,    0, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1396,    0, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1397,    0,    0,    0, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1398,    0,    0,    0,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399,    0, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400,    0,    0,
        0, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401,    0,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,    0,
        0,    0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403,    0, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1404,    0,    0,    0, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1405,    0,    0,    0, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1406, 1406,    0, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1407,    0,    0,    0, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1408,    0,    0,    0, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409,    0, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1410,    0,    0,    0,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411,    0,    0,
        0, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412,    0,
        0,    0, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413,
     1413,    0, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1414,    0,    0,    0, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1415,    0,    0,    0, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1416, 1416,    0, 1416, 1416, 1416, 1416, 1416,

     1416, 1416, 1416, 1417,    0,    0,    0, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1418,    0,    0,    0, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1419, 1419,    0, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1420,    0,    0,    0,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421,    0,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422,
        0, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423,
        0,    0,    0, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1424,    0,    0,    0, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1425, 1425,    0, 1425, 1425, 1425, 1425, 1425, 1425,

     1425, 1425, 1426, 1426,    0,    0, 1426, 1426, 1426, 1427,
     1427,    0, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1428,    0,    0,    0, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1429, 1429,    0, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1430,    0,    0,    0, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1431,    0,    0,    0, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1432, 1432,    0, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1433, 1433,    0,    0, 1433,
     1433, 1433, 1434, 1434,    0, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1435,    0,    0,    0, 1435, 1435, 1435,

     1435, 1435, 1435, 1435, 1436, 1436,    0, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1437,    0,    0,    0, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1438,    0,    0,    0,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439,    0,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440,
        0,    0, 1440, 1440, 1440, 1441, 1441,    0, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1442,    0,    0,    0,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443,    0,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444,    0,
        0,    0, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445,

        0,    0,    0, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1446, 1446,    0, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1447, 1447,    0,    0, 1447, 1447, 1447, 1448, 1448,
        0, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449,
        0,    0,    0, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1450,    0,    0,    0, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1451, 1451,    0, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1452, 1452,    0, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1453, 1453,    0,    0, 1453, 1453, 1453,
     1454, 1454,    0, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1455,    0,    0,    0, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1456, 1456,    0, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1457, 1457,    0, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1458, 1458,    0,    0, 1458, 1458,
     1458, 1459, 1459,    0, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1460, 1460,    0, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1461, 1461,    0, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 3 interpreter.

    Copyright 1997-2020 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 28 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
#line 3020 "<stdout>"

#line 3022 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 120 "../../../src/Mixfix/lexer.ll"

#line 122 "../../../src/Mixfix/lexer.ll"
	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3265 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1368 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9075 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SLOAD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_LL;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_DSREWRITE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_CONST;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_STRATS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_SDS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_FILTERED;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
return KW_FOLD;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 259 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "{" "}" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 273 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FILTER)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DELAY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 280 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 128:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)		// both strategy attribute and declaration
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASTRAT)		// strategy attribute only
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DSTRAT)		// declaration of a strategy only
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 346 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 352 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SD)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 353 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CSD)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 356 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 357 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 358 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 359 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 360 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSIGN)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 361 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 362 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 363 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 185:
YY_RULE_SETUP
#line 370 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 376 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 382 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 388 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 394 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 400 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 406 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ASSIGN) && lexerBubble.length() >= minLength)
					    EXIT(KW_ASSIGN)
					  else
					    STORE
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 412 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 418 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 424 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 433 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 437 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 448 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 449 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 460 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 471 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 201:
YY_RULE_SETUP
#line 480 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 488 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 203:
YY_RULE_SETUP
#line 496 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 504 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 206:
YY_RULE_SETUP
#line 516 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 522 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 525 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 526 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 527 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 536 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 214:
YY_RULE_SETUP
#line 545 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 551 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 552 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 217:
YY_RULE_SETUP
#line 561 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 566 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 219:
YY_RULE_SETUP
#line 575 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 576 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 581 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 595 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 599 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 603 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 607 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 610 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 616 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 617 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 618 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 623 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4750 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1368 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1368 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1367);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 623 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"

