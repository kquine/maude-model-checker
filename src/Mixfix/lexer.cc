
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1310] =
    {   0,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,    0,    0,    0,    0,  201,  201,
        0,    0,  214,  212,  210,  211,  211,  109,  212,  107,
      109,  109,  109,  107,  108,  108,  109,  212,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,   15,  109,  109,  109,  109,  109,  109,  109,
      169,  212,  167,  167,  167,  169,  167,  167,  169,  212,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  115,  212,
      111,  115,  115,  113,  112,  111,  115,  212,  115,  113,

      117,  117,  116,  117,  117,  117,  117,  184,  212,  179,
      180,  184,  171,  184,  182,  170,  174,  172,  173,  184,
      212,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  181,  189,  189,  189,  189,  189,
      187,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  210,  186,  212,  211,  195,  196,
      197,  190,  194,  199,  198,  200,  201,  202,  209,  203,
      208,  208,  204,  205,  203,  206,  207,  210,  109,    0,
      109,    0,    0,    0,  109,  109,  108,    0,  109,  109,
      109,  109,  109,  109,  109,   11,  109,  109,  109,  109,

      109,  109,   45,  109,  109,   79,  109,  109,  109,  109,
      109,  109,  109,  109,   66,  109,  109,    5,  109,  109,
      109,  109,   14,  109,   78,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,   40,   76,  109,  109,  109,
      109,  109,  109,  109,  109,   80,  109,  109,  109,  109,
      109,  109,  109,  109,  109,    6,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  169,    0,  168,
      169,    0,    0,    0,  169,  169,  163,  166,  164,    0,
      169,  169,  169,  169,  169,  158,  169,  169,  169,  169,
      157,  146,  169,  169,  169,  169,  145,  169,  144,  169,

      169,  169,  169,  155,  169,  169,  169,  151,  169,  146,
      169,  159,  169,  169,  169,  169,  169,  118,  146,  169,
      165,  115,    0,  114,  115,    0,    0,    0,  115,  115,
        0,  110,  112,    0,    5,  210,  116,    0,    0,    0,
        0,    0,  184,    0,  183,  184,    0,    0,    0,  184,
      184,  175,    0,  184,  184,  184,  184,  184,  184,  184,
      184,  177,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  176,  189,    0,  188,  189,    0,    0,
        0,  189,  189,    0,  189,  189,  189,  185,  189,  189,
      185,  189,  189,  189,  185,  185,  189,  189,  185,  189,

      210,  186,    0,    0,    0,  195,  191,  192,  193,  199,
      201,  203,  203,  109,    0,    2,    2,  109,  109,  109,
       71,  109,  109,  109,  109,  109,  109,   70,  109,  109,
      109,  109,  109,  109,  109,  109,   16,   79,  109,  109,
      109,  109,  109,  109,  109,  109,   31,  109,  109,  109,
      109,  109,  109,  109,  109,   78,  109,  109,    6,   29,
      109,  109,  109,   41,  109,   76,  109,  109,  109,  109,
      109,  109,   10,  109,  102,   19,  109,  109,   22,   80,
      109,  109,  109,   38,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,   77,  109,  109,

      109,  109,  109,  109,  109,  109,  169,    0,    2,    2,
      169,  169,  156,  169,  169,  160,  169,  169,  169,  169,
      169,  169,  169,  169,  123,  169,  146,  169,  161,  169,
      169,  169,  169,  169,  169,  139,  138,  169,  152,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  154,
      115,    0,    2,    2,    0,    0,    0,    0,    2,    2,
      184,    0,    2,    2,  184,  184,  184,  184,  184,  184,
      184,  184,  178,  184,  184,  184,  184,  184,  184,  184,
      178,  184,  184,  184,  184,  184,  189,    0,    2,    2,
      189,  189,  189,  185,  185,  189,  189,  189,  189,  185,

        0,    0,    0,    0,    2,    2,    2,    1,    2,    2,
      109,  109,  109,   57,   47,  109,  109,  109,  109,  109,
      109,  109,  109,   54,   28,  109,   20,  109,  109,   95,
       23,  109,  109,   62,  109,   24,  109,  109,  109,  109,
      109,  109,    9,   27,  109,    3,  109,  109,  109,  109,
       18,  109,    7,  109,  109,   98,   13,  109,  109,  109,
      109,   15,  109,  109,  109,  109,  109,   80,  109,  109,
       39,  109,   75,   21,   25,  109,   93,  109,  109,  103,
       67,  109,  109,  109,  109,   77,  109,    8,  109,  109,
      109,   63,  109,  109,    0,    0,    2,    2,    2,    1,

        2,    2,  169,  169,  122,  169,  169,  134,  169,  169,
      161,  169,  169,  162,  169,  169,  119,  169,  169,  169,
      124,  169,  169,  125,  169,  169,  126,    3,  169,  169,
      153,  169,  169,  133,  128,  169,  169,  147,  169,  169,
      169,  169,  169,  169,  154,    0,    0,    2,    2,    2,
        1,    2,    2,    0,    0,    1,    0,    0,    2,    2,
        2,    1,    2,    2,  184,  178,  184,  184,  184,  184,
      184,  184,  178,  184,  178,  184,  184,  184,  184,  178,
      178,  184,  184,  184,    0,    0,    2,    2,    2,    1,
        2,    2,  189,  189,  185,  185,  189,  189,  189,  189,

      189,  185,  189,  189,  189,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,   92,  109,   65,  109,   96,
      109,   26,   46,   59,  109,  109,  109,  109,  109,  109,
       84,  109,   89,  109,  109,  109,  109,  109,  109,  109,
      109,   60,  109,  109,   82,   99,   34,  109,  109,  109,
      109,  109,  109,   64,   17,   56,  109,  109,   12,  109,
      109,  109,  109,  109,  109,  109,  109,   75,  109,  109,
       68,   55,  109,  109,   42,   37,  109,  109,   74,  109,
       94,   49,  109,  109,    2,    2,    1,    1,    1,    1,
        1,    2,    2,    2,  121,  149,  169,  169,  169,  140,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      120,  135,  169,  169,  169,  169,  169,  169,  169,  127,
      147,  169,  131,  169,  169,  169,  146,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    2,    2,    2,  178,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  178,    2,    2,    1,    1,    1,    1,
        1,    2,    2,    2,  185,  189,  189,  189,  189,  189,
      189,    1,    1,    1,    1,    1,    2,    2,   43,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,   86,  109,    4,  109,  109,  109,
      109,   99,   61,   73,   29,  109,  109,  101,   64,  109,
      109,  109,  109,   19,   91,   53,  109,   36,   50,  109,
      109,  109,  109,  109,   69,  109,  109,  109,  109,   35,
        1,    1,    1,    1,    1,    2,    2,  169,  169,  137,
      169,  169,    4,  132,  129,  169,  169,  169,  169,  169,
      169,  169,  138,  169,  169,  169,  169,  169,  169,  169,
      169,  169,    1,    1,    1,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    2,    2,  184,  184,  178,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,    1,

        1,    1,    1,    1,    2,    2,  189,  189,  189,  189,
      189,  189,    1,    1,  109,   65,  109,  109,   48,   83,
      109,   52,  109,  109,   20,  109,  109,   88,  109,  109,
      109,   87,  109,   72,   58,  109,  109,  100,   85,  109,
       22,  109,   21,  109,  109,   81,   33,   44,  109,  109,
        1,    1,  169,  169,  169,  169,  169,  141,  169,  169,
      169,  169,  139,  169,  142,  169,  169,  169,  136,  169,
      169,  148,  169,    1,    1,    1,    1,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,    1,    1,
      189,  189,  189,  189,  185,  109,  109,  109,   83,  109,

      109,   28,   51,   23,  109,   24,  109,  109,  109,  109,
      102,  109,   25,  109,   32,  109,  109,  169,  169,  169,
      169,  169,  169,  169,  169,  125,  130,  169,  169,  169,
      131,  150,  148,  169,  184,  184,  184,  184,  184,  184,
      184,  184,  189,  189,  189,  185,  109,   57,   97,  109,
       54,   62,  109,  109,   18,  109,  109,  109,  105,   30,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  143,
      184,  184,  184,  184,  184,  184,  184,  189,  189,  106,
      109,  109,  104,  109,  169,  169,  169,  169,  124,  169,
      128,  150,  184,  184,  184,  184,  184,   90,  109,  121,

      122,  169,  133,  184,   55,  169,  184,  137,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1397] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  747, 8568,  174, 8568, 8568,  309,  317, 8568,
      341, 8568,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  484,  431,  463,  470,  467,  508,  515,
      529,  538,  474,  550,  568,  569,  565,  592,  558,  599,
      617,  321, 8568,  619,  621,  639,  642,  650,  647,  667,
      670,  713,  674,  676,  702,  678,  751,  708,  739,  759,
      773,  777,  791,  797,  811,  716,  753,  824,  832,  324,
     8568,  844,  846,  871,  873,  838,  876,  893,  884, 8568,

     8568,  916, 8568,  930,  946,  698,  693,  946,  366, 8568,
     8568,  948, 8568,  950,  954,  968,  974, 8568, 8568,  972,
      991,  994, 1000,  998, 1012, 1033, 1038, 1046, 1060, 1071,
     1084, 1086, 1092, 1041, 8568, 8568, 1097,  372, 1115, 1117,
     1120, 1128, 1137, 1183, 1118, 1154, 1156, 1160, 1186, 1191,
     1194, 1214, 1220, 1222, 1264, 8568, 1278, 1292,    0, 8568,
     8568, 8568,  464,    0, 8568, 8568,    0, 8568, 8568,    0,
     8568, 8568, 8568, 8568,  659, 8568, 8568,  188,  417,  430,
      627, 1264,  442,  405,  783, 1089, 1216, 1291,  805,  705,
     1294,  842,  886,  960,  904,  785, 1009, 1228, 1141, 1283,

     1302, 1315,  918, 1322, 1325, 1094, 1327, 1330, 1337, 1340,
     1345, 1359, 1366, 1368, 1370, 1373, 1377, 1388, 1396, 1398,
     1400, 1407, 1411, 1418, 1420, 1430, 1426, 1432, 1441, 1445,
     1452, 1454, 1463, 1465, 1475, 1477, 1483, 1486, 1489, 1498,
     1495, 1516, 1501, 1509, 1528, 1534, 1536, 1540, 1543, 1555,
     1562, 1566, 1573, 1584, 1593, 1596, 1602, 1599, 1604, 1606,
     1608, 1611, 1631, 1634, 1636, 1638, 1642, 1661,  481, 1663,
     1665, 1683,  492,  415, 1686, 1694, 1690, 1692, 1705, 1718,
     1718, 1730, 1732, 1736, 1744, 1765, 1769, 1771, 1773, 1784,
     1792, 1795, 1806, 1814, 1817, 1842, 1819, 1840, 1855, 1861,

     1863, 1869, 1874, 1882, 1871, 1893, 1896, 1914, 1911, 1919,
     1922, 1937, 1942, 1945, 1948, 1956, 1969, 1971, 1974, 1982,
     1994, 1996,  522, 2002, 2007, 2020,  528,  466, 2027, 2031,
     2056, 8568, 2060, 2027, 2039, 2085, 8568, 2099,  694,  682,
      670,  665, 2099,  535, 2101, 2103, 2085,  543,  517, 2121,
     2125, 2127, 2134, 2145, 2153, 2148, 2150, 2156, 2182, 2185,
     2190, 2188, 2203, 2211, 2216, 2224, 2229, 2235, 2249, 2257,
     2268, 2280, 2282, 2288, 2293,  563, 2306, 2308, 2326,  587,
      524, 2329, 2337, 2346,  973, 2349, 2357, 2362, 2368, 2382,
     2388, 2393, 2401, 2407, 2412, 2420, 2434, 2438, 2442, 2446,

     2477, 8568, 2491,  617,  574,    0, 8568, 8568, 8568,    0,
        0,    0, 8568, 1724,  611, 2506, 2560, 1742, 1827, 1916,
     1850, 2158, 2221, 2057, 2461, 2318, 2303, 2255, 2493, 2496,
     2516, 2514, 2527, 2540, 2542, 2554, 2563, 2566, 2568, 2574,
     2593, 2581, 2595, 2606, 2613, 2621, 2617, 2624, 2626, 2628,
     2631, 2646, 2649, 2656, 2658, 2660, 2664, 2667, 2669, 2671,
     2682, 2692, 2697, 2701, 2703, 2710, 2712, 2715, 2721, 2730,
     2733, 2735, 2741, 2755, 2759, 2762, 2764, 2766, 2773, 2777,
     2787, 2795, 2797, 2799, 2801, 2805, 2823, 2820, 2827, 2833,
     2835, 2838, 2842, 2845, 2847, 2860, 2871, 2875, 2879, 2883,

     2886, 2889, 2893, 2904, 2897, 2915, 2918,  665, 2961, 3015,
     2926, 2948, 2930, 2972, 2565, 2975, 2983, 2987, 3012, 3039,
     3047, 3050, 3058, 3062, 3081, 3084, 3089, 3092, 3095, 3103,
     3116, 3124, 3128, 3130, 3136, 3142, 3148, 3156, 3167, 3169,
     3175, 3180, 3193, 3198, 3206, 3212, 3220, 3225, 3231, 3243,
     3251,  675, 3288, 3342,  568,  558,  558,  545,  529,  508,
     3254,  684, 3396, 3450, 3265, 3257, 3291, 3306, 3302, 3269,
     3329, 3353, 3364, 3376, 3414, 3368, 3410, 3416, 3418, 3453,
     3422, 3461, 3472, 3474, 3480, 3498, 3501,  714, 3527, 3581,
     3530, 3627, 3504, 3538, 3541, 3552, 3563, 3585, 3599, 3603,

      497,  471,  726,  619,    0,  453, 3640, 3675,  364, 3729,
     2997, 3009, 3036, 2954, 2969, 2995, 3134, 3335, 3574, 3607,
     3294, 3629, 3595, 3420, 3459, 3631, 3493, 3350, 3507, 3021,
     3636, 3656, 3533, 3662, 3665, 3669, 3684, 3689, 3695, 3722,
     3732, 3735, 3693, 3737, 3740, 3750, 3755, 3759, 3761, 3763,
     3769, 3782, 3784, 3790, 3792, 3794, 3796, 3802, 3815, 3820,
     3817, 3827, 3829, 3835, 3840, 3847, 3850, 3858, 3862, 3868,
     3873, 3880, 3883, 3886, 3891, 3893, 3895, 3898, 3904, 3901,
     3923, 3925, 3927, 3930, 3934, 3937, 3945, 3948, 3957, 3963,
     3966, 3970, 3976, 3981,  749,  638,  442, 4007,  440, 4030,

      527, 4084, 3996, 4017, 4011, 4041, 4044, 4052, 4055, 4066,
     4088, 4091, 4106, 4109, 4117, 4120, 4135, 4139, 4143, 4147,
     4166, 4168, 4170, 4174, 4193, 4195, 4197, 4216, 4221, 4224,
     4218, 4242, 4244, 4247, 4250, 4268, 4271, 4279, 4293, 4297,
     4282, 4305, 4323, 4325, 4328,  765,  647,  438, 4355,  423,
     4378,  590, 4432,  429,  423,    0,  796,  822,  398, 4367,
      391, 4486,  636, 4540, 4382, 4390, 4403, 4401, 4409, 4435,
     4414, 4439, 4450, 4458, 4489, 4463, 4508, 4512, 4527, 4551,
     4554, 4562, 4566, 4580,  856,  832,  388, 4608,  362, 4631,
      719, 4685, 4588, 1033, 4602, 4613, 4634, 4642, 4653, 4645,

     4656, 4688, 4692, 4696, 4710, 4740, 2946,    0, 4763, 4752,
      332, 4817, 2490,  320, 4777, 4023, 4468, 4172, 4301, 4094,
     4141, 4203, 4253, 4358, 4521, 4371, 4594, 4598, 4706, 4720,
     4396, 4494, 4443, 4767, 4548, 4725, 4771, 4781, 4757, 4665,
     4810, 4785, 4799, 4821, 4823, 4829, 4825, 4831, 4835, 4850,
     4853, 4858, 4860, 4863, 4881, 4885, 4888, 4891, 4893, 4896,
     4903, 4906, 4914, 4916, 4921, 4918, 4940, 4942, 4944, 4949,
     4951, 4954, 4969, 4972, 4974, 4976, 4978, 4981, 4983, 5002,
     5005, 5007, 5010, 5013, 5041, 3209, 5064, 5054,    0,  313,
     5118, 5071, 5172, 5090, 5044, 5089, 5095, 5121, 5136, 5139,

     5141, 5144, 5175, 5183, 5186, 5194, 5206, 5208, 5220, 5228,
     5232, 5240, 5243, 5246, 5254, 5266, 5268, 5272, 5287, 5292,
     5295, 5306, 5310, 5318, 5314, 5337, 5339, 5350, 3830, 5373,
     5384,    0,  306, 5427, 5356, 5481, 5399, 5410, 5099, 5535,
     5438, 5589,  296, 5643, 5410, 5697, 5453, 5449, 5462, 5484,
     5503, 5495, 5539, 5506, 5517, 5547, 5558, 5561, 5592, 5600,
     5614, 5611, 5647, 5650, 5676, 5132, 5751, 5686, 5805,  289,
     5859, 5704, 5913, 5723, 5722, 5754, 5765, 5773, 5808, 5785,
     5823, 5733, 5465, 5833, 5967, 5870, 5887, 5631, 5015, 5280,
     5603, 5180, 5528, 5404, 5566, 5873, 5894, 5058, 5636, 5760,

     5917, 5691, 5816, 5919, 5677, 5826, 5881, 5906, 5921, 5931,
     5944, 5883, 5949, 5954, 5976, 5978, 5981, 5985, 5987, 5989,
     5999, 6008, 6010, 6013, 6017, 6019, 6022, 6031, 6037, 6040,
     6043, 6046, 6050, 6052, 6055, 6061, 6064, 6073, 6075, 6079,
     6107, 6119, 6114,    0, 6130, 6139, 6148, 6138, 6150, 6162,
     6164, 6170, 6175, 6188, 6190, 6194, 6208, 6212, 6214, 6216,
     6220, 6234, 6239, 6247, 6252, 6260, 6272, 6274, 6278, 6297,
     6299, 6305, 6325, 6334, 6329,    0, 6348, 6357, 6366, 6377,
     6386, 6381,    0, 6395, 6405, 6418, 6414, 6417, 6385, 6420,
     6422, 6440, 6444, 6446, 6448, 6467, 6471, 6475, 6473, 6503,

     6513, 6508,    0, 6527, 6536, 6545, 6542, 6544, 6547, 6555,
     6567, 6569, 6595, 6604, 6565, 6135, 6594, 6284, 6351, 6600,
     6499, 6604, 6608, 6612, 6622, 6626, 6630, 6632, 6637, 6644,
     6641, 6651, 6656, 6662, 6664, 6669, 6671, 6674, 6682, 6684,
     6689, 6692, 6694, 6702, 6704, 6714, 6716, 6722, 6728, 6734,
     6748, 6761, 6757, 6761, 6765, 6763, 6785, 6788, 6790, 6803,
     6808, 6811, 6814, 6826, 6834, 6840, 6846, 6848, 6852, 6854,
     6872, 6875, 6878, 6905, 6920, 6909, 6932, 6921, 6929, 6932,
     6934, 6940, 6952, 6963, 6965, 6971, 6985, 6989, 7015, 7005,
     7011, 7017, 7019, 7023, 7037, 7041, 7049, 6944, 6867, 7051,

     7060, 6974, 7062, 7064, 7069, 7082, 7084, 7087, 7092, 7094,
     7096, 7102, 7107, 7115, 7117, 7120, 7125, 7128, 7140, 7146,
     7151, 7169, 7173, 7184, 7192, 7195, 7198, 7203, 7206, 7217,
     7225, 7229, 7237, 7240, 7243, 7255, 7258, 7263, 7266, 7277,
     7285, 7288, 7296, 7299, 7311, 7314, 7161, 7155, 7309, 7317,
     7322, 7324, 7329, 7332, 7335, 7343, 7350, 7354, 7356, 7361,
     7374, 7376, 7379, 7382, 7387, 7401, 7412, 7423, 7425, 7436,
     7438, 7449, 7457, 7451, 7462, 7475, 7480, 7493, 7498, 7368,
     7490, 7495, 7405, 7503, 7516, 7529, 7537, 7540, 7542, 7548,
     7560, 7562, 7566, 7574, 7585, 7587, 7593, 7508, 7589, 7607,

     7612, 7618, 7626, 7630, 7599, 7632, 7638, 7644, 8568, 7678,
     7689, 7700, 7711, 7722, 7729, 7739, 7746, 7756, 7763, 7773,
     7780, 7790, 7797, 7807, 7818, 7829, 7840, 7850, 7856, 7863,
     7870, 7877, 7884, 7894, 7905, 7915, 7926, 7936, 7947, 7958,
     7968, 7979, 7989, 8000, 8011, 8022, 8033, 8044, 8055, 8066,
     8077, 8088, 8099, 8110, 8121, 8132, 8143, 8154, 8165, 8176,
     8187, 8198, 8209, 8220, 8231, 8242, 8253, 8260, 8271, 8282,
     8293, 8304, 8315, 8326, 8337, 8348, 8359, 8370, 8377, 8388,
     8399, 8410, 8421, 8432, 8443, 8450, 8461, 8472, 8483, 8494,
     8505, 8512, 8523, 8534, 8545, 8556

    } ;

static yyconst flex_int16_t yy_def[1397] =
    {   0,
     1309,    1, 1309,    3, 1309,    5, 1310, 1310, 1309,    9,
     1309,   11,   11,   13, 1311, 1311, 1312, 1312, 1313, 1313,
     1314, 1314, 1309, 1309, 1309, 1309, 1309, 1315, 1316, 1309,
     1315, 1309, 1315, 1315, 1315, 1315, 1315, 1309, 1315, 1315,
     1315, 1315, 1315,   41, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315,   41, 1315, 1315, 1315, 1315, 1315,
     1317, 1318, 1309, 1317, 1317, 1317, 1317, 1317, 1317, 1309,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1319, 1320,
     1309, 1319, 1319, 1319, 1319, 1319, 1319, 1309, 1319, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1321, 1322, 1309,
     1309, 1321, 1309, 1321, 1321, 1321, 1321, 1309, 1309, 1321,
     1309, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1309, 1309, 1323, 1324, 1323, 1323,
     1323, 1323, 1309, 1323,  144, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1309, 1309, 1309, 1309, 1325, 1309,
     1309, 1309, 1309, 1326, 1309, 1309, 1327, 1309, 1309, 1328,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1315, 1316,
     1315, 1329, 1316, 1316, 1315, 1315, 1315, 1309, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1317, 1318, 1317,
     1317, 1330, 1318, 1318, 1317, 1317, 1317, 1317, 1317, 1309,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,

     1317, 1317, 1317, 1317,   77, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1319, 1320, 1319, 1319, 1331, 1320, 1320, 1319, 1319,
     1309, 1309, 1319, 1309, 1319, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1321, 1322, 1321, 1321, 1332, 1322, 1322, 1321,
     1321, 1321, 1309, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1323, 1324, 1323, 1323, 1333, 1324,
     1324, 1323, 1323, 1309,  144, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,

     1309, 1309, 1309, 1309, 1309, 1325, 1309, 1309, 1309, 1326,
     1327, 1328, 1309, 1315, 1334, 1335, 1335, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1317, 1336, 1337, 1337,
     1317, 1317, 1317, 1317,   77, 1317, 1317, 1317,   77, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1319, 1338, 1339, 1339, 1309, 1309, 1309, 1309, 1340, 1340,
     1321, 1341, 1342, 1342, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1323, 1343, 1344, 1344,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,

     1309, 1309, 1334, 1334, 1340,  417, 1345, 1346,  417, 1347,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1336, 1336,  510, 1348,  510, 1349,

      510, 1350, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1338, 1338,  554, 1351,  554,
     1352,  554, 1353, 1309, 1309, 1354, 1341, 1341,  564, 1355,
      564, 1356,  564, 1357, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1343, 1343,  590, 1358,  590, 1359,
      590, 1360, 1323,  592, 1323, 1323, 1323, 1323, 1323, 1323,

     1323, 1323, 1323, 1323, 1323, 1345, 1345, 1354, 1346, 1361,
      809, 1362, 1340,  417, 1363, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1348, 1348, 1349, 1364,  887,  887,
     1365, 1340, 1366, 1367, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1351, 1351, 1352,
     1369,  930,  930, 1370, 1340, 1371, 1372, 1373, 1373, 1374,
     1375, 1374,  942, 1376, 1340, 1377, 1378, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1380, 1380, 1381, 1382, 1381,  969,
     1383, 1340, 1384, 1385, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1387, 1387, 1388, 1389, 1390, 1391, 1391, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1364, 1364, 1388,  887, 1393, 1367, 1367, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1369, 1369, 1388,  930, 1394, 1372, 1372, 1375,
     1375, 1388,  942, 1395, 1378, 1378, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1382,

     1382, 1388,  969, 1396, 1385, 1385, 1386, 1386, 1386, 1386,
     1386, 1386, 1390, 1390, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1393, 1393, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1394, 1394, 1395, 1395, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1396, 1396,
     1386, 1386, 1386, 1386, 1386, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1386, 1386, 1386, 1386, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1386, 1386, 1392,
     1392, 1392, 1392, 1392, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1379, 1379, 1379, 1379, 1379, 1392, 1392, 1368,

     1368, 1368, 1368, 1379, 1392, 1368, 1379, 1368,    0, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309

    } ;

static yyconst flex_int16_t yy_nxt[8625] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1102,  160,  161,  180,  161,  160,
      160, 1082,  162,  160,  161,  179,  161,  160,  160,  268,
      162, 1075,  322,  181,  182,  137,  163,  137, 1043,  184,
      606,  137,  137,  274,  163,  137,  328,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  984,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  343,  186,  169,  173,  174,  180,
      375,  180,  787,  180,  606,  181,  182,  180,  349,  813,
      175,  187,  187,  180,  381,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1309,  183,  787,  181,
      182,  759,  189,  181,  190,  181, 1309,  273,  759,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  332,  179,  180,
      332,  181,  182,  748,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  748,  215,
      697,  216,  697,  203,  184,  181,  182, 1309,  327,  204,
      407,  180,  408,  606,  217,  180,  176,  177,  180,  169,
      180,  205,  180,  206,  207,  402,  409,  181,  182,  268,
      208,  181,  182,  221,  181,  182,  181,  182,  181,  182,

      268,  196,  218,  274,  220,  197,  219,  222,  402,  198,
      199,  223,  200,  179,  274,  201,  180,  179, 1309,  348,
      243,  209,  210,  180,  211, 1309,  380,  212,  756,  213,
      322,  214,  181,  182,  224,  225,  322,  180,  226,  181,
      182,  229,  227,  343,  328,  230,  180,  697,  228,  756,
      328,  343,  892,  181,  182,  231,  233,  349,  180,  337,
      234,  232,  181,  182,  238,  349,  180,  235,  236,  337,
      237,  375,  755,  180,  181,  182,  244,  180,  239,  754,
      245,  240,  181,  182,  241,  381,  242,  246,  602,  181,
      182,  264,  265,  181,  182,  375,  247,  179,  248,  255,

      180,  249,  256,  257,  259,  179,  250,  180,  251,  381,
      748,  252,  258,  253,  254,  935,  181,  182,  260,  414,
     1309,  603,  261,  181,  182,  269,  262,  269,  601,  269,
      275,  266,  270,  604,  270,  180,  270,  267,  263, 1309,
      695,  271,  272,  271,  272,  271,  272,  269, 1309,  746,
      269,  181,  188,  276,  270,  269,  759,  270,  269,  277,
      278,  945,  270,  271,  272,  270,  271,  272,  413,  413,
      279,  271,  280,  507,  271,  272,  271,  271,  269,  560,
      271,  559,  269,  551,  269,  270,  269,  696,  271,  270,
      271,  270,  561,  270,  271,  272,  558,  747,  271,  272,

      271,  272,  271,  272,  295,  557,  758,  342,  289,  341,
      269,  413,  413,  180,  281,  290,  269,  270,  291,  271,
      271,  269,  587,  270,  269,  292,  271,  272,  270,  181,
      182,  270,  271,  272,  414,  301,  786,  271,  272,  787,
      271,  272,  293,  282,  972,  294, 1309,  269,  604, 1309,
      283,  284,  419,  285,  270,  286,  287,  507,  288,  269,
      319,  269, 1309,  271,  272,  302,  270,  269,  270,  303,
     1309,  696, 1309,  551,  270,  271,  272,  271,  272,  320,
      296,  269,  297,  271,  272,  269,  304,  747,  270,  305,
      298,  180,  270,  180,  416,  299,  300,  271,  272,  269,

      307,  271,  272,  306,  561,  269,  270,  181,  182,  181,
      182, 1309,  270,  180,  308,  271,  272,  309,  758,  269,
      310,  271,  272, 1309,  757,  311,  270, 1309,  312,  181,
      182, 1309,  269, 1309,  785,  271,  272,  313,  314,  270,
      323,  317,  315,  316,  321,  418,  323,  324,  271,  272,
      180,  318,  323,  324,  323,  329,  325,  326, 1309,  324,
      330,  324,  325,  326,  587, 1309,  181,  182,  325,  326,
      325,  326,  331,  332,  331,  331,  331,  331,  786,  323,
     1309,  323, 1309, 1309,  323, 1309,  324,  422,  324,  333,
      333,  324,  323, 1309,  180,  325,  326,  325,  326,  324,

      325,  334,  325,  325, 1309, 1309,  325, 1309,  325,  326,
      181,  182,  180, 1309,  325,  423,  325,  336,  337,  338,
      338,  336,  336,  335, 1309, 1309,  180,  339,  181,  182,
      340,  338,  337,  338,  338,  338,  338, 1309,  425, 1309,
     1309,  339,  181,  182,  340,  325,  325,  338,  337,  338,
      338,  338,  338, 1309,  344, 1309,  344,  339,  344,  350,
      340,  345,  344,  345,  351,  345, 1309, 1309,  180,  345,
      346,  347,  346,  347,  346,  347,  344, 1309,  346,  347,
      344, 1309,  344,  345,  181,  182, 1309,  345, 1309,  345,
      424, 1309,  346,  347,  352, 1309,  346,  353,  346,  347,

      346,  346,  344,  375,  346, 1309,  344, 1309,  344,  345,
      375,  375,  346,  345,  346,  345,  375,  180,  346,  347,
      344, 1309,  346,  347,  346,  347, 1309,  345, 1309, 1309,
     1309, 1309,  357,  181,  182, 1309,  346,  347,  354,  426,
      355,  344, 1309,  346,  346,  356,  344, 1309,  345,  344,
     1309, 1309,  358,  345,  344,  359,  345,  346,  347,  360,
     1309,  345,  346,  347,  375,  346,  347,  361,  344,  362,
      346,  347,  364,  375, 1309,  345,  365,  375,  976,  344,
      375,  374, 1309,  363,  346,  347,  345, 1309, 1309, 1309,
      366, 1309,  344, 1309,  344,  346,  347,  180,  368,  345,

      344,  345,  180,  417,  367,  376, 1309,  345,  346,  347,
      346,  347,  377,  181,  182, 1309,  346,  347,  181,  182,
      371,  378,  379,  376,  369,  376,  382,  370,  376, 1309,
      377,  383,  377,  372, 1309,  377,  376,  373,  438,  378,
      379,  378,  379,  377,  378,  379,  378,  378,  375,  180,
      378, 1309,  378,  384, 1309,  375,  375,  390,  378, 1309,
      378,  375,  376, 1309,  376,  181,  182,  391,  376,  377,
      428,  377, 1309, 1309, 1309,  377, 1309, 1309,  378,  379,
      378,  379, 1309,  393,  378,  379, 1309,  388, 1309,  378,
      378,  376, 1309,  392,  376, 1309, 1309, 1309,  377,  376,

     1309,  377,  376, 1309,  394, 1309,  377,  378,  379,  377,
      378,  379, 1309,  385, 1309,  378,  379, 1309,  378,  379,
      386,  387,  376, 1309,  180,  388,  389,  395,  376,  377,
      376,  388,  187,  187,  396,  377,  180,  377,  378,  379,
      181,  182, 1309, 1309,  378,  379,  378,  379,  400, 1309,
     1309, 1309,  181,  182,  397, 1309, 1309, 1309,  427, 1309,
      398, 1309, 1309, 1309,  399,  401,  402,  403,  403,  401,
      401, 1309,  415,  181,  181,  404, 1309,  181,  405,  403,
      402,  403,  403,  403,  403,  181, 1309,  181, 1309,  404,
     1309,  180,  405,  403,  402,  403,  403,  403,  403, 1309,

      181,  181,  180,  404,  181, 1309,  405,  181,  182, 1309,
      180, 1309,  181, 1309,  181, 1309,  181,  181,  181,  182,
      429,  430,  431,  180, 1309, 1309,  181,  182,  420,  432,
      180,  421,  433,  180, 1309,  180, 1309, 1309,  180,  181,
      182, 1309,  434,  181,  181,  180,  181,  182,  180,  181,
      182,  181,  182,  180,  181,  182,  437,  439,  440,  435,
      436,  181,  182,  442,  181,  182, 1309,  180, 1309,  181,
      182, 1309, 1309, 1309,  180,  441,  180, 1309,  180, 1309,
      443,  180, 1309,  181,  182,  180, 1309, 1309,  444,  445,
      181,  182,  181,  182,  181,  182,  180,  181,  182,  256,

     1309,  181,  182,  448,  180, 1309,  180, 1309,  180, 1309,
     1309, 1309,  181,  182,  446,  180,  449, 1309,  447,  180,
      181,  182,  181,  182,  181,  182,  180,  452,  180, 1309,
     1309,  181,  182,  453,  180,  181,  182,  451,  180,  450,
      180, 1309,  181,  182,  181,  182, 1309,  454, 1309,  180,
      181,  182, 1309,  180,  181,  182,  181,  182, 1309, 1309,
      180,  459,  180,  455,  456,  181,  182, 1309,  457,  181,
      182,  180, 1309,  180, 1309,  458,  181,  182,  181,  182,
     1309, 1309, 1309,  180,  460,  180, 1309,  181,  182,  181,
      182,  180,  463,  461,  180,  462,  464,  180,  256,  181,

      182,  181,  182,  180, 1309, 1309,  180,  181,  182,  180,
      181,  182, 1309,  181,  182,  465, 1309,  180, 1309,  181,
      182, 1309,  181,  182,  180,  181,  182,  466, 1309,  467,
      469,  468,  470,  181,  182,  474,  180, 1309,  471,  472,
      181,  182,  180, 1309,  180,  473, 1309, 1309,  180, 1309,
     1309,  180,  181,  182,  475, 1309, 1309,  476,  181,  182,
      181,  182, 1309,  180,  181,  182,  482,  181,  182, 1309,
      180, 1309,  477,  481,  180,  478,  479,  483,  480,  181,
      182,  180, 1309,  485, 1309,  484,  181,  182, 1309, 1309,
      181,  182,  180, 1309, 1309,  486,  489,  181,  182,  490,

      487,  180, 1309,  491,  180,  488, 1309,  180,  181,  182,
      180,  492,  180, 1309,  180, 1309,  180,  181,  182,  180,
      181,  182,  493,  181,  182,  496,  181,  182,  181,  182,
      181,  182,  181,  182, 1309,  181,  182,  494,  497,  180,
      495,  500,  180, 1309,  180,  501,  180, 1309, 1309,  498,
      180,  499,  505, 1309, 1309,  181,  182, 1309,  181,  182,
      181,  182,  181,  182,  502, 1309,  181,  182,  506,  269,
     1309,  269, 1309,  269,  503, 1309,  270, 1309,  270, 1309,
      270,  504, 1309, 1309, 1309,  271,  272,  271,  272,  271,
      280,  508,  271,  271,  269, 1309,  271,  509,  269, 1309,

      269,  270,  269, 1309,  271,  270,  271,  270,  510,  270,
      271,  272, 1309,  269,  271,  272,  271,  272,  271,  272,
      270, 1309, 1309, 1309, 1309, 1309,  269,  271,  271,  271,
      272,  271,  180,  270, 1309,  271,  271, 1309,  269,  271,
      269,  271,  271,  272,  269,  270, 1309,  270,  181,  182,
      180,  270,  269, 1309,  271,  272,  271,  272,  512,  270,
      271,  272,  511,  513, 1309, 1309,  181,  182,  271,  272,
      271,  271,  286,  269, 1309, 1309, 1309,  269, 1309,  269,
      270,  269,  514,  515,  270,  611,  270, 1309,  270,  271,
      272, 1309,  269,  271,  272,  271,  272,  271,  272,  270,

      269, 1309, 1309,  269, 1309, 1309,  516,  270,  271,  272,
      270,  517, 1309,  519,  269, 1309,  271,  272,  518,  271,
      272,  270,  269, 1309, 1309,  269, 1309,  269, 1309,  270,
      271,  272,  270, 1309,  270,  180, 1309, 1309,  271,  272,
      520,  271,  272,  271,  272, 1309, 1309, 1309,  269,  521,
      269,  181,  182, 1309,  522,  270,  524,  270,  180, 1309,
      525,  612,  523,  269,  271,  272,  271,  272,  527,  269,
      270,  269,  526, 1309,  181,  182,  270,  269,  270,  271,
      272, 1309,  269, 1309,  270,  271,  272,  271,  272,  270,
      269,  528, 1309,  271,  272, 1309,  530,  270,  271,  272,

      268,  269,  268,  529,  269,  532,  271,  272,  270,  533,
      268,  270, 1309, 1309,  531,  534,  535,  271,  272,  269,
      271,  272,  269, 1309,  180,  536,  270,  269,  538,  270,
      269,  537, 1309, 1309,  270,  271,  272,  270,  271,  272,
      181,  182,  613,  271,  272,  269,  271,  272,  540,  541,
      269, 1309,  270,  269,  543, 1309,  269,  270,  539,  542,
      270,  271,  272,  270,  269, 1309,  271,  272, 1309,  271,
      272,  270,  271,  272, 1309,  545, 1309,  269, 1309,  269,
      271,  272,  269,  547,  270,  544,  270, 1309, 1309,  270,
      269,  546, 1309,  271,  272,  271,  272,  270,  271,  272,

     1309, 1309,  269, 1309,  323, 1309,  271,  272,  549,  270,
      323,  324,  548, 1309, 1309,  323, 1309,  324,  271,  272,
      325,  326,  324, 1309, 1309,  550,  325,  326,  552,  325,
      325,  325,  334,  325, 1309,  323,  325,  325,  553,  323,
      325,  325,  324,  325, 1309,  554,  324,  323,  325, 1309,
      325,  325,  326, 1309,  324,  325,  326,  331,  332,  331,
      331,  331,  331,  325,  326,  180, 1309,  555,  323, 1309,
      556, 1309,  325,  325, 1309,  324,  333,  333, 1309,  325,
      325,  181,  182,  616,  325,  326,  336,  337,  338,  338,
      336,  336, 1309,  562,  346,  346,  339, 1309,  346,  340,

      338,  337,  338,  338,  338,  338,  346,  344,  346,  344,
      339,  344, 1309,  340,  345, 1309,  345, 1309,  345, 1309,
     1309, 1309, 1309,  346,  347,  346,  347,  346,  353,  344,
     1309, 1309,  563,  344, 1309,  344,  345,  346,  346,  564,
      345, 1309,  345,  346,  346,  346,  347,  346, 1309,  346,
      347,  346,  347,  344, 1309,  346,  344,  346,  344, 1309,
      345,  344, 1309,  345,  344,  345,  180, 1309,  345,  346,
      347,  345,  346,  347,  346,  347, 1309,  346,  347, 1309,
      346,  347,  181,  182, 1309, 1309,  346,  346,  568,  565,
      344,  566,  567,  344, 1309,  569,  344,  345,  344,  570,

      345,  614, 1309,  345, 1309,  345,  346,  347,  573,  346,
      347,  344,  346,  347,  346,  347, 1309, 1309,  345,  344,
      574, 1309,  571, 1309,  344, 1309,  345,  346,  347,  180,
      572,  345,  344,  575, 1309,  346,  347,  344, 1309,  345,
      346,  347, 1309,  344,  345,  181,  182,  577,  346,  347,
      345, 1309, 1309,  346,  347, 1309,  576,  344, 1309,  346,
      347,  573,  578,  180,  345,  344, 1309, 1309,  579,  580,
      581,  615,  345,  346,  347, 1309,  344, 1309, 1309,  181,
      182,  346,  347,  345, 1309, 1309,  582,  583,  344, 1309,
      344, 1309,  346,  347, 1309,  345,  344,  345, 1309, 1309,

      584,  376, 1309,  345,  346,  347,  346,  347,  377, 1309,
      585,  180,  346,  347,  376, 1309,  376,  378,  379, 1309,
     1309,  377, 1309,  377, 1309,  586,  180,  181,  182,  619,
      378,  379,  378,  384,  588,  378,  378,  376, 1309,  378,
      589, 1309,  181,  182,  377,  376,  618,  378, 1309,  378,
     1309,  590,  377,  378,  379,  378,  378,  376, 1309,  378,
     1309,  378,  379, 1309,  377,  376, 1309,  378, 1309,  378,
      376, 1309,  377,  378,  379,  591,  376,  377,  378,  378,
     1309,  378,  379,  377,  388, 1309,  378,  379, 1309, 1309,
      376, 1309,  378,  379, 1309, 1309,  376,  377,  378,  378,

     1309,  376, 1309,  377, 1309,  388,  378,  379,  377,  376,
     1309,  592,  378,  379, 1309,  376,  377,  378,  379, 1309,
      376,  594,  377, 1309, 1309,  378,  379,  377,  376, 1309,
     1309,  378,  379,  593, 1309,  377,  378,  379, 1309,  595,
     1309,  388,  376, 1309,  378,  379,  376, 1309, 1309,  377,
      376, 1309, 1309,  377,  376, 1309,  388,  377,  378,  379,
      596,  377,  378,  379, 1309,  598,  378,  379, 1309,  180,
      378,  379, 1309, 1309, 1309, 1309,  599,  597,  401,  402,
      403,  403,  401,  401, 1309,  181,  182, 1309,  404,  600,
     1309,  405,  403,  402,  403,  403,  403,  403,  617,  609,

      609,  180,  404,  609,  180,  405,  605, 1309, 1309,  605,
     1309,  609, 1309,  609,  607,  605,  605,  181,  182,  605,
      181,  182,  180, 1309,  180, 1309,  608,  605, 1309,  605,
      609,  610, 1309,  620,  621,  180, 1309,  622,  181,  182,
      181,  182,  609,  609,  623,  624, 1309, 1309,  180, 1309,
      180,  181,  182,  626, 1309, 1309,  627, 1309,  605,  605,
      605,  625,  180,  605,  181,  182,  181,  182,  607,  605,
      605,  180,  629,  605,  180, 1309,  180, 1309,  181,  182,
      608,  605,  180,  605,  609,  610,  628,  181,  182,  180,
      181,  182,  181,  182,  268,  630,  706, 1309,  181,  182,

     1309,  180, 1309,  180,  268,  181,  182, 1309, 1309,  707,
      268,  632,  605,  605,  180, 1309,  631,  181,  182,  181,
      182,  180, 1309,  633,  256,  180,  634, 1309, 1309,  180,
      181,  182,  180, 1309,  180,  637,  180,  181,  182,  180,
     1309,  181,  182, 1309,  635,  181,  182, 1309,  181,  182,
      181,  182,  181,  182,  180,  181,  182,  180,  640, 1309,
      641,  636, 1309,  639,  180,  638,  180, 1309,  180, 1309,
      181,  182,  180,  181,  182,  180,  642,  180,  643,  180,
      181,  182,  181,  182,  181,  182,  645, 1309,  181,  182,
      180,  181,  182,  181,  182,  181,  182,  644,  647, 1309,

      180, 1309, 1309, 1309,  646,  180,  181,  182, 1309,  180,
     1309,  180, 1309, 1309,  649,  648,  181,  182,  180,  650,
      180,  181,  182,  180,  652,  181,  182,  181,  182,  180,
      651, 1309,  653, 1309,  181,  182,  181,  182,  180,  181,
      182,  180,  654,  180, 1309,  181,  182, 1309,  656,  180,
      657, 1309, 1309, 1309,  181,  182,  655,  181,  182,  181,
      182, 1309, 1309,  180,  659,  181,  182,  180,  661,  658,
      180, 1309,  180, 1309,  180, 1309, 1309, 1309,  660,  181,
      182,  180, 1309,  181,  182,  180,  181,  182,  181,  182,
      181,  182, 1309,  663, 1309,  180,  666,  181,  182, 1309,

      662,  181,  182,  180, 1309,  180, 1309,  180,  664,  180,
      665,  181,  182,  180, 1309, 1309,  667,  668, 1309,  181,
      182,  181,  182,  181,  182,  181,  182,  670,  180,  181,
      182,  180, 1309, 1309,  256,  180, 1309,  672,  669, 1309,
     1309,  180, 1309,  180,  181,  182,  180,  181,  182,  671,
      180,  181,  182,  180, 1309,  180,  674,  181,  182,  181,
      182, 1309,  181,  182, 1309,  673,  181,  182,  180,  181,
      182,  181,  182, 1309, 1309,  675,  677,  681,  676,  180,
      679,  682,  678,  180,  181,  182, 1309,  180,  683, 1309,
      680,  180, 1309, 1309,  180,  181,  182,  180, 1309,  181,

      182,  180,  684,  181,  182,  180,  687,  181,  182,  685,
      181,  182,  180,  181,  182, 1309, 1309,  181,  182,  686,
     1309,  181,  182,  180, 1309,  689,  269, 1309,  181,  182,
      691,  688,  690,  270,  269, 1309,  693,  692,  269,  181,
      182,  270,  271,  272, 1309,  270,  605, 1309,  183,  605,
      271,  272,  183, 1309,  271,  272,  269, 1309, 1309, 1309,
      694,  605,  180,  270,  605, 1309,  703, 1309, 1309,  698,
      605,  605,  271,  272,  605, 1309,  699,  180,  181,  182,
      269,  700,  605,  269,  605,  701,  702,  270,  819, 1309,
      270,  269,  704,  181,  182,  269,  271,  272,  270,  271,

      272, 1309,  270,  180, 1309,  180, 1309,  271,  272, 1309,
      705,  271,  272,  605,  605,  605, 1309,  180,  605,  181,
      182,  181,  182,  698,  605,  605,  708, 1309,  605,  180,
      699,  820,  709,  181,  182,  700,  605, 1309,  605,  701,
      702,  268,  816,  710,  180,  181,  182,  269, 1309, 1309,
      529,  268,  711,  817,  270,  269,  712,  713,  269,  714,
      181,  182,  270,  271,  272,  270,  269,  605,  605,  715,
      269,  271,  272,  270,  271,  272, 1309,  270, 1309, 1309,
      818, 1309,  271,  272, 1309,  716,  271,  272,  717,  269,
     1309,  719,  269, 1309, 1309,  720,  270,  269, 1309,  270,

      269,  718, 1309,  269,  270,  271,  272,  270,  271,  272,
      270,  269, 1309,  271,  272, 1309,  271,  272,  270,  271,
      272, 1309,  721,  722,  269, 1309,  723,  271,  272, 1309,
     1309,  270,  269,  725, 1309,  724,  269, 1309,  269,  270,
      271,  272,  180,  270,  269,  270,  726, 1309,  271,  272,
      269,  270,  271,  272,  271,  272,  269,  270,  181,  182,
      271,  272,  730,  270,  269, 1309,  271,  272,  728,  727,
     1309,  270,  271,  272,  729,  269, 1309,  269,  732,  821,
      271,  272,  270,  269,  270, 1309,  731, 1309,  269,  733,
      270,  271,  272,  271,  272,  270, 1309, 1309, 1309,  271,

      272,  269, 1309,  735,  271,  272,  269, 1309,  270,  605,
     1309,  273,  605,  270,  269,  273, 1309,  271,  272,  734,
      269,  270,  271,  272, 1309,  736,  737,  270,  269, 1309,
      271,  272, 1309,  269,  739,  270,  271,  272,  740,  269,
      270, 1309, 1309,  738,  271,  272,  270, 1309,  741,  271,
      272,  269, 1309, 1309, 1309,  271,  272, 1309,  270,  323,
     1309, 1309,  344,  743,  742,  344,  324,  271,  272,  345,
      744, 1309,  345,  344, 1309,  325,  326,  344,  346,  347,
      345,  346,  347, 1309,  345, 1309, 1309,  745,  605,  346,
      347,  605, 1309,  346,  347,  766,  749,  605,  605,  344,

     1309,  605,  180,  750, 1309,  765,  345,  770,  751,  605,
      344,  605,  752,  753,  344,  346,  347,  345,  181,  182,
      825,  345,  767, 1309, 1309, 1309,  346,  347, 1309, 1309,
      346,  347, 1309, 1309, 1309,  768, 1309,  344, 1309, 1309,
      605,  605,  605,  180,  345,  605, 1309,  769, 1309,  573,
      749,  605,  605,  346,  347,  605, 1309,  750,  180,  181,
      182,  344,  751,  605, 1309,  605,  752,  753,  345, 1309,
     1309,  822,  344, 1309,  181,  182,  344,  346,  347,  345,
      771, 1309,  833,  345,  344, 1309,  772, 1309,  346,  347,
     1309,  345,  346,  347,  605,  605,  605, 1309,  776,  605,

      346,  347, 1309, 1309,  760,  605,  605, 1309, 1309,  605,
     1309,  761, 1309, 1309,  773,  774,  762,  605,  344,  605,
      763,  764,  344, 1309,  344,  345,  344, 1309,  180,  345,
      344,  345, 1309,  345,  346,  347, 1309,  345,  346,  347,
      346,  347,  346,  347,  181,  182,  346,  347,  605,  605,
      605, 1309,  779,  605,  829,  573,  573,  775,  760,  605,
      605,  344,  777,  605, 1309,  761, 1309,  180,  345,  344,
      762,  605, 1309,  605,  763,  764,  345,  346,  347,  778,
      344, 1309,  344,  181,  182,  346,  347,  345,  344,  345,
     1309, 1309, 1309,  830, 1309,  345,  346,  347,  346,  347,

      781,  180,  605,  605,  346,  347,  344,  782,  783,  376,
     1309,  780,  376,  345, 1309,  180,  377,  181,  182,  377,
     1309, 1309,  346,  347,  784,  378,  379,  605,  378,  379,
      605,  181,  182, 1309,  799,  788,  605,  605,  376,  832,
      605,  180,  789, 1309,  834,  377,  376,  790,  605,  376,
      605,  791,  792,  377,  378,  379,  377,  181,  182, 1309,
      376, 1309,  378,  379, 1309,  378,  379,  377, 1309, 1309,
     1309,  376,  837, 1309,  793,  800,  378,  379,  377,  605,
      605,  605,  180, 1309,  605,  388, 1309,  378,  379,  788,
      605,  605, 1309,  376,  605, 1309,  789,  801,  181,  182,

      377,  790,  605,  180,  605,  791,  792,  376,  802,  378,
      379,  376, 1309,  803,  377,  180, 1309,  823,  377,  181,
      182, 1309, 1309,  378,  379,  828, 1309,  378,  379,  804,
     1309,  181,  182,  605,  605,  376, 1309,  180,  805,  180,
      605,  183,  377,  605,  180, 1309,  183,  388,  606, 1309,
      824,  378,  379,  181,  182,  181,  182, 1309,  794, 1309,
      181,  182,  807,  826,  180,  795, 1309,  796, 1309,  827,
      180,  797,  798,  180,  795,  808,  831,  180,  808,  835,
      181,  182, 1309,  810,  808,  808,  181,  182,  808,  181,
      182,  839,  180,  181,  182, 1309,  808,  180,  808,  811,

      812,  180,  836,  180, 1309, 1309, 1309,  838,  181,  182,
     1309, 1309,  840,  181,  182, 1309, 1309,  181,  182,  181,
      182, 1309,  842,  841, 1309, 1309, 1309,  808,  808,  605,
      180, 1309,  605, 1309, 1309, 1309, 1309,  815,  609,  609,
      180,  843,  609,  180, 1309,  180,  181,  182,  180, 1309,
      609,  844,  609,  605,  605, 1309,  181,  182,  180,  181,
      182,  181,  182,  180,  181,  182, 1309,  180, 1309,  180,
     1309,  180,  846,  847,  181,  182,  845,  180, 1309,  181,
      182,  609,  609,  181,  182,  181,  182,  181,  182,  848,
      180, 1309,  180,  181,  182,  852,  849,  851,  180, 1309,

      180,  850,  180, 1309,  180, 1309,  181,  182,  181,  182,
      180, 1309,  853, 1309,  181,  182,  181,  182,  181,  182,
      181,  182,  855,  180, 1309,  180,  181,  182,  180,  854,
      605, 1309,  327,  605, 1309,  180,  327,  180, 1309,  181,
      182,  181,  182,  180,  181,  182,  859,  856,  180,  857,
      858,  181,  182,  181,  182,  180, 1309, 1309,  180,  181,
      182, 1309, 1309,  861,  181,  182,  180, 1309, 1309,  860,
      180,  181,  182,  863,  181,  182,  180, 1309,  862, 1309,
     1309,  180,  181,  182,  864, 1309,  181,  182,  180, 1309,
      865,  180,  181,  182,  180, 1309,  866,  181,  182,  180,

     1309,  180,  480,  180,  181,  182,  180,  181,  182,  180,
      181,  182,  180, 1309, 1309,  181,  182,  181,  182,  181,
      182, 1309,  181,  182,  867,  181,  182,  868,  181,  182,
      873,  180,  869,  180,  870,  180, 1309,  871,  180, 1309,
     1309, 1309,  180,  872, 1309,  180, 1309,  181,  182,  181,
      182,  181,  182,  180,  181,  182,  180,  875,  181,  182,
      877,  181,  182, 1309,  874,  180, 1309, 1309, 1309,  181,
      182,  180,  181,  182,  180, 1309, 1309, 1309,  180, 1309,
      876,  181,  182,  880,  180,  878, 1309,  181,  182,  180,
      181,  182,  879,  881,  181,  182,  882, 1309, 1309, 1309,

      181,  182,  883, 1309,  269,  181,  182,  605,  273,  884,
      605,  270, 1309,  273, 1309,  697, 1309, 1309, 1309,  269,
      271,  272, 1309, 1309,  895,  269,  270, 1309, 1309,  886,
      808,  180,  270,  808, 1309,  271,  272, 1309,  888,  808,
      808,  271,  272,  808, 1309,  889, 1309,  181,  182,  269,
     1309,  808,  269,  808,  890,  891,  270,  897, 1309,  270,
      269,  896, 1309,  269, 1309,  271,  272,  270,  271,  272,
      270, 1309, 1309, 1309,  269,  898,  271,  272, 1309,  271,
      272,  270,  808,  808,  605, 1309, 1309,  605, 1309,  899,
      271,  272,  894,  701,  701,  900,  269,  701, 1309,  269,

     1309, 1309,  180,  270,  529,  701,  270,  701,  605,  605,
     1309,  901,  271,  272,  269,  271,  272,  269,  181,  182,
     1309,  270, 1309,  993,  270,  269,  529, 1309,  269,  529,
      271,  272,  270,  271,  272,  270,  701,  701, 1309,  529,
     1309,  271,  272,  269,  271,  272,  903,  269, 1309,  180,
      270,  269, 1309, 1309,  270,  269,  902, 1309,  270,  271,
      272, 1309,  270,  271,  272,  181,  182,  271,  272,  904,
     1309,  271,  272,  905,  269,  994,  269, 1309,  269, 1309,
      180,  270,  269,  270, 1309,  270, 1309,  906, 1309,  270,
      271,  272,  271,  272,  271,  272,  181,  182,  271,  272,

      910,  269,  991,  269, 1309,  269, 1309,  907,  270, 1309,
      270,  180,  270,  908, 1309, 1309,  909,  271,  272,  271,
      272,  271,  272, 1309,  269, 1309,  269,  181,  182,  269,
      911,  270,  269,  270, 1309, 1309,  270, 1309, 1309,  270,
      271,  272,  271,  272,  912,  271,  272,  913,  271,  272,
      269, 1309,  269,  914, 1309,  269, 1309,  270,  269,  270,
     1309,  180,  270, 1309, 1309,  270,  271,  272,  271,  272,
      915,  271,  272, 1309,  271,  272,  269,  181,  182,  269,
      918, 1309, 1309,  270,  916,  917,  270,  269, 1309, 1309,
      269, 1309,  271,  272,  270,  271,  272,  270,  919, 1309,

     1309,  269, 1309,  271,  272,  269,  271,  272,  270,  180,
     1309, 1309,  270,  269, 1309, 1309,  920,  271,  272,  924,
      270,  271,  272,  921, 1309,  181,  182,  922,  992,  271,
      272,  269, 1309,  269, 1309, 1309,  269,  926,  270, 1309,
      270, 1309,  923,  270, 1309,  925, 1309,  271,  272,  271,
      272, 1309,  271,  272, 1309,  605,  327,  927,  605, 1309,
     1309,  327, 1309,  748, 1309, 1309,  180,  605,  348, 1309,
      605, 1309, 1309,  348, 1309,  759, 1309,  929,  808,  180,
     1309,  808,  181,  182, 1309, 1309,  931,  808,  808,  939,
      344,  808, 1309,  932, 1309,  181,  182,  345,  344,  808,

     1309,  808,  933,  934,  180,  345,  346,  347,  996,  344,
      948,  344, 1309, 1309,  346,  347,  345,  344,  345, 1309,
      181,  182,  344, 1309,  345,  346,  347,  346,  347,  345,
      808,  808,  605,  346,  347,  605,  949,  950,  346,  347,
      937,  752,  752,  344,  953,  752,  951,  344, 1309,  573,
      345,  180, 1309,  752,  345,  752,  605,  605,  344,  346,
      347,  952, 1309,  346,  347,  345,  344,  181,  182,  954,
     1309,  344, 1309,  345,  346,  347,  180, 1309,  345, 1309,
     1309, 1309,  346,  347,  752,  752,  808,  346,  347,  808,
     1309,  955,  181,  182,  941,  808,  808,  344,  989,  808,

     1309,  942,  180,  956,  345, 1309, 1309,  808,  990,  808,
      943,  944,  573,  346,  347,  957,  344, 1309,  181,  182,
      344, 1309, 1001,  345, 1309, 1309, 1309,  345, 1309,  180,
     1309, 1309,  346,  347,  958,  344,  346,  347,  808,  808,
      605,  959,  345,  605, 1309,  181,  182, 1309,  947,  763,
      763,  346,  347,  763, 1309,  960,  180, 1309, 1309,  344,
      995,  763,  344,  763,  605,  605,  345, 1309, 1309,  345,
      344, 1309,  181,  182,  344,  346,  347,  345,  346,  347,
     1309,  345, 1003, 1309,  962, 1309,  346,  347,  344,  961,
      346,  347,  763,  763, 1309,  345,  376, 1309, 1309, 1309,

      963, 1309,  180,  377,  346,  347,  180,  573,  605,  380,
      376,  605,  378,  379,  380, 1309,  787,  377,  181,  182,
     1309,  376,  181,  182,  998,  964,  378,  379,  377, 1309,
      966,  808,  975,  997,  808, 1309, 1309,  378,  379,  968,
      808,  808,  376, 1309,  808, 1309,  969, 1309, 1309,  377,
      376,  795,  808,  376,  808,  970,  971,  377,  378,  379,
      377,  376, 1309, 1309,  376, 1309,  378,  379,  377,  378,
      379,  377,  795,  180, 1309,  795, 1309,  378,  379, 1309,
      378,  379, 1309,  808,  808,  605,  979, 1309,  605,  181,
      182,  978,  977,  974,  791,  791,  376, 1309,  791, 1008,

      376, 1309, 1309,  377,  376, 1309,  791,  377,  791,  605,
      605,  377,  378,  379,  180, 1309,  378,  379,  376, 1309,
      378,  379, 1309, 1309, 1309,  377, 1309, 1309,  180,  980,
      181,  182,  388,  180,  378,  379,  981,  791,  791, 1309,
      605,  183,  388,  605,  181,  182,  183, 1309,  606,  181,
      182,  999,  808,  183, 1004,  808, 1309, 1309,  183, 1000,
      809, 1309,  807,  808, 1309,  180,  808, 1309, 1309, 1309,
     1309,  810,  808,  808,  983,  180,  808,  605,  603,  180,
      605,  181,  182,  603,  808,  814,  808,  811,  812,  180,
     1309,  181,  182,  180, 1309,  181,  182, 1002, 1309,  988,

     1005, 1309, 1007, 1309, 1309,  181,  182,  180, 1309,  181,
      182, 1006, 1309, 1309, 1309,  808,  808,  808,  180, 1309,
      808, 1309, 1309,  181,  182,  986,  811,  811, 1010,  180,
      811,  180, 1309,  180,  181,  182, 1009,  180,  811,  180,
      811,  808,  808,  180, 1309,  181,  182,  181,  182,  181,
      182, 1309, 1309,  181,  182,  181,  182, 1309,  180,  181,
      182,  180, 1309, 1309, 1309, 1014,  180, 1011,  180,  811,
      811,  180, 1309, 1012,  181,  182, 1309,  181,  182, 1309,
     1013, 1309,  181,  182,  181,  182, 1309,  181,  182,  180,
     1309, 1309, 1016,  180, 1309, 1017,  180, 1309, 1015,  180,

     1309,  180, 1309, 1018,  180,  181,  182, 1019, 1020,  181,
      182,  180,  181,  182,  180,  181,  182,  181,  182, 1022,
      181,  182,  180, 1309,  180, 1021,  180,  181,  182,  180,
      181,  182, 1309, 1024, 1309, 1023, 1025, 1309,  181,  182,
      181,  182,  181,  182, 1309,  181,  182, 1309,  180, 1309,
      180, 1026,  180, 1309, 1028, 1309, 1309,  180, 1309,  180,
     1309, 1027,  180, 1029,  181,  182,  181,  182,  181,  182,
     1030, 1309, 1031,  181,  182,  181,  182,  180,  181,  182,
      180, 1309,  180, 1032,  180, 1309,  180, 1309, 1033,  180,
     1309,  180, 1309,  181,  182, 1309,  181,  182,  181,  182,

      181,  182,  181,  182, 1035,  181,  182,  181,  182, 1309,
      180, 1309, 1034,  180, 1309,  180, 1309, 1036,  180, 1309,
     1309,  180, 1309,  180, 1309, 1037,  181,  182, 1309,  181,
      182,  181,  182, 1309,  181,  182, 1309,  181,  182,  181,
      182,  605,  273, 1309,  605, 1038, 1040,  273, 1309,  697,
     1309, 1309,  269, 1039,  808,  273, 1309,  808, 1309,  270,
      273, 1309,  887,  886,  808, 1309,  180,  808,  271,  272,
     1309, 1309,  888,  808,  808, 1309, 1042,  808, 1048,  889,
      701,  701,  181,  182,  701,  808, 1309,  808,  890,  891,
      605,  695,  701,  605,  701, 1122,  695,  269,  893,  605,

     1309,  348,  605,  269,  270,  348, 1309, 1309, 1309, 1309,
      270, 1309, 1047,  271,  272, 1309,  808,  808,  808,  271,
      272,  808, 1309,  701,  701, 1309, 1045,  890,  890,  269,
     1309,  890,  605, 1309,  380,  605,  270, 1309,  380,  890,
     1049,  890,  808,  808,  269,  271,  272,  269, 1309,  269,
     1309,  270,  269, 1050,  270, 1309,  270, 1309, 1309,  270,
      271,  272, 1309,  271,  272,  271,  272, 1309,  271,  272,
      890,  890,  605, 1052,  529,  605, 1309, 1309, 1309, 1051,
      698,  605,  605,  269, 1309,  605, 1309,  699,  180, 1309,
      270,  269, 1309,  605,  269,  605,  701,  702,  270,  271,

      272,  270,  269, 1309,  181,  182, 1309,  271,  272,  270,
      271,  272, 1309, 1309,  269, 1309,  269, 1309,  271,  272,
     1053,  270, 1054,  270,  605,  605, 1117, 1309,  269, 1055,
      271,  272,  271,  272, 1056,  270,  269, 1309, 1309, 1309,
      269, 1309, 1058,  270,  271,  272, 1057,  270,  269, 1059,
     1309,  269,  271,  272,  269,  270,  271,  272,  270, 1309,
     1309,  270,  269, 1309,  271,  272, 1309,  271,  272,  270,
      271,  272, 1062, 1060,  269, 1061,  269, 1309,  271,  272,
      269,  270, 1309,  270, 1309, 1309, 1309,  270,  180, 1309,
      271,  272,  271,  272, 1309,  269,  271,  272, 1309, 1063,

      269, 1066,  270,  269,  181,  182, 1064,  270, 1065, 1309,
      270,  271,  272, 1309,  269, 1067,  271,  272,  269,  271,
      272,  270,  269, 1115, 1309,  270,  269, 1309, 1309,  270,
      271,  272, 1068,  270,  271,  272, 1309, 1309,  271,  272,
     1069, 1309,  271,  272, 1070,  269, 1309,  269, 1309, 1309,
      605,  327,  270,  605,  270, 1309,  327, 1071,  748, 1309,
     1309,  271,  272,  271,  272,  752,  752, 1309, 1309,  752,
     1072, 1309,  929,  808, 1309, 1309,  808,  752, 1309,  752,
     1309,  931,  808,  808,  808,  327,  808,  808,  932, 1309,
      327, 1309,  930, 1309,  808, 1309,  808,  933,  934,  605,

      746, 1309,  605, 1309, 1309,  746, 1074,  936,  752,  752,
      605,  348,  180,  605, 1309, 1309,  348, 1309,  759,  763,
      763, 1079, 1309,  763, 1309,  808,  808,  808,  181,  182,
      808,  763,  939,  763, 1309, 1077,  933,  933,  808,  348,
      933,  808, 1309, 1119,  348, 1309,  940, 1309,  933, 1309,
      933,  808,  808,  605,  757, 1309,  605,  344, 1309,  757,
     1081,  946,  763,  763,  345,  808, 1309,  183,  808, 1309,
      344,  183, 1309,  346,  347, 1086, 1309,  345, 1309,  933,
      933,  605, 1309, 1087,  605, 1309,  346,  347, 1309,  749,
      605,  605,  344, 1309,  605, 1309,  750, 1309, 1309,  345,

     1309, 1309,  605,  344,  605,  752,  753, 1088,  346,  347,
      345,  344, 1309, 1309,  344, 1309, 1089, 1309,  345,  346,
      347,  345, 1309, 1309, 1309,  344, 1309,  346,  347, 1309,
      346,  347,  345,  605,  605,  808,  180, 1309,  808, 1309,
      573,  346,  347,  941,  808,  808, 1090,  344,  808,  573,
      942, 1309,  181,  182,  345,  344,  808, 1091,  808,  943,
      944, 1309,  345,  346,  347, 1309,  344, 1309, 1118,  344,
     1309,  346,  347,  345,  180, 1309,  345, 1309,  573, 1309,
     1309, 1092,  346,  347, 1309,  346,  347,  808,  808,  808,
      181,  182,  808, 1094, 1309,  428, 1309,  941,  808,  808,

      344, 1309,  808, 1093,  942, 1309, 1309,  345,  344, 1309,
      808,  180,  808,  943,  944,  345,  346,  347, 1095,  344,
     1309, 1309,  344, 1309,  346,  347,  345,  181,  182,  345,
     1309,  605, 1309,  603,  605,  346,  347,  603,  346,  347,
     1097,  808,  808,  808,  180,  573,  808, 1116, 1309, 1309,
     1309, 1084,  943,  943, 1096,  344,  943, 1309,  344, 1309,
      181,  182,  345, 1309,  943,  345,  943,  808,  808, 1309,
     1123,  346,  347, 1098,  346,  347,  605,  380, 1309,  605,
     1099, 1309,  380, 1309,  787,  180,  808,  380, 1309,  808,
     1309, 1309,  380, 1309,  967,  943,  943,  605,  966,  180,

      605,  181,  182, 1309, 1309,  760,  605,  605, 1101, 1309,
      605, 1309,  761,  791,  791,  181,  182,  791,  605, 1126,
      605,  763,  764,  605,  785,  791,  605,  791, 1309,  785,
      376,  973, 1309,  808,  183, 1309,  808,  377, 1309,  183,
     1309,  809, 1309, 1309, 1309, 1106,  378,  379, 1309,  605,
      605,  808, 1107, 1309,  808,  983,  791,  791, 1309,  968,
      808,  808,  376, 1309,  808, 1309,  969, 1309,  180,  377,
     1309, 1309,  808,  376,  808,  970,  971, 1309,  378,  379,
      377,  376, 1309, 1309,  181,  182, 1309,  795,  377,  378,
      379, 1309, 1309,  376, 1108, 1309, 1309,  378,  379, 1309,

      377, 1309, 1109,  808,  808,  808, 1124, 1309,  808,  378,
      379, 1111, 1309,  968,  808,  808,  376, 1309,  808, 1309,
      969, 1309, 1309,  377,  180, 1309,  808, 1309,  808,  970,
      971,  376,  378,  379,  180, 1309, 1110, 1309,  377, 1309,
      181,  182,  811,  811, 1309, 1309,  811,  378,  379, 1309,
      181,  182, 1309, 1309,  811, 1309,  811,  808,  808,  808,
     1309, 1127,  808, 1309, 1309, 1129, 1112, 1104,  970,  970,
      808,  603,  970,  808, 1309, 1309,  603, 1309,  985, 1309,
      970,  180,  970,  808,  808,  811,  811,  605,  603,  180,
      605,  180, 1114,  603, 1309,  814, 1309,  181,  182, 1309,

     1309, 1309,  180, 1120, 1309,  181,  182,  181,  182,  988,
     1309,  970,  970,  605,  180, 1309,  605, 1309,  181,  182,
     1309,  788,  605,  605, 1121,  180,  605,  180,  789,  180,
      181,  182, 1309, 1309,  605, 1309,  605,  791,  792,  180,
     1309,  181,  182,  181,  182,  181,  182, 1125, 1309, 1128,
     1309, 1130,  180, 1309, 1309,  181,  182,  180, 1309, 1309,
     1309, 1132,  180, 1309, 1131,  605,  605,  808,  181,  182,
      808, 1309, 1309,  181,  182,  810,  808,  808,  181,  182,
      808, 1309, 1309, 1133,  180, 1309,  180, 1309,  808,  180,
      808,  811,  812,  180, 1309,  180, 1309,  180, 1134, 1309,

      181,  182,  181,  182, 1309,  181,  182,  180, 1135,  181,
      182,  181,  182,  181,  182, 1136,  180, 1309,  180,  808,
      808,  180, 1137,  181,  182,  180, 1309,  180, 1309, 1138,
      180, 1309,  181,  182,  181,  182, 1140,  181,  182,  180,
     1309,  181,  182,  181,  182,  180,  181,  182,  180, 1309,
     1309,  180, 1141, 1139,  180,  181,  182, 1309,  180, 1309,
      180,  181,  182,  180,  181,  182, 1142,  181,  182,  180,
      181,  182,  180, 1143,  181,  182,  181,  182, 1309,  181,
      182,  180, 1309,  180, 1309,  181,  182,  180,  181,  182,
     1309, 1144, 1309, 1309, 1148, 1145, 1309,  181,  182,  181,

      182, 1309, 1146,  181,  182, 1309, 1147,  808,  273, 1309,
      808, 1309, 1309,  273, 1309,  887, 1149, 1309, 1150,  808,
     1309,  273,  808,  890,  890,  273, 1309,  890, 1309, 1042,
      808,  695, 1309,  808, 1309,  890,  695,  890, 1044,  605,
      695, 1309,  605,  180, 1309,  695,  269,  893,  605, 1309,
      695,  605, 1152,  270,  695, 1309, 1309, 1309,  269,  181,
      182, 1047,  271,  272, 1153,  270,  890,  890, 1309, 1309,
      269, 1309,  269, 1309,  271,  272, 1154,  270,  269,  270,
     1309, 1309, 1309,  269, 1309,  270,  271,  272,  271,  272,
      270, 1309, 1309, 1309,  271,  272,  269, 1309,  269,  271,

      272, 1309,  269,  270, 1157,  270, 1309, 1309, 1155,  270,
     1156, 1309,  271,  272,  271,  272,  269, 1309,  271,  272,
      269, 1309,  269,  270,  269, 1309, 1309,  270,  269,  270,
     1158,  270,  271,  272, 1309,  270,  271,  272,  271,  272,
      271,  272,  269, 1309,  271,  272, 1162,  269, 1161,  270,
     1163, 1309, 1309, 1159,  270,  269, 1309, 1160,  271,  272,
      269, 1309,  270,  271,  272, 1309, 1309,  270,  269, 1309,
     1309,  271,  272, 1309, 1309,  270,  271,  272, 1309, 1164,
      269, 1309,  269, 1165,  271,  272,  269,  270, 1309,  270,
     1167, 1309,  180,  270, 1309, 1166,  271,  272,  271,  272,

     1309, 1309,  271,  272, 1309,  269, 1309,  269,  181,  182,
     1170, 1169,  270,  269,  270, 1309, 1309, 1168, 1309, 1309,
      270,  271,  272,  271,  272,  808,  327, 1309,  808,  271,
      272,  327, 1198,  930,  808, 1309,  327,  808,  933,  933,
      327, 1171,  933, 1309, 1172, 1173, 1309, 1074,  808,  746,
      933,  808,  933, 1309,  746, 1309, 1076,  605,  746,  180,
      605, 1309, 1309,  746, 1309,  936,  605, 1309,  746,  605,
     1175, 1309,  746, 1309, 1309,  181,  182,  808,  348, 1079,
      808,  933,  933,  348, 1309,  940,  808, 1309,  348,  808,
      943,  943,  348,  344,  943,  808,  757, 1309,  808, 1081,

      345,  757,  943, 1083,  943,  605,  757, 1309,  605,  346,
      347,  757, 1309,  946, 1309, 1309, 1309, 1177,  605, 1309,
      757,  605,  344, 1309,  757,  344, 1309, 1086,  344,  345,
      344, 1180,  345,  943,  943,  345, 1309,  345,  346,  347,
     1178,  346,  347, 1179,  346,  347,  346,  347,  344, 1309,
     1309, 1309,  344, 1309,  344,  345,  344, 1309, 1309,  345,
     1309,  345, 1309,  345,  346,  347, 1181, 1182,  346,  347,
      346,  347,  346,  347, 1184,  344,  573, 1309, 1309,  344,
     1309,  344,  345,  344, 1309, 1183,  345, 1309,  345, 1309,
      345,  346,  347, 1185, 1309,  346,  347,  346,  347,  346,

      347, 1187, 1309,  808,  380, 1188,  808,  180, 1309,  380,
     1186,  967,  573,  808, 1309,  380,  808,  970,  970,  380,
     1309,  970, 1309,  181,  182, 1101, 1309,  808,  785,  970,
      808,  970, 1309,  785, 1309, 1103,  605,  785, 1200,  605,
     1309, 1309,  785, 1309,  973,  605, 1309,  785,  605, 1190,
      376,  785,  376, 1309, 1309,  376, 1309,  377, 1106,  377,
      970,  970,  377,  376, 1309, 1309,  378,  379,  378,  379,
      377,  378,  379,  180, 1309,  376, 1309,  376, 1191,  378,
      379, 1192,  377, 1309,  377, 1309,  388, 1309, 1309,  181,
      182,  378,  379,  378,  379,  808,  603, 1309,  808, 1196,

     1193,  603,  180,  985,  808, 1309,  603,  808,  180, 1309,
      603, 1194,  180, 1309, 1195,  989,  180, 1114,  181,  182,
      180, 1309, 1309, 1309,  181,  182, 1309, 1309,  181,  182,
      180, 1309,  181,  182,  180, 1309,  181,  182,  180, 1197,
      180, 1309, 1202, 1199, 1309,  180,  181,  182, 1201,  180,
      181,  182,  180, 1309,  181,  182,  181,  182, 1309,  180,
     1204,  181,  182, 1309,  180,  181,  182, 1205,  181,  182,
      180, 1203,  180, 1309, 1206,  181,  182,  180, 1309,  180,
      181,  182,  180, 1309, 1207, 1208,  181,  182,  181,  182,
      180, 1309,  180,  181,  182,  181,  182,  180,  181,  182,

      180, 1210,  180, 1309, 1309, 1309,  181,  182,  181,  182,
      180, 1309,  180,  181,  182, 1309,  181,  182,  181,  182,
     1209, 1211,  180, 1309,  180, 1309,  181,  182,  181,  182,
      180, 1309, 1213, 1309, 1309, 1212,  180, 1309,  181,  182,
      181,  182,  180, 1309, 1309, 1309,  181,  182,  808,  695,
     1214,  808,  181,  182,  695, 1309, 1044, 1309,  181,  182,
     1215,  808, 1309,  695,  808,  269, 1309,  695, 1216,  269,
     1152,  269,  270,  269, 1217, 1309,  270, 1309,  270, 1309,
      270,  271,  272, 1309, 1309,  271,  272,  271,  272,  271,
      272, 1221, 1309,  269, 1309, 1309,  269, 1309,  269, 1309,

      270, 1309, 1218,  270, 1309,  270, 1219, 1309, 1220,  271,
      272,  269,  271,  272,  271,  272,  269, 1309,  270,  269,
     1223, 1309,  269,  270, 1222, 1309,  270,  271,  272,  270,
     1309, 1309,  271,  272,  269,  271,  272, 1309,  271,  272,
     1226,  270,  269, 1309, 1309, 1309, 1309, 1225,  269,  270,
      271,  272, 1227, 1224,  269,  270,  269, 1309,  271,  272,
      269,  270,  269,  270,  271,  272, 1309,  270, 1309,  270,
      271,  272,  271,  272, 1309,  180,  271,  272,  271,  272,
      269, 1228, 1230,  269, 1309, 1229,  269,  270, 1309, 1309,
      270,  181,  182,  270, 1309, 1309,  271,  272, 1309,  271,

      272, 1309,  271,  272, 1231,  808,  746, 1309,  808,  808,
      757,  746,  808, 1076, 1309,  757, 1232, 1083, 1234, 1233,
      808, 1309,  746,  808, 1309, 1309,  746, 1175, 1309,  344,
     1309, 1177,  808, 1309,  757,  808,  345,  344,  757, 1309,
      344, 1309,  344, 1309,  345,  346,  347,  345,  344,  345,
     1309, 1309,  180,  346,  347,  345,  346,  347,  346,  347,
      344, 1309, 1238, 1309,  346,  347, 1235,  345,  181,  182,
     1239,  344, 1309,  344, 1236, 1237,  346,  347,  345,  344,
      345, 1309,  180, 1249, 1309, 1309,  345,  346,  347,  346,
      347,  573,  573,  344, 1309,  346,  347,  344,  181,  182,

      345, 1309, 1240, 1309,  345,  808, 1309,  785,  808,  346,
      347,  785, 1241,  346,  347,  808,  785, 1309,  808,  376,
     1309,  785, 1309, 1103, 1242,  376,  377,  376, 1309, 1309,
     1309,  376,  377, 1309,  377,  378,  379, 1190,  377,  573,
     1309,  378,  379,  378,  379,  376, 1309,  378,  379,  180,
     1243, 1309,  377, 1245, 1309, 1309, 1244,  180, 1309,  180,
     1309,  378,  379, 1309, 1309,  181,  182, 1246,  180, 1309,
      180, 1247,  180,  181,  182,  181,  182,  180, 1309, 1248,
     1309,  388, 1309, 1309,  181,  182,  181,  182,  181,  182,
      180, 1309,  180,  181,  182,  180, 1250, 1309, 1252, 1251,

      180, 1309,  180, 1309,  180, 1309,  181,  182,  181,  182,
      180,  181,  182, 1254, 1309,  180,  181,  182,  181,  182,
      181,  182, 1255,  180, 1253,  180,  181,  182,  180, 1309,
     1257,  181,  182,  180, 1309, 1309,  269, 1309, 1256,  181,
      182,  181,  182,  270,  181,  182, 1309, 1309,  269,  181,
      182, 1309,  271,  272,  269,  270, 1309, 1309, 1309,  269,
     1258,  270, 1261,  180,  271,  272,  270, 1309, 1259,  180,
      271,  272, 1263, 1260, 1262,  271,  272,  269, 1309,  181,
      182,  269, 1309, 1309,  270,  181,  182, 1309,  270, 1309,
     1309, 1309,  269,  271,  272, 1309, 1264,  271,  272,  270,

      269,  927,  525,  269, 1309,  989,  269,  270,  271,  272,
      270,  269, 1265,  270,  269, 1309,  271,  272,  270,  271,
      272,  270,  271,  272,  927,  269, 1309,  271,  272, 1309,
      271,  272,  270,  269, 1267, 1309, 1266,  269, 1309, 1309,
      270,  271,  272, 1309,  270,  269, 1309, 1309,  269,  271,
      272,  344,  270,  271,  272,  270, 1268, 1309,  345, 1269,
     1309,  271,  272,  344,  271,  272,  344,  346,  347, 1309,
      345,  344, 1309,  345,  344, 1309, 1270, 1271,  345,  346,
      347,  345,  346,  347, 1273,  344, 1309,  346,  347, 1272,
      346,  347,  345,  344, 1309,  573,  344, 1309, 1309, 1309,

      345,  346,  347,  345,  376, 1275, 1309,  376, 1274,  346,
      347,  377,  346,  347,  377, 1309, 1277,  180, 1276,  376,
      378,  379,  376,  378,  379,  180,  377, 1309,  388,  377,
      180,  388,  180,  181,  182,  378,  379,  180,  378,  379,
      180,  181,  182,  180, 1279, 1309,  181,  182,  181,  182,
     1278,  180, 1309,  181,  182, 1309,  181,  182,  180,  181,
      182,  845,  180, 1309,  180, 1309, 1309,  181,  182,  180,
     1309, 1281, 1309, 1282,  181,  182,  180, 1280,  181,  182,
      181,  182,  269, 1283,  269,  181,  182,  269, 1284,  270,
      269,  270,  181,  182,  270,  269, 1309,  270,  271,  272,

      271,  272,  270,  271,  272, 1309,  271,  272, 1309,  269,
     1309,  271,  272,  180, 1309, 1309,  270, 1309, 1309, 1309,
      269, 1285, 1288, 1286, 1287,  271,  272,  270, 1309,  181,
      182,  269, 1289,  269, 1309, 1290,  271,  272,  270, 1309,
      270, 1309, 1291, 1309,  269, 1309,  344,  271,  272,  271,
      272,  270, 1309,  345, 1309,  927, 1309,  344, 1309,  344,
      271,  272,  346,  347,  345,  344,  345, 1309, 1309, 1292,
      344, 1309,  345,  346,  347,  346,  347,  345, 1309, 1309,
     1309,  346,  347,  344, 1309, 1293,  346,  347,  344, 1309,
      345, 1296, 1309, 1309, 1309,  345, 1294, 1309,  180,  346,

      347,  376, 1295,  180,  346,  347,  376,  573,  377, 1297,
      573,  180, 1309,  377,  181,  182,  180,  378,  379,  181,
      182, 1309,  378,  379,  269,  388, 1309,  181,  182, 1309,
     1309,  270,  181,  182, 1309, 1298, 1309,  269, 1309, 1019,
      271,  272,  388, 1299,  270,  269, 1300, 1309,  269, 1309,
      269, 1309,  270,  271,  272,  270,  269,  270, 1309, 1301,
     1309,  271,  272,  270,  271,  272,  271,  272,  269, 1309,
      269, 1302,  271,  272,  344,  270, 1303,  270, 1309, 1309,
     1309,  345,  344,  708,  271,  272,  271,  272, 1309,  345,
      346,  347, 1309,  344, 1309,  344,  573,  180,  346,  347,

      345,  344,  345, 1309,  573, 1309, 1309,  180,  345,  346,
      347,  346,  347,  181,  182,  269, 1309,  346,  347, 1304,
      269,  573,  270,  181,  182, 1309,  269,  270, 1305, 1309,
      573,  271,  272,  270,  269, 1309,  271,  272,  344, 1309,
      269,  270,  271,  272, 1309,  345,  344,  270, 1309, 1309,
      271,  272,  269,  345,  346,  347,  271,  272, 1306,  270,
     1309, 1309,  346,  347, 1309, 1309, 1309, 1309,  271,  272,
     1307, 1308, 1309, 1309, 1309, 1309, 1309,  573,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  179,  179, 1309, 1309,  179,  179,  179,
      183, 1309,  183,  183,  183,  183,  183,  183,  183,  183,
      268,  268, 1309, 1309,  268,  268,  268,  273, 1309,  273,
      273,  273,  273,  273,  273,  273,  273,  322,  322, 1309,
     1309,  322,  322,  322,  327, 1309,  327,  327,  327,  327,
      327,  327,  327,  327,  343,  343, 1309, 1309,  343,  343,
      343,  348, 1309,  348,  348,  348,  348,  348,  348,  348,

      348,  375,  375, 1309, 1309,  375,  375,  375,  380, 1309,
      380,  380,  380,  380,  380,  380,  380,  380,  406, 1309,
     1309, 1309,  406, 1309,  406,  406, 1309,  406,  406,  410,
     1309, 1309,  410,  410, 1309,  410,  410,  410,  410,  410,
      411,  411, 1309,  411,  411,  411,  411,  411,  411,  411,
      411,  412, 1309,  412,  412, 1309, 1309,  412, 1309,  412,
      414,  414,  414,  414,  414, 1309,  414,  507,  507,  507,
      507,  507, 1309,  507,  551,  551,  551,  551,  551, 1309,
      551,  561,  561,  561,  561,  561, 1309,  561,  587,  587,
      587,  587,  587, 1309,  587,  603, 1309,  603,  603,  603,

      603,  603,  603,  603,  603,  606, 1309, 1309, 1309,  606,
      606,  606,  606,  606,  606,  606,  695, 1309,  695,  695,
      695,  695,  695,  695,  695,  695,  697, 1309, 1309, 1309,
      697,  697,  697,  697,  697,  697,  697,  746, 1309,  746,
      746,  746,  746,  746,  746,  746,  746,  748, 1309, 1309,
     1309,  748,  748,  748,  748,  748,  748,  748,  605, 1309,
     1309, 1309,  605,  605,  605,  605,  605,  605,  605,  757,
     1309,  757,  757,  757,  757,  757,  757,  757,  757,  759,
     1309, 1309, 1309,  759,  759,  759,  759,  759,  759,  759,
      785, 1309,  785,  785,  785,  785,  785,  785,  785,  785,

      787, 1309, 1309, 1309,  787,  787,  787,  787,  787,  787,
      787,  806,  806, 1309,  806,  806,  806,  806,  806,  806,
      806,  806,  809, 1309, 1309, 1309,  809,  809,  809,  809,
      809,  809,  809,  814, 1309, 1309, 1309,  814,  814,  814,
      814,  814,  814,  814,  885,  885, 1309,  885,  885,  885,
      885,  885,  885,  885,  885,  887, 1309, 1309, 1309,  887,
      887,  887,  887,  887,  887,  887,  893, 1309, 1309, 1309,
      893,  893,  893,  893,  893,  893,  893,  928,  928, 1309,
      928,  928,  928,  928,  928,  928,  928,  928,  930, 1309,
     1309, 1309,  930,  930,  930,  930,  930,  930,  930,  936,

     1309, 1309, 1309,  936,  936,  936,  936,  936,  936,  936,
      808, 1309, 1309, 1309,  808,  808,  808,  808,  808,  808,
      808,  938,  938, 1309,  938,  938,  938,  938,  938,  938,
      938,  938,  940, 1309, 1309, 1309,  940,  940,  940,  940,
      940,  940,  940,  946, 1309, 1309, 1309,  946,  946,  946,
      946,  946,  946,  946,  965,  965, 1309,  965,  965,  965,
      965,  965,  965,  965,  965,  967, 1309, 1309, 1309,  967,
      967,  967,  967,  967,  967,  967,  973, 1309, 1309, 1309,
      973,  973,  973,  973,  973,  973,  973,  982,  982, 1309,
      982,  982,  982,  982,  982,  982,  982,  982,  985, 1309,

     1309, 1309,  985,  985,  985,  985,  985,  985,  985,  987,
      987, 1309,  987,  987,  987,  987,  987,  987,  987,  987,
     1041, 1041, 1309, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1044, 1309, 1309, 1309, 1044, 1044, 1044, 1044, 1044,
     1044, 1044,  697, 1309, 1309, 1309,  697,  697,  697,  697,
      697,  697,  697, 1046, 1046, 1309, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046,  268,  268, 1309, 1309,  268,  268,
      268, 1073, 1073, 1309, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1076, 1309, 1309, 1309, 1076, 1076, 1076, 1076,
     1076, 1076, 1076,  748, 1309, 1309, 1309,  748,  748,  748,

      748,  748,  748,  748, 1078, 1078, 1309, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078,  938,  938, 1309,  938,  938,
      938,  938,  938,  938,  938,  938,  940, 1309, 1309, 1309,
      940,  940,  940,  940,  940,  940,  940, 1080, 1080, 1309,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1083, 1309,
     1309, 1309, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  759,
     1309, 1309, 1309,  759,  759,  759,  759,  759,  759,  759,
     1085, 1085, 1309, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085,  343,  343, 1309, 1309,  343,  343,  343,  965,  965,
     1309,  965,  965,  965,  965,  965,  965,  965,  965,  967,

     1309, 1309, 1309,  967,  967,  967,  967,  967,  967,  967,
     1100, 1100, 1309, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1103, 1309, 1309, 1309, 1103, 1103, 1103, 1103, 1103,
     1103, 1103,  787, 1309, 1309, 1309,  787,  787,  787,  787,
      787,  787,  787, 1105, 1105, 1309, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105,  375,  375, 1309, 1309,  375,  375,
      375,  982,  982, 1309,  982,  982,  982,  982,  982,  982,
      982,  982,  808, 1309, 1309, 1309,  808,  808,  808,  808,
      808,  808,  808,  809, 1309, 1309, 1309,  809,  809,  809,
      809,  809,  809,  809, 1113, 1113, 1309, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113,  987,  987, 1309,  987,  987,
      987,  987,  987,  987,  987,  987,  179,  179, 1309, 1309,
      179,  179,  179, 1151, 1151, 1309, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1174, 1174, 1309, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1176, 1176, 1309, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1189, 1189, 1309, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189,   23, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309
    } ;

static yyconst flex_int16_t yy_chk[8625] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  970,   15,   15,   28,   15,   15,
       15,  943,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  933,   90,   28,   28,   13,   15,   13,  890,   29,
      814,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  811,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  789,   36,  609,   33,   33,   37,  109,  609,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  787,   39,
       39,  761,   39,   38,   39,   38,  274,  274,  759,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  755,  180,   45,
      754,  179,  179,  750,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  748,   45,
      699,   45,  697,   42,  183,   43,   43,  328,  328,   42,
      163,   46,  163,  606,   45,   48,   22,   22,   47,   22,
       41,   43,   53,   43,   43,  602,  163,   46,   46,  269,
       43,   48,   48,   48,   47,   47,   41,   41,   53,   53,

      273,   41,   46,  269,   47,   41,   46,   48,  601,   41,
       41,   48,   41,   44,  273,   41,   49,   44,  349,  349,
       53,   44,   44,   50,   44,  381,  381,   44,  560,   44,
      323,   44,   49,   49,   49,   49,  327,   51,   49,   50,
       50,   50,   49,  344,  323,   50,   52,  701,   49,  559,
      327,  348,  701,   51,   51,   50,   51,  344,   54,  558,
       51,   50,   52,   52,   52,  348,   59,   51,   51,  557,
       51,  376,  556,   57,   54,   54,   54,   56,   52,  555,
       54,   52,   59,   59,   52,  376,   52,   54,  405,   57,
       57,   59,   59,   56,   56,  380,   54,   55,   55,   56,

       58,   55,   56,   56,   57,   55,   55,   60,   55,  380,
      752,   55,   56,   55,   55,  752,   58,   58,   58,  415,
      604,  604,   58,   60,   60,   61,   58,   64,  404,   65,
       64,   60,   61,  415,   64,  181,   65,   60,   58,  696,
      696,   61,   61,   64,   64,   65,   65,   66,  747,  747,
       67,  181,  181,   66,   66,   69,  763,   67,   68,   66,
       67,  763,   69,   66,   66,   68,   67,   67,  175,  175,
       68,   69,   69,  508,   68,   68,   70,   70,   71,  342,
       70,  341,   73,  552,   74,   71,   76,  508,   70,   73,
       70,   74,  562,   76,   71,   71,  340,  552,   73,   73,

       74,   74,   76,   76,   76,  339,  562,  107,   73,  106,
       75,  175,  175,  190,   71,   74,   78,   75,   74,   70,
       70,   72,  588,   78,   86,   74,   75,   75,   72,  190,
      190,   86,   78,   78,  603,   78,  588,   72,   72,  791,
       86,   86,   75,   72,  791,   75,   23,   79,  603,    0,
       72,   72,  190,   72,   79,   72,   72,  695,   72,   77,
       86,   87,    0,   79,   79,   79,   77,   80,   87,   79,
        0,  695,    0,  746,   80,   77,   77,   87,   87,   87,
       77,   81,   77,   80,   80,   82,   80,  746,   81,   80,
       77,  185,   82,  196,  185,   77,   77,   81,   81,   83,

       81,   82,   82,   80,  757,   84,   83,  185,  185,  196,
      196,    0,   84,  189,   81,   83,   83,   82,  757,   85,
       82,   84,   84,  758,  758,   83,   85,    0,   83,  189,
      189,    0,   88,  786,  786,   85,   85,   84,   84,   88,
       89,   85,   84,   84,   88,  189,   96,   89,   88,   88,
      192,   85,   92,   96,   93,   92,   89,   89,    0,   92,
       93,   93,   96,   96,  785,    0,  192,  192,   92,   92,
       93,   93,   94,   94,   94,   94,   94,   94,  785,   94,
        0,   95,    0,    0,   97,    0,   94,  192,   95,   95,
       95,   97,   99,    0,  193,   94,   94,   95,   95,   99,

       97,   97,   98,   98,    0,    0,   98,    0,   99,   99,
      193,  193,  195,    0,   98,  193,   98,  102,  102,  102,
      102,  102,  102,   99,    0,    0,  203,  102,  195,  195,
      102,  104,  104,  104,  104,  104,  104,    0,  195,    0,
        0,  104,  203,  203,  104,   98,   98,  105,  105,  105,
      105,  105,  105,    0,  108,    0,  112,  105,  114,  112,
      105,  108,  115,  112,  114,  114,    0,    0,  194,  115,
      108,  108,  112,  112,  114,  114,  116,    0,  115,  115,
      120,    0,  117,  116,  194,  194,    0,  120,    0,  117,
      194,    0,  116,  116,  117,    0,  120,  120,  117,  117,

      121,  121,  122,  385,  121,    0,  124,    0,  123,  122,
      385,  385,  121,  124,  121,  123,  385,  197,  122,  122,
      125,    0,  124,  124,  123,  123,    0,  125,    0,    0,
        0,    0,  124,  197,  197,    0,  125,  125,  122,  197,
      123,  126,    0,  121,  121,  123,  127,    0,  126,  134,
        0,    0,  125,  127,  128,  125,  134,  126,  126,  126,
        0,  128,  127,  127,  794,  134,  134,  127,  129,  127,
      128,  128,  128,  794,    0,  129,  128,  794,  794,  130,
      794,  134,    0,  127,  129,  129,  130,    0,    0,    0,
      129,    0,  131,    0,  132,  130,  130,  186,  130,  131,

      133,  132,  206,  186,  129,  137,    0,  133,  131,  131,
      132,  132,  137,  186,  186,    0,  133,  133,  206,  206,
      132,  137,  137,  139,  131,  140,  139,  131,  141,    0,
      139,  140,  140,  133,    0,  141,  142,  133,  206,  139,
      139,  140,  140,  142,  141,  141,  143,  143,  145,  199,
      143,    0,  142,  142,    0,  145,  145,  145,  143,    0,
      143,  145,  146,    0,  147,  199,  199,  145,  148,  146,
      199,  147,    0,    0,    0,  148,    0,    0,  146,  146,
      147,  147,    0,  147,  148,  148,    0,  148,    0,  143,
      143,  144,    0,  146,  149,    0,    0,    0,  144,  150,

        0,  149,  151,    0,  148,    0,  150,  144,  144,  151,
      149,  149,    0,  144,    0,  150,  150,    0,  151,  151,
      144,  144,  152,    0,  187,  144,  144,  149,  153,  152,
      154,  151,  187,  187,  150,  153,  198,  154,  152,  152,
      187,  187,    0,    0,  153,  153,  154,  154,  154,    0,
        0,    0,  198,  198,  152,    0,    0,    0,  198,    0,
      152,    0,    0,    0,  153,  155,  155,  155,  155,  155,
      155,    0,  182,  182,  182,  155,    0,  182,  155,  157,
      157,  157,  157,  157,  157,  182,    0,  182,    0,  157,
        0,  200,  157,  158,  158,  158,  158,  158,  158,    0,

      188,  188,  191,  158,  188,    0,  158,  200,  200,    0,
      201,    0,  188,    0,  188,    0,  182,  182,  191,  191,
      200,  200,  200,  202,    0,    0,  201,  201,  191,  200,
      204,  191,  201,  205,    0,  207,    0,    0,  208,  202,
      202,    0,  202,  188,  188,  209,  204,  204,  210,  205,
      205,  207,  207,  211,  208,  208,  205,  207,  208,  202,
      204,  209,  209,  209,  210,  210,    0,  212,    0,  211,
      211,    0,    0,    0,  213,  208,  214,    0,  215,    0,
      210,  216,    0,  212,  212,  217,    0,    0,  211,  212,
      213,  213,  214,  214,  215,  215,  218,  216,  216,  213,

        0,  217,  217,  217,  219,    0,  220,    0,  221,    0,
        0,    0,  218,  218,  214,  222,  218,    0,  216,  223,
      219,  219,  220,  220,  221,  221,  224,  221,  225,    0,
        0,  222,  222,  222,  227,  223,  223,  220,  226,  219,
      228,    0,  224,  224,  225,  225,    0,  222,    0,  229,
      227,  227,    0,  230,  226,  226,  228,  228,    0,    0,
      231,  228,  232,  224,  225,  229,  229,    0,  226,  230,
      230,  233,    0,  234,    0,  227,  231,  231,  232,  232,
        0,    0,    0,  235,  229,  236,    0,  233,  233,  234,
      234,  237,  232,  230,  238,  231,  234,  239,  233,  235,

      235,  236,  236,  241,    0,    0,  240,  237,  237,  243,
      238,  238,    0,  239,  239,  235,    0,  244,    0,  241,
      241,    0,  240,  240,  242,  243,  243,  237,    0,  238,
      239,  238,  240,  244,  244,  243,  245,    0,  240,  241,
      242,  242,  246,    0,  247,  242,    0,    0,  248,    0,
        0,  249,  245,  245,  244,    0,    0,  245,  246,  246,
      247,  247,    0,  250,  248,  248,  248,  249,  249,    0,
      251,    0,  245,  247,  252,  245,  245,  248,  246,  250,
      250,  253,    0,  249,    0,  248,  251,  251,    0,    0,
      252,  252,  254,    0,    0,  250,  252,  253,  253,  253,

      250,  255,    0,  253,  256,  251,    0,  258,  254,  254,
      257,  254,  259,    0,  260,    0,  261,  255,  255,  262,
      256,  256,  254,  258,  258,  258,  257,  257,  259,  259,
      260,  260,  261,  261,    0,  262,  262,  255,  259,  263,
      257,  262,  264,    0,  265,  263,  266,    0,    0,  260,
      267,  261,  266,    0,    0,  263,  263,    0,  264,  264,
      265,  265,  266,  266,  264,    0,  267,  267,  267,  268,
        0,  270,    0,  271,  264,    0,  268,    0,  270,    0,
      271,  265,    0,    0,    0,  268,  268,  270,  270,  271,
      271,  272,  272,  272,  275,    0,  272,  275,  277,    0,

      278,  275,  276,    0,  272,  277,  272,  278,  276,  276,
      275,  275,    0,  279,  277,  277,  278,  278,  276,  276,
      279,    0,    0,    0,    0,    0,  281,  280,  280,  279,
      279,  280,  414,  281,    0,  272,  272,    0,  282,  280,
      283,  280,  281,  281,  284,  282,    0,  283,  414,  414,
      418,  284,  285,    0,  282,  282,  283,  283,  283,  285,
      284,  284,  281,  284,    0,    0,  418,  418,  285,  285,
      280,  280,  282,  286,    0,    0,    0,  287,    0,  288,
      286,  289,  285,  285,  287,  418,  288,    0,  289,  286,
      286,    0,  290,  287,  287,  288,  288,  289,  289,  290,

      291,    0,    0,  292,    0,    0,  287,  291,  290,  290,
      292,  288,    0,  290,  293,    0,  291,  291,  289,  292,
      292,  293,  294,    0,    0,  295,    0,  297,    0,  294,
      293,  293,  295,    0,  297,  419,    0,    0,  294,  294,
      292,  295,  295,  297,  297,    0,    0,    0,  298,  293,
      296,  419,  419,    0,  294,  298,  296,  296,  421,    0,
      296,  419,  295,  299,  298,  298,  296,  296,  298,  300,
      299,  301,  296,    0,  421,  421,  300,  302,  301,  299,
      299,    0,  303,    0,  302,  300,  300,  301,  301,  303,
      304,  300,    0,  302,  302,    0,  302,  304,  303,  303,

      305,  306,  305,  301,  307,  303,  304,  304,  306,  305,
      305,  307,    0,    0,  302,  305,  305,  306,  306,  309,
      307,  307,  308,    0,  420,  306,  309,  310,  308,  308,
      311,  307,    0,    0,  310,  309,  309,  311,  308,  308,
      420,  420,  420,  310,  310,  312,  311,  311,  309,  310,
      313,    0,  312,  314,  311,    0,  315,  313,  308,  310,
      314,  312,  312,  315,  316,    0,  313,  313,    0,  314,
      314,  316,  315,  315,    0,  314,    0,  317,    0,  318,
      316,  316,  319,  316,  317,  313,  318,    0,    0,  319,
      320,  315,    0,  317,  317,  318,  318,  320,  319,  319,

        0,    0,  321,    0,  322,    0,  320,  320,  319,  321,
      324,  322,  317,    0,    0,  325,    0,  324,  321,  321,
      322,  322,  325,    0,    0,  320,  324,  324,  326,  326,
      326,  325,  325,  326,    0,  329,  334,  334,  329,  330,
      334,  326,  329,  326,    0,  330,  330,  335,  334,    0,
      334,  329,  329,    0,  335,  330,  330,  331,  331,  331,
      331,  331,  331,  335,  335,  424,    0,  331,  333,    0,
      331,    0,  326,  326,    0,  333,  333,  333,    0,  334,
      334,  424,  424,  424,  333,  333,  336,  336,  336,  336,
      336,  336,    0,  347,  347,  347,  336,    0,  347,  336,

      338,  338,  338,  338,  338,  338,  347,  343,  347,  345,
      338,  346,    0,  338,  343,    0,  345,    0,  346,    0,
        0,    0,    0,  343,  343,  345,  345,  346,  346,  350,
        0,    0,  350,  351,    0,  352,  350,  347,  347,  351,
      351,    0,  352,  353,  353,  350,  350,  353,    0,  351,
      351,  352,  352,  354,    0,  353,  356,  353,  357,    0,
      354,  355,    0,  356,  358,  357,  422,    0,  355,  354,
      354,  358,  356,  356,  357,  357,    0,  355,  355,    0,
      358,  358,  422,  422,    0,    0,  353,  353,  356,  354,
      359,  355,  355,  360,    0,  357,  362,  359,  361,  358,

      360,  422,    0,  362,    0,  361,  359,  359,  361,  360,
      360,  363,  362,  362,  361,  361,    0,    0,  363,  364,
      361,    0,  359,    0,  365,    0,  364,  363,  363,  423,
      360,  365,  366,  363,    0,  364,  364,  367,    0,  366,
      365,  365,    0,  368,  367,  423,  423,  365,  366,  366,
      368,    0,    0,  367,  367,    0,  364,  369,    0,  368,
      368,  367,  366,  428,  369,  370,    0,    0,  366,  366,
      368,  423,  370,  369,  369,    0,  371,    0,    0,  428,
      428,  370,  370,  371,    0,    0,  369,  370,  372,    0,
      373,    0,  371,  371,    0,  372,  374,  373,    0,    0,

      371,  375,    0,  374,  372,  372,  373,  373,  375,    0,
      372,  427,  374,  374,  377,    0,  378,  375,  375,    0,
        0,  377,    0,  378,    0,  373,  426,  427,  427,  427,
      377,  377,  378,  378,  379,  379,  379,  382,    0,  379,
      382,    0,  426,  426,  382,  383,  426,  379,    0,  379,
        0,  383,  383,  382,  382,  384,  384,  386,    0,  384,
        0,  383,  383,    0,  386,  387,    0,  384,    0,  384,
      388,    0,  387,  386,  386,  386,  389,  388,  379,  379,
        0,  387,  387,  389,  387,    0,  388,  388,    0,    0,
      390,    0,  389,  389,    0,    0,  391,  390,  384,  384,

        0,  392,    0,  391,    0,  389,  390,  390,  392,  393,
        0,  390,  391,  391,    0,  394,  393,  392,  392,    0,
      395,  392,  394,    0,    0,  393,  393,  395,  396,    0,
        0,  394,  394,  391,    0,  396,  395,  395,    0,  394,
        0,  393,  397,    0,  396,  396,  398,    0,    0,  397,
      399,    0,    0,  398,  400,    0,  395,  399,  397,  397,
      396,  400,  398,  398,    0,  398,  399,  399,    0,  425,
      400,  400,    0,    0,    0,    0,  399,  397,  401,  401,
      401,  401,  401,  401,    0,  425,  425,    0,  401,  400,
        0,  401,  403,  403,  403,  403,  403,  403,  425,  813,

      813,  429,  403,  813,  430,  403,  416,    0,    0,  416,
        0,  813,    0,  813,  416,  416,  416,  429,  429,  416,
      430,  430,  432,    0,  431,    0,  416,  416,    0,  416,
      416,  416,    0,  429,  430,  433,    0,  430,  432,  432,
      431,  431,  813,  813,  431,  431,    0,    0,  434,    0,
      435,  433,  433,  432,    0,    0,  433,    0,  416,  416,
      417,  431,  436,  417,  434,  434,  435,  435,  417,  417,
      417,  437,  435,  417,  438,    0,  439,    0,  436,  436,
      417,  417,  440,  417,  417,  417,  434,  437,  437,  442,
      438,  438,  439,  439,  515,  436,  515,    0,  440,  440,

        0,  441,    0,  443,  515,  442,  442,    0,    0,  515,
      515,  440,  417,  417,  444,    0,  439,  441,  441,  443,
      443,  445,    0,  441,  443,  447,  442,    0,    0,  446,
      444,  444,  448,    0,  449,  446,  450,  445,  445,  451,
        0,  447,  447,    0,  444,  446,  446,    0,  448,  448,
      449,  449,  450,  450,  452,  451,  451,  453,  450,    0,
      451,  445,    0,  449,  454,  448,  455,    0,  456,    0,
      452,  452,  457,  453,  453,  458,  452,  459,  453,  460,
      454,  454,  455,  455,  456,  456,  455,    0,  457,  457,
      461,  458,  458,  459,  459,  460,  460,  454,  458,    0,

      462,    0,    0,    0,  457,  463,  461,  461,    0,  464,
        0,  465,    0,    0,  460,  459,  462,  462,  466,  461,
      467,  463,  463,  468,  463,  464,  464,  465,  465,  469,
      462,    0,  465,    0,  466,  466,  467,  467,  470,  468,
      468,  471,  467,  472,    0,  469,  469,    0,  468,  473,
      469,    0,    0,    0,  470,  470,  467,  471,  471,  472,
      472,    0,    0,  474,  471,  473,  473,  475,  472,  470,
      476,    0,  477,    0,  478,    0,    0,    0,  471,  474,
      474,  479,    0,  475,  475,  480,  476,  476,  477,  477,
      478,  478,    0,  475,    0,  481,  478,  479,  479,    0,

      474,  480,  480,  482,    0,  483,    0,  484,  476,  485,
      477,  481,  481,  486,    0,    0,  479,  481,    0,  482,
      482,  483,  483,  484,  484,  485,  485,  483,  488,  486,
      486,  487,    0,    0,  486,  489,    0,  487,  482,    0,
        0,  490,    0,  491,  488,  488,  492,  487,  487,  485,
      493,  489,  489,  494,    0,  495,  489,  490,  490,  491,
      491,    0,  492,  492,    0,  488,  493,  493,  496,  494,
      494,  495,  495,    0,    0,  489,  491,  495,  490,  497,
      493,  495,  492,  498,  496,  496,    0,  499,  496,    0,
      494,  500,    0,    0,  501,  497,  497,  502,    0,  498,

      498,  503,  497,  499,  499,  505,  499,  500,  500,  498,
      501,  501,  504,  502,  502,    0,    0,  503,  503,  498,
        0,  505,  505,  506,    0,  501,  507,    0,  504,  504,
      503,  500,  502,  507,  511,    0,  505,  504,  513,  506,
      506,  511,  507,  507,    0,  513,  807,  807,  807,  807,
      511,  511,  807,    0,  513,  513,  512,    0,    0,    0,
      506,  509,  614,  512,  509,    0,  511,    0,    0,  509,
      509,  509,  512,  512,  509,    0,  509,  615,  614,  614,
      514,  509,  509,  516,  509,  509,  509,  514,  614,    0,
      516,  517,  512,  615,  615,  518,  514,  514,  517,  516,

      516,    0,  518,  616,    0,  611,    0,  517,  517,    0,
      514,  518,  518,  509,  509,  510,    0,  612,  510,  616,
      616,  611,  611,  510,  510,  510,  517,    0,  510,  630,
      510,  616,  518,  612,  612,  510,  510,    0,  510,  510,
      510,  519,  611,  519,  613,  630,  630,  520,    0,    0,
      519,  519,  519,  612,  520,  521,  519,  519,  522,  519,
      613,  613,  521,  520,  520,  522,  523,  510,  510,  520,
      524,  521,  521,  523,  522,  522,    0,  524,    0,    0,
      613,    0,  523,  523,    0,  521,  524,  524,  522,  525,
        0,  523,  526,    0,    0,  524,  525,  527,    0,  526,

      528,  522,    0,  529,  527,  525,  525,  528,  526,  526,
      529,  530,    0,  527,  527,    0,  528,  528,  530,  529,
      529,    0,  526,  526,  531,    0,  527,  530,  530,    0,
        0,  531,  532,  530,    0,  528,  533,    0,  534,  532,
      531,  531,  617,  533,  535,  534,  531,    0,  532,  532,
      536,  535,  533,  533,  534,  534,  537,  536,  617,  617,
      535,  535,  535,  537,  538,    0,  536,  536,  533,  532,
        0,  538,  537,  537,  534,  539,    0,  540,  537,  617,
      538,  538,  539,  541,  540,    0,  536,    0,  542,  538,
      541,  539,  539,  540,  540,  542,    0,    0,    0,  541,

      541,  543,    0,  541,  542,  542,  544,    0,  543,  886,
      886,  886,  886,  544,  545,  886,    0,  543,  543,  540,
      546,  545,  544,  544,    0,  542,  543,  546,  547,    0,
      545,  545,    0,  548,  545,  547,  546,  546,  546,  549,
      548,    0,    0,  544,  547,  547,  549,    0,  547,  548,
      548,  550,    0,    0,    0,  549,  549,    0,  550,  551,
        0,    0,  561,  548,  547,  566,  551,  550,  550,  561,
      549,    0,  566,  565,    0,  551,  551,  570,  561,  561,
      565,  566,  566,    0,  570,    0,    0,  550,  553,  565,
      565,  553,    0,  570,  570,  566,  553,  553,  553,  567,

        0,  553,  621,  553,    0,  565,  567,  570,  553,  553,
      569,  553,  553,  553,  568,  567,  567,  569,  621,  621,
      621,  568,  567,    0,    0,    0,  569,  569,    0,    0,
      568,  568,    0,    0,    0,  567,    0,  571,    0,    0,
      553,  553,  554,  618,  571,  554,    0,  569,    0,  568,
      554,  554,  554,  571,  571,  554,    0,  554,  628,  618,
      618,  572,  554,  554,    0,  554,  554,  554,  572,    0,
        0,  618,  573,    0,  628,  628,  576,  572,  572,  573,
      571,    0,  628,  576,  574,    0,  572,    0,  573,  573,
        0,  574,  576,  576,  554,  554,  563,    0,  576,  563,

      574,  574,    0,    0,  563,  563,  563,    0,    0,  563,
        0,  563,    0,    0,  574,  574,  563,  563,  577,  563,
      563,  563,  575,    0,  578,  577,  579,    0,  624,  575,
      581,  578,    0,  579,  577,  577,    0,  581,  575,  575,
      578,  578,  579,  579,  624,  624,  581,  581,  563,  563,
      564,    0,  581,  564,  624,  577,  578,  575,  564,  564,
      564,  580,  579,  564,    0,  564,    0,  625,  580,  582,
      564,  564,    0,  564,  564,  564,  582,  580,  580,  580,
      583,    0,  584,  625,  625,  582,  582,  583,  585,  584,
        0,    0,    0,  625,    0,  585,  583,  583,  584,  584,

      583,  627,  564,  564,  585,  585,  586,  584,  585,  587,
        0,  582,  593,  586,    0,  629,  587,  627,  627,  593,
        0,    0,  586,  586,  586,  587,  587,  589,  593,  593,
      589,  629,  629,    0,  593,  589,  589,  589,  591,  627,
      589,  633,  589,    0,  629,  591,  594,  589,  589,  595,
      589,  589,  589,  594,  591,  591,  595,  633,  633,    0,
      596,    0,  594,  594,    0,  595,  595,  596,    0,    0,
        0,  597,  633,    0,  591,  594,  596,  596,  597,  589,
      589,  590,  619,    0,  590,  595,    0,  597,  597,  590,
      590,  590,    0,  598,  590,    0,  590,  596,  619,  619,

      598,  590,  590,  623,  590,  590,  590,  599,  597,  598,
      598,  600,    0,  598,  599,  620,    0,  619,  600,  623,
      623,    0,    0,  599,  599,  623,    0,  600,  600,  598,
        0,  620,  620,  590,  590,  592,    0,  622,  599,  626,
      607,  607,  592,  607,  631,    0,  607,  600,  607,    0,
      620,  592,  592,  622,  622,  626,  626,    0,  592,    0,
      631,  631,  607,  622,  632,  592,    0,  592,    0,  622,
      634,  592,  592,  635,  592,  608,  626,  636,  608,  631,
      632,  632,    0,  608,  608,  608,  634,  634,  608,  635,
      635,  635,  637,  636,  636,    0,  608,  638,  608,  608,

      608,  643,  632,  639,    0,    0,    0,  634,  637,  637,
        0,    0,  636,  638,  638,    0,    0,  643,  643,  639,
      639,    0,  638,  637,    0,    0,    0,  608,  608,  610,
      640,    0,  610,    0,    0,    0,    0,  610,  610,  610,
      641,  639,  610,  642,    0,  644,  640,  640,  645,    0,
      610,  640,  610,  610,  610,    0,  641,  641,  646,  642,
      642,  644,  644,  647,  645,  645,    0,  648,    0,  649,
        0,  650,  642,  645,  646,  646,  641,  651,    0,  647,
      647,  610,  610,  648,  648,  649,  649,  650,  650,  647,
      652,    0,  653,  651,  651,  651,  648,  650,  654,    0,

      655,  649,  656,    0,  657,    0,  652,  652,  653,  653,
      658,    0,  652,    0,  654,  654,  655,  655,  656,  656,
      657,  657,  655,  659,    0,  661,  658,  658,  660,  654,
      929,  929,  929,  929,    0,  662,  929,  663,    0,  659,
      659,  661,  661,  664,  660,  660,  661,  658,  665,  659,
      660,  662,  662,  663,  663,  666,    0,    0,  667,  664,
      664,    0,    0,  664,  665,  665,  668,    0,    0,  663,
      669,  666,  666,  666,  667,  667,  670,    0,  665,    0,
        0,  671,  668,  668,  667,    0,  669,  669,  672,    0,
      669,  673,  670,  670,  674,    0,  670,  671,  671,  675,

        0,  676,  668,  677,  672,  672,  678,  673,  673,  680,
      674,  674,  679,    0,    0,  675,  675,  676,  676,  677,
      677,    0,  678,  678,  672,  680,  680,  673,  679,  679,
      679,  681,  674,  682,  675,  683,    0,  676,  684,    0,
        0,    0,  685,  678,    0,  686,    0,  681,  681,  682,
      682,  683,  683,  687,  684,  684,  688,  683,  685,  685,
      685,  686,  686,    0,  682,  689,    0,    0,    0,  687,
      687,  690,  688,  688,  691,    0,    0,    0,  692,    0,
      684,  689,  689,  689,  693,  687,    0,  690,  690,  694,
      691,  691,  688,  690,  692,  692,  691,    0,    0,    0,

      693,  693,  693,    0,  703,  694,  694,  698,  698,  694,
      698,  703,    0,  698,    0,  698,    0,    0,    0,  705,
      703,  703,    0,    0,  703,  704,  705,    0,    0,  698,
      700,  816,  704,  700,    0,  705,  705,    0,  700,  700,
      700,  704,  704,  700,    0,  700,    0,  816,  816,  706,
        0,  700,  707,  700,  700,  700,  706,  705,    0,  707,
      708,  704,    0,  709,    0,  706,  706,  708,  707,  707,
      709,    0,    0,    0,  710,  706,  708,  708,    0,  709,
      709,  710,  700,  700,  702,    0,    0,  702,    0,  707,
      710,  710,  702,  702,  702,  709,  711,  702,    0,  712,

        0,    0,  820,  711,  710,  702,  712,  702,  702,  702,
        0,  710,  711,  711,  713,  712,  712,  714,  820,  820,
        0,  713,    0,  820,  714,  715,  711,    0,  716,  712,
      713,  713,  715,  714,  714,  716,  702,  702,    0,  713,
        0,  715,  715,  717,  716,  716,  716,  718,    0,  821,
      717,  719,    0,    0,  718,  720,  715,    0,  719,  717,
      717,    0,  720,  718,  718,  821,  821,  719,  719,  718,
        0,  720,  720,  719,  721,  821,  722,    0,  723,    0,
      818,  721,  724,  722,    0,  723,    0,  720,    0,  724,
      721,  721,  722,  722,  723,  723,  818,  818,  724,  724,

      724,  725,  818,  726,    0,  727,    0,  721,  725,    0,
      726,  822,  727,  722,    0,    0,  723,  725,  725,  726,
      726,  727,  727,    0,  728,    0,  731,  822,  822,  729,
      725,  728,  730,  731,    0,    0,  729,    0,    0,  730,
      728,  728,  731,  731,  726,  729,  729,  729,  730,  730,
      732,    0,  733,  730,    0,  734,    0,  732,  735,  733,
        0,  823,  734,    0,    0,  735,  732,  732,  733,  733,
      732,  734,  734,    0,  735,  735,  736,  823,  823,  737,
      735,    0,    0,  736,  733,  734,  737,  738,    0,    0,
      741,    0,  736,  736,  738,  737,  737,  741,  736,    0,

        0,  739,    0,  738,  738,  740,  741,  741,  739,  819,
        0,    0,  740,  742,    0,    0,  737,  739,  739,  741,
      742,  740,  740,  738,    0,  819,  819,  739,  819,  742,
      742,  743,    0,  744,    0,    0,  745,  743,  743,    0,
      744,    0,  740,  745,    0,  742,    0,  743,  743,  744,
      744,    0,  745,  745,    0,  749,  749,  744,  749,    0,
        0,  749,    0,  749,    0,    0,  824,  760,  760,    0,
      760,    0,    0,  760,    0,  760,    0,  749,  751,  826,
        0,  751,  824,  824,    0,    0,  751,  751,  751,  760,
      765,  751,    0,  751,    0,  826,  826,  765,  766,  751,

        0,  751,  751,  751,  831,  766,  765,  765,  826,  768,
      765,  767,    0,    0,  766,  766,  768,  769,  767,    0,
      831,  831,  771,    0,  769,  768,  768,  767,  767,  771,
      751,  751,  753,  769,  769,  753,  766,  767,  771,  771,
      753,  753,  753,  770,  771,  753,  768,  772,    0,  769,
      770,  833,    0,  753,  772,  753,  753,  753,  773,  770,
      770,  770,    0,  772,  772,  773,  774,  833,  833,  772,
        0,  776,    0,  774,  773,  773,  817,    0,  776,    0,
        0,    0,  774,  774,  753,  753,  762,  776,  776,  762,
        0,  773,  817,  817,  762,  762,  762,  775,  817,  762,

        0,  762,  832,  774,  775,    0,    0,  762,  817,  762,
      762,  762,  776,  775,  775,  775,  777,    0,  832,  832,
      778,    0,  832,  777,    0,    0,    0,  778,    0,  825,
        0,    0,  777,  777,  777,  779,  778,  778,  762,  762,
      764,  778,  779,  764,    0,  825,  825,    0,  764,  764,
      764,  779,  779,  764,    0,  779,  835,    0,    0,  780,
      825,  764,  781,  764,  764,  764,  780,    0,    0,  781,
      782,    0,  835,  835,  783,  780,  780,  782,  781,  781,
        0,  783,  835,    0,  781,    0,  782,  782,  784,  780,
      783,  783,  764,  764,    0,  784,  793,    0,    0,    0,

      783,    0,  827,  793,  784,  784,  828,  782,  788,  788,
      795,  788,  793,  793,  788,    0,  788,  795,  827,  827,
        0,  796,  828,  828,  828,  784,  795,  795,  796,    0,
      788,  790,  793,  827,  790,    0,    0,  796,  796,  790,
      790,  790,  797,    0,  790,    0,  790,    0,    0,  797,
      798,  796,  790,  800,  790,  790,  790,  798,  797,  797,
      800,  799,    0,    0,  801,    0,  798,  798,  799,  800,
      800,  801,  797,  840,    0,  798,    0,  799,  799,    0,
      801,  801,    0,  790,  790,  792,  801,    0,  792,  840,
      840,  800,  799,  792,  792,  792,  802,    0,  792,  840,

      803,    0,    0,  802,  804,    0,  792,  803,  792,  792,
      792,  804,  802,  802,  829,    0,  803,  803,  805,    0,
      804,  804,    0,    0,    0,  805,    0,    0,  830,  803,
      829,  829,  802,  836,  805,  805,  804,  792,  792,    0,
      806,  806,  805,  806,  830,  830,  806,    0,  806,  836,
      836,  829,  810,  810,  836,  810,    0,    0,  810,  830,
      810,    0,  806,  809,    0,  839,  809,    0,    0,    0,
        0,  809,  809,  809,  810,  834,  809,  815,  815,  837,
      815,  839,  839,  815,  809,  815,  809,  809,  809,  838,
        0,  834,  834,  842,    0,  837,  837,  834,    0,  815,

      837,    0,  839,    0,    0,  838,  838,  843,    0,  842,
      842,  838,    0,    0,    0,  809,  809,  812,  841,    0,
      812,    0,    0,  843,  843,  812,  812,  812,  843,  844,
      812,  845,    0,  847,  841,  841,  841,  846,  812,  848,
      812,  812,  812,  849,    0,  844,  844,  845,  845,  847,
      847,    0,    0,  846,  846,  848,  848,    0,  850,  849,
      849,  851,    0,    0,    0,  849,  852,  844,  853,  812,
      812,  854,    0,  846,  850,  850,    0,  851,  851,    0,
      848,    0,  852,  852,  853,  853,    0,  854,  854,  855,
        0,    0,  851,  856,    0,  852,  857,    0,  850,  858,

        0,  859,    0,  853,  860,  855,  855,  854,  854,  856,
      856,  861,  857,  857,  862,  858,  858,  859,  859,  858,
      860,  860,  863,    0,  864,  857,  866,  861,  861,  865,
      862,  862,    0,  861,    0,  860,  862,    0,  863,  863,
      864,  864,  866,  866,    0,  865,  865,    0,  867,    0,
      868,  863,  869,    0,  865,    0,    0,  870,    0,  871,
        0,  864,  872,  866,  867,  867,  868,  868,  869,  869,
      867,    0,  869,  870,  870,  871,  871,  873,  872,  872,
      874,    0,  875,  870,  876,    0,  877,    0,  872,  878,
        0,  879,    0,  873,  873,    0,  874,  874,  875,  875,

      876,  876,  877,  877,  874,  878,  878,  879,  879,    0,
      880,    0,  873,  881,    0,  882,    0,  877,  883,    0,
        0,  884,    0,  989,    0,  878,  880,  880,    0,  881,
      881,  882,  882,    0,  883,  883,    0,  884,  884,  989,
      989,  885,  885,    0,  885,  880,  884,  885,    0,  885,
        0,    0,  895,  883,  888,  888,    0,  888,    0,  895,
      888,    0,  888,  885,  887,    0,  998,  887,  895,  895,
        0,    0,  887,  887,  887,    0,  888,  887,  895,  887,
      892,  892,  998,  998,  892,  887,    0,  887,  887,  887,
      894,  894,  892,  894,  892,  998,  894,  896,  894,  939,

      939,  939,  939,  897,  896,  939,    0,    0,    0,    0,
      897,    0,  894,  896,  896,    0,  887,  887,  891,  897,
      897,  891,    0,  892,  892,    0,  891,  891,  891,  898,
        0,  891,  966,  966,  966,  966,  898,    0,  966,  891,
      897,  891,  891,  891,  899,  898,  898,  900,    0,  901,
        0,  899,  902,  898,  900,    0,  901,    0,    0,  902,
      899,  899,    0,  900,  900,  901,  901,    0,  902,  902,
      891,  891,  893,  902,  901,  893,    0,    0,    0,  899,
      893,  893,  893,  903,    0,  893,    0,  893,  992,    0,
      903,  904,    0,  893,  905,  893,  893,  893,  904,  903,

      903,  905,  906,    0,  992,  992,    0,  904,  904,  906,
      905,  905,    0,    0,  907,    0,  908,    0,  906,  906,
      903,  907,  904,  908,  893,  893,  992,    0,  909,  905,
      907,  907,  908,  908,  906,  909,  910,    0,    0,    0,
      911,    0,  908,  910,  909,  909,  907,  911,  912,  909,
        0,  913,  910,  910,  914,  912,  911,  911,  913,    0,
        0,  914,  915,    0,  912,  912,    0,  913,  913,  915,
      914,  914,  914,  910,  916,  913,  917,    0,  915,  915,
      918,  916,    0,  917,    0,    0,    0,  918,  990,    0,
      916,  916,  917,  917,    0,  919,  918,  918,    0,  915,

      920,  918,  919,  921,  990,  990,  916,  920,  917,    0,
      921,  919,  919,    0,  922,  919,  920,  920,  923,  921,
      921,  922,  925,  990,    0,  923,  924,    0,    0,  925,
      922,  922,  922,  924,  923,  923,    0,    0,  925,  925,
      923,    0,  924,  924,  924,  926,    0,  927,    0,    0,
      928,  928,  926,  928,  927,    0,  928,  925,  928,    0,
        0,  926,  926,  927,  927,  935,  935,    0,    0,  935,
      926,    0,  928,  930,    0,    0,  930,  935,    0,  935,
        0,  930,  930,  930,  931,  931,  930,  931,  930,    0,
      931,    0,  931,    0,  930,    0,  930,  930,  930,  937,

      937,    0,  937,    0,    0,  937,  931,  937,  935,  935,
      938,  938,  994,  938,    0,    0,  938,    0,  938,  945,
      945,  937,    0,  945,    0,  930,  930,  934,  994,  994,
      934,  945,  938,  945,    0,  934,  934,  934,  941,  941,
      934,  941,    0,  994,  941,    0,  941,    0,  934,    0,
      934,  934,  934,  947,  947,    0,  947,  948,    0,  947,
      941,  947,  945,  945,  948,  983,  983,  983,  983,    0,
      949,  983,    0,  948,  948,  947,    0,  949,    0,  934,
      934,  936,    0,  948,  936,    0,  949,  949,    0,  936,
      936,  936,  950,    0,  936,    0,  936,    0,    0,  950,

        0,    0,  936,  952,  936,  936,  936,  949,  950,  950,
      952,  951,    0,    0,  954,    0,  950,    0,  951,  952,
      952,  954,    0,    0,    0,  955,    0,  951,  951,    0,
      954,  954,  955,  936,  936,  940,  993,    0,  940,    0,
      952,  955,  955,  940,  940,  940,  951,  953,  940,  954,
      940,    0,  993,  993,  953,  956,  940,  955,  940,  940,
      940,    0,  956,  953,  953,    0,  957,    0,  993,  958,
        0,  956,  956,  957,  995,    0,  958,    0,  953,    0,
        0,  956,  957,  957,    0,  958,  958,  940,  940,  942,
      995,  995,  942,  958,    0,  995,    0,  942,  942,  942,

      959,    0,  942,  957,  942,    0,    0,  959,  960,    0,
      942,  991,  942,  942,  942,  960,  959,  959,  959,  962,
        0,    0,  961,    0,  960,  960,  962,  991,  991,  961,
        0,  988,  988,  988,  988,  962,  962,  988,  961,  961,
      962,  942,  942,  944,  999,  960,  944,  991,    0,    0,
        0,  944,  944,  944,  961,  963,  944,    0,  964,    0,
      999,  999,  963,    0,  944,  964,  944,  944,  944,    0,
      999,  963,  963,  963,  964,  964,  965,  965,    0,  965,
      964,    0,  965,    0,  965, 1005,  968,  968,    0,  968,
        0,    0,  968,    0,  968,  944,  944,  946,  965, 1002,

      946, 1005, 1005,    0,    0,  946,  946,  946,  968,    0,
      946,    0,  946,  972,  972, 1002, 1002,  972,  946, 1002,
      946,  946,  946,  974,  974,  972,  974,  972,    0,  974,
      975,  974,    0,  982,  982,    0,  982,  975,    0,  982,
        0,  982,    0,    0,    0,  974,  975,  975,    0,  946,
      946,  967,  975,    0,  967,  982,  972,  972,    0,  967,
      967,  967,  976,    0,  967,    0,  967,    0, 1000,  976,
        0,    0,  967,  977,  967,  967,  967,    0,  976,  976,
      977,  978,    0,    0, 1000, 1000,    0,  976,  978,  977,
      977,    0,    0,  980,  977,    0,    0,  978,  978,    0,

      980,    0,  978,  967,  967,  969, 1000,    0,  969,  980,
      980,  980,    0,  969,  969,  969,  979,    0,  969,    0,
      969,    0,    0,  979, 1003,    0,  969,    0,  969,  969,
      969,  981,  979,  979, 1006,    0,  979,    0,  981,    0,
     1003, 1003,  984,  984,    0,    0,  984,  981,  981,    0,
     1006, 1006,    0,    0,  984,    0,  984,  969,  969,  971,
        0, 1003,  971,    0,    0, 1006,  981,  971,  971,  971,
      986,  986,  971,  986,    0,    0,  986,    0,  986,    0,
      971,  996,  971,  971,  971,  984,  984,  987,  987, 1007,
      987, 1012,  986,  987,    0,  987,    0,  996,  996,    0,

        0,    0,  997,  996,    0, 1007, 1007, 1012, 1012,  987,
        0,  971,  971,  973, 1008,    0,  973,    0,  997,  997,
        0,  973,  973,  973,  997, 1001,  973, 1004,  973, 1009,
     1008, 1008,    0,    0,  973,    0,  973,  973,  973, 1010,
        0, 1001, 1001, 1004, 1004, 1009, 1009, 1001,    0, 1004,
        0, 1008, 1011,    0,    0, 1010, 1010, 1013,    0,    0,
        0, 1010, 1014,    0, 1009,  973,  973,  985, 1011, 1011,
      985,    0,    0, 1013, 1013,  985,  985,  985, 1014, 1014,
      985,    0,    0, 1011, 1015,    0, 1016,    0,  985, 1017,
      985,  985,  985, 1018,    0, 1019,    0, 1020, 1014,    0,

     1015, 1015, 1016, 1016,    0, 1017, 1017, 1021, 1016, 1018,
     1018, 1019, 1019, 1020, 1020, 1017, 1022,    0, 1023,  985,
      985, 1024, 1020, 1021, 1021, 1025,    0, 1026,    0, 1021,
     1027,    0, 1022, 1022, 1023, 1023, 1023, 1024, 1024, 1028,
        0, 1025, 1025, 1026, 1026, 1029, 1027, 1027, 1030,    0,
        0, 1031, 1027, 1022, 1032, 1028, 1028,    0, 1033,    0,
     1034, 1029, 1029, 1035, 1030, 1030, 1030, 1031, 1031, 1036,
     1032, 1032, 1037, 1031, 1033, 1033, 1034, 1034,    0, 1035,
     1035, 1038,    0, 1039,    0, 1036, 1036, 1040, 1037, 1037,
        0, 1032,    0,    0, 1037, 1033,    0, 1038, 1038, 1039,

     1039,    0, 1034, 1040, 1040,    0, 1036, 1041, 1041,    0,
     1041,    0,    0, 1041,    0, 1041, 1038,    0, 1039, 1042,
     1042, 1042, 1042, 1043, 1043, 1042,    0, 1043,    0, 1041,
     1045, 1045,    0, 1045,    0, 1043, 1045, 1043, 1045, 1046,
     1046,    0, 1046, 1116,    0, 1046, 1048, 1046, 1047, 1047,
     1047, 1047, 1045, 1048, 1047,    0,    0,    0, 1049, 1116,
     1116, 1046, 1048, 1048, 1048, 1049, 1043, 1043,    0,    0,
     1050,    0, 1051,    0, 1049, 1049, 1049, 1050, 1052, 1051,
        0,    0,    0, 1053,    0, 1052, 1050, 1050, 1051, 1051,
     1053,    0,    0,    0, 1052, 1052, 1054,    0, 1055, 1053,

     1053,    0, 1056, 1054, 1052, 1055,    0,    0, 1050, 1056,
     1051,    0, 1054, 1054, 1055, 1055, 1057,    0, 1056, 1056,
     1058,    0, 1059, 1057, 1060,    0,    0, 1058, 1061, 1059,
     1056, 1060, 1057, 1057,    0, 1061, 1058, 1058, 1059, 1059,
     1060, 1060, 1062,    0, 1061, 1061, 1060, 1063, 1059, 1062,
     1061,    0,    0, 1057, 1063, 1064,    0, 1058, 1062, 1062,
     1065,    0, 1064, 1063, 1063,    0,    0, 1065, 1066,    0,
        0, 1064, 1064,    0,    0, 1066, 1065, 1065,    0, 1062,
     1067,    0, 1068, 1064, 1066, 1066, 1069, 1067,    0, 1068,
     1066,    0, 1118, 1069,    0, 1065, 1067, 1067, 1068, 1068,

        0,    0, 1069, 1069,    0, 1070,    0, 1071, 1118, 1118,
     1069, 1068, 1070, 1072, 1071,    0,    0, 1067,    0,    0,
     1072, 1070, 1070, 1071, 1071, 1073, 1073,    0, 1073, 1072,
     1072, 1073, 1118, 1073, 1074, 1074, 1074, 1074, 1075, 1075,
     1074, 1070, 1075,    0, 1071, 1072,    0, 1073, 1077, 1077,
     1075, 1077, 1075,    0, 1077,    0, 1077, 1078, 1078, 1119,
     1078,    0,    0, 1078,    0, 1078, 1079, 1079, 1079, 1079,
     1077,    0, 1079,    0,    0, 1119, 1119, 1080, 1080, 1078,
     1080, 1075, 1075, 1080,    0, 1080, 1081, 1081, 1081, 1081,
     1082, 1082, 1081, 1089, 1082, 1084, 1084,    0, 1084, 1080,

     1089, 1084, 1082, 1084, 1082, 1085, 1085,    0, 1085, 1089,
     1089, 1085,    0, 1085,    0,    0,    0, 1084, 1086, 1086,
     1086, 1086, 1087,    0, 1086, 1088,    0, 1085, 1090, 1087,
     1091, 1089, 1088, 1082, 1082, 1090,    0, 1091, 1087, 1087,
     1087, 1088, 1088, 1088, 1090, 1090, 1091, 1091, 1092,    0,
        0,    0, 1093,    0, 1094, 1092, 1095,    0,    0, 1093,
        0, 1094,    0, 1095, 1092, 1092, 1090, 1091, 1093, 1093,
     1094, 1094, 1095, 1095, 1093, 1096, 1094,    0,    0, 1097,
        0, 1099, 1096, 1098,    0, 1092, 1097,    0, 1099,    0,
     1098, 1096, 1096, 1095,    0, 1097, 1097, 1099, 1099, 1098,

     1098, 1097,    0, 1100, 1100, 1099, 1100, 1121,    0, 1100,
     1096, 1100, 1098, 1101, 1101, 1101, 1101, 1102, 1102, 1101,
        0, 1102,    0, 1121, 1121, 1100,    0, 1104, 1104, 1102,
     1104, 1102,    0, 1104,    0, 1104, 1105, 1105, 1121, 1105,
        0,    0, 1105,    0, 1105, 1106, 1106, 1106, 1106, 1104,
     1107, 1106, 1108,    0,    0, 1109,    0, 1107, 1105, 1108,
     1102, 1102, 1109, 1110,    0,    0, 1107, 1107, 1108, 1108,
     1110, 1109, 1109, 1115,    0, 1111,    0, 1112, 1108, 1110,
     1110, 1109, 1111,    0, 1112,    0, 1107,    0,    0, 1115,
     1115, 1111, 1111, 1112, 1112, 1113, 1113,    0, 1113, 1115,

     1110, 1113, 1117, 1113, 1114, 1114, 1114, 1114, 1120,    0,
     1114, 1111, 1122,    0, 1112, 1115, 1123, 1113, 1117, 1117,
     1124,    0,    0,    0, 1120, 1120,    0,    0, 1122, 1122,
     1125,    0, 1123, 1123, 1126,    0, 1124, 1124, 1127, 1117,
     1128,    0, 1124, 1120,    0, 1129, 1125, 1125, 1123, 1131,
     1126, 1126, 1130,    0, 1127, 1127, 1128, 1128,    0, 1132,
     1127, 1129, 1129,    0, 1133, 1131, 1131, 1129, 1130, 1130,
     1134, 1126, 1135,    0, 1130, 1132, 1132, 1136,    0, 1137,
     1133, 1133, 1138,    0, 1131, 1133, 1134, 1134, 1135, 1135,
     1139,    0, 1140, 1136, 1136, 1137, 1137, 1141, 1138, 1138,

     1142, 1137, 1143,    0,    0,    0, 1139, 1139, 1140, 1140,
     1144,    0, 1145, 1141, 1141,    0, 1142, 1142, 1143, 1143,
     1136, 1140, 1146,    0, 1147,    0, 1144, 1144, 1145, 1145,
     1148,    0, 1144,    0,    0, 1142, 1149,    0, 1146, 1146,
     1147, 1147, 1150,    0,    0,    0, 1148, 1148, 1151, 1151,
     1145, 1151, 1149, 1149, 1151,    0, 1151,    0, 1150, 1150,
     1147, 1152, 1152, 1152, 1152, 1153,    0, 1152, 1149, 1154,
     1151, 1156, 1153, 1155, 1150,    0, 1154,    0, 1156,    0,
     1155, 1153, 1153,    0,    0, 1154, 1154, 1156, 1156, 1155,
     1155, 1156,    0, 1157,    0,    0, 1158,    0, 1159,    0,

     1157,    0, 1153, 1158,    0, 1159, 1154,    0, 1155, 1157,
     1157, 1160, 1158, 1158, 1159, 1159, 1161,    0, 1160, 1162,
     1159,    0, 1163, 1161, 1157,    0, 1162, 1160, 1160, 1163,
        0,    0, 1161, 1161, 1164, 1162, 1162,    0, 1163, 1163,
     1162, 1164, 1165,    0,    0,    0,    0, 1161, 1166, 1165,
     1164, 1164, 1164, 1160, 1167, 1166, 1168,    0, 1165, 1165,
     1169, 1167, 1170, 1168, 1166, 1166,    0, 1169,    0, 1170,
     1167, 1167, 1168, 1168,    0, 1199, 1169, 1169, 1170, 1170,
     1171, 1166, 1168, 1172,    0, 1167, 1173, 1171,    0,    0,
     1172, 1199, 1199, 1173,    0,    0, 1171, 1171,    0, 1172,

     1172,    0, 1173, 1173, 1170, 1174, 1174,    0, 1174, 1176,
     1176, 1174, 1176, 1174,    0, 1176, 1171, 1176, 1173, 1172,
     1175, 1175, 1175, 1175,    0,    0, 1175, 1174,    0, 1178,
        0, 1176, 1177, 1177, 1177, 1177, 1178, 1179, 1177,    0,
     1180,    0, 1181,    0, 1179, 1178, 1178, 1180, 1182, 1181,
        0,    0, 1198, 1179, 1179, 1182, 1180, 1180, 1181, 1181,
     1183,    0, 1181,    0, 1182, 1182, 1178, 1183, 1198, 1198,
     1182, 1184,    0, 1185, 1179, 1180, 1183, 1183, 1184, 1186,
     1185,    0, 1202, 1198,    0,    0, 1186, 1184, 1184, 1185,
     1185, 1185, 1184, 1187,    0, 1186, 1186, 1188, 1202, 1202,

     1187,    0, 1183,    0, 1188, 1190, 1190, 1190, 1190, 1187,
     1187, 1190, 1186, 1188, 1188, 1189, 1189,    0, 1189, 1191,
        0, 1189,    0, 1189, 1187, 1192, 1191, 1193,    0,    0,
        0, 1194, 1192,    0, 1193, 1191, 1191, 1189, 1194, 1188,
        0, 1192, 1192, 1193, 1193, 1195,    0, 1194, 1194, 1196,
     1191,    0, 1195, 1193,    0,    0, 1192, 1197,    0, 1200,
        0, 1195, 1195,    0,    0, 1196, 1196, 1194, 1201,    0,
     1203, 1196, 1204, 1197, 1197, 1200, 1200, 1205,    0, 1197,
        0, 1195,    0,    0, 1201, 1201, 1203, 1203, 1204, 1204,
     1206,    0, 1207, 1205, 1205, 1208, 1200,    0, 1205, 1201,

     1209,    0, 1210,    0, 1211,    0, 1206, 1206, 1207, 1207,
     1212, 1208, 1208, 1208,    0, 1213, 1209, 1209, 1210, 1210,
     1211, 1211, 1209, 1214, 1207, 1215, 1212, 1212, 1216,    0,
     1212, 1213, 1213, 1217,    0,    0, 1218,    0, 1210, 1214,
     1214, 1215, 1215, 1218, 1216, 1216,    0,    0, 1219, 1217,
     1217,    0, 1218, 1218, 1220, 1219,    0,    0,    0, 1221,
     1214, 1220, 1218, 1248, 1219, 1219, 1221,    0, 1216, 1247,
     1220, 1220, 1220, 1217, 1219, 1221, 1221, 1222,    0, 1248,
     1248, 1223,    0,    0, 1222, 1247, 1247,    0, 1223,    0,
        0,    0, 1224, 1222, 1222,    0, 1221, 1223, 1223, 1224,

     1225, 1222, 1224, 1226,    0, 1247, 1227, 1225, 1224, 1224,
     1226, 1228, 1223, 1227, 1229,    0, 1225, 1225, 1228, 1226,
     1226, 1229, 1227, 1227, 1225, 1230,    0, 1228, 1228,    0,
     1229, 1229, 1230, 1231, 1229,    0, 1228, 1232,    0,    0,
     1231, 1230, 1230,    0, 1232, 1233,    0,    0, 1234, 1231,
     1231, 1235, 1233, 1232, 1232, 1234, 1230,    0, 1235, 1232,
        0, 1233, 1233, 1236, 1234, 1234, 1237, 1235, 1235,    0,
     1236, 1238,    0, 1237, 1239,    0, 1234, 1235, 1238, 1236,
     1236, 1239, 1237, 1237, 1237, 1240,    0, 1238, 1238, 1236,
     1239, 1239, 1240, 1241,    0, 1240, 1242,    0,    0,    0,

     1241, 1240, 1240, 1242, 1243, 1239,    0, 1244, 1238, 1241,
     1241, 1243, 1242, 1242, 1244,    0, 1242, 1249, 1241, 1245,
     1243, 1243, 1246, 1244, 1244, 1250, 1245,    0, 1243, 1246,
     1251, 1244, 1252, 1249, 1249, 1245, 1245, 1253, 1246, 1246,
     1254, 1250, 1250, 1255, 1246,    0, 1251, 1251, 1252, 1252,
     1245, 1256,    0, 1253, 1253,    0, 1254, 1254, 1257, 1255,
     1255, 1250, 1258,    0, 1259,    0,    0, 1256, 1256, 1260,
        0, 1254,    0, 1256, 1257, 1257, 1280, 1253, 1258, 1258,
     1259, 1259, 1261, 1257, 1262, 1260, 1260, 1263, 1258, 1261,
     1264, 1262, 1280, 1280, 1263, 1265,    0, 1264, 1261, 1261,

     1262, 1262, 1265, 1263, 1263,    0, 1264, 1264,    0, 1266,
        0, 1265, 1265, 1283,    0,    0, 1266,    0,    0,    0,
     1267, 1261, 1264, 1262, 1263, 1266, 1266, 1267,    0, 1283,
     1283, 1268, 1265, 1269,    0, 1266, 1267, 1267, 1268,    0,
     1269,    0, 1267,    0, 1270,    0, 1271, 1268, 1268, 1269,
     1269, 1270,    0, 1271,    0, 1268,    0, 1272,    0, 1274,
     1270, 1270, 1271, 1271, 1272, 1273, 1274,    0,    0, 1269,
     1275,    0, 1273, 1272, 1272, 1274, 1274, 1275,    0,    0,
        0, 1273, 1273, 1276,    0, 1271, 1275, 1275, 1277,    0,
     1276, 1274,    0,    0,    0, 1277, 1272,    0, 1281, 1276,

     1276, 1278, 1273, 1282, 1277, 1277, 1279, 1275, 1278, 1276,
     1277, 1284,    0, 1279, 1281, 1281, 1298, 1278, 1278, 1282,
     1282,    0, 1279, 1279, 1285, 1278,    0, 1284, 1284,    0,
        0, 1285, 1298, 1298,    0, 1281,    0, 1286,    0, 1282,
     1285, 1285, 1279, 1284, 1286, 1287, 1285,    0, 1288,    0,
     1289,    0, 1287, 1286, 1286, 1288, 1290, 1289,    0, 1286,
        0, 1287, 1287, 1290, 1288, 1288, 1289, 1289, 1291,    0,
     1292, 1287, 1290, 1290, 1293, 1291, 1290, 1292,    0,    0,
        0, 1293, 1294, 1288, 1291, 1291, 1292, 1292,    0, 1294,
     1293, 1293,    0, 1295,    0, 1296, 1293, 1299, 1294, 1294,

     1295, 1297, 1296,    0, 1294,    0,    0, 1305, 1297, 1295,
     1295, 1296, 1296, 1299, 1299, 1300,    0, 1297, 1297, 1295,
     1301, 1297, 1300, 1305, 1305,    0, 1302, 1301, 1299,    0,
     1296, 1300, 1300, 1302, 1303,    0, 1301, 1301, 1304,    0,
     1306, 1303, 1302, 1302,    0, 1304, 1307, 1306,    0,    0,
     1303, 1303, 1308, 1307, 1304, 1304, 1306, 1306, 1302, 1308,
        0,    0, 1307, 1307,    0,    0,    0,    0, 1308, 1308,
     1304, 1306,    0,    0,    0,    0,    0, 1307, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1315, 1315,    0,    0, 1315, 1315, 1315,
     1316,    0, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1317, 1317,    0,    0, 1317, 1317, 1317, 1318,    0, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319,    0,
        0, 1319, 1319, 1319, 1320,    0, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1321, 1321,    0,    0, 1321, 1321,
     1321, 1322,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322,

     1322, 1323, 1323,    0,    0, 1323, 1323, 1323, 1324,    0,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325,    0,
        0,    0, 1325,    0, 1325, 1325,    0, 1325, 1325, 1326,
        0,    0, 1326, 1326,    0, 1326, 1326, 1326, 1326, 1326,
     1327, 1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1328,    0, 1328, 1328,    0,    0, 1328,    0, 1328,
     1329, 1329, 1329, 1329, 1329,    0, 1329, 1330, 1330, 1330,
     1330, 1330,    0, 1330, 1331, 1331, 1331, 1331, 1331,    0,
     1331, 1332, 1332, 1332, 1332, 1332,    0, 1332, 1333, 1333,
     1333, 1333, 1333,    0, 1333, 1334,    0, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1335,    0,    0,    0, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1336,    0, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1337,    0,    0,    0,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,    0, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1339,    0,    0,
        0, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340,    0,
        0,    0, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341,
        0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
        0,    0,    0, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1344,    0,    0,    0, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1345, 1345,    0, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1346,    0,    0,    0, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1347,    0,    0,    0, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1348, 1348,    0, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1349,    0,    0,    0, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1350,    0,    0,    0,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351,    0,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352,    0,
        0,    0, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,

        0,    0,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1354,    0,    0,    0, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1355, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1356,    0,    0,    0, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1357,    0,    0,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1358, 1358,    0, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1359,    0,    0,    0, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1360,    0,    0,    0,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361,    0,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1362,    0,

        0,    0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,
     1363,    0, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1364, 1364,    0, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1365,    0,    0,    0, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1366,    0,    0,    0, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367, 1367,    0, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1368, 1368,    0,    0, 1368, 1368,
     1368, 1369, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1370,    0,    0,    0, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1371,    0,    0,    0, 1371, 1371, 1371,

     1371, 1371, 1371, 1371, 1372, 1372,    0, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1373, 1373,    0, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1374,    0,    0,    0,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375,    0,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376,    0,
        0,    0, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
        0,    0,    0, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1378, 1378,    0, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1379, 1379,    0,    0, 1379, 1379, 1379, 1380, 1380,
        0, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,

        0,    0,    0, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1382, 1382,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1383,    0,    0,    0, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1384,    0,    0,    0, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1385, 1385,    0, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1386, 1386,    0,    0, 1386, 1386,
     1386, 1387, 1387,    0, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1388,    0,    0,    0, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1389,    0,    0,    0, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1390, 1390,    0, 1390, 1390, 1390,

     1390, 1390, 1390, 1390, 1390, 1391, 1391,    0, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392,    0,    0,
     1392, 1392, 1392, 1393, 1393,    0, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1394, 1394,    0, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1395, 1395,    0, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396,    0, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "./lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2908 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "./lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3115 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1310 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8568 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "./lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "./lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "./lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "./lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "./lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "./lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "./lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "./lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "./lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "./lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "./lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "./lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "./lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "./lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "./lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "./lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "./lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "./lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "./lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "./lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "./lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "./lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "./lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "./lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "./lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "./lexer.ll"
return KW_CHECK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "./lexer.ll"
return KW_LOOP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "./lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "./lexer.ll"
return KW_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "./lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "./lexer.ll"
return KW_GET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "./lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "./lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "./lexer.ll"
return KW_MATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "./lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "./lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "./lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "./lexer.ll"
return KW_SET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "./lexer.ll"
return KW_SHOW;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "./lexer.ll"
return KW_ON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "./lexer.ll"
return KW_OFF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "./lexer.ll"
return KW_TRACE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "./lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "./lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "./lexer.ll"
return KW_DO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "./lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "./lexer.ll"
return KW_BODY;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "./lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "./lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "./lexer.ll"
return KW_SELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "./lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "./lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "./lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "./lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "./lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "./lexer.ll"
return KW_PRINT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "./lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "./lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "./lexer.ll"
return KW_COLOR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "./lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "./lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "./lexer.ll"
return KW_FLAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "./lexer.ll"
return KW_WITH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "./lexer.ll"
return KW_PARENS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "./lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "./lexer.ll"
return KW_GC;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "./lexer.ll"
return KW_TIME;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "./lexer.ll"
return KW_STATS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "./lexer.ll"
return KW_TIMING;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "./lexer.ll"
return KW_CMD;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "./lexer.ll"
return KW_ALL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "./lexer.ll"
return KW_MODULES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "./lexer.ll"
return KW_MODULE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "./lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "./lexer.ll"
return KW_SORTS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "./lexer.ll"
return KW_OPS2;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "./lexer.ll"
return KW_VARS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "./lexer.ll"
return KW_MBS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "./lexer.ll"
return KW_EQS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "./lexer.ll"
return KW_RLS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "./lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "./lexer.ll"
return KW_KINDS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "./lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "./lexer.ll"
return KW_COUNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "./lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "./lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "./lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "./lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "./lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "./lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "./lexer.ll"
return KW_RESUME;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "./lexer.ll"
return KW_ABORT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "./lexer.ll"
return KW_STEP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "./lexer.ll"
return KW_WHERE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "./lexer.ll"
return KW_DUMP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "./lexer.ll"
return KW_BREAK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "./lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "./lexer.ll"
return KW_PATH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "./lexer.ll"
return KW_LABEL;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "./lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "./lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "./lexer.ll"
return KW_RAT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "./lexer.ll"
return KW_TEST;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "./lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "./lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "./lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 243 "./lexer.ll"
return *yytext;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 244 "./lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 249 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 263 "./lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 267 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 268 "./lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 269 "./lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 270 "./lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 274 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 278 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 283 "./lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 118:
YY_RULE_SETUP
#line 295 "./lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "./lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "./lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "./lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "./lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "./lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "./lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "./lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "./lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "./lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "./lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "./lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "./lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "./lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "./lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "./lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "./lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "./lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "./lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "./lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "./lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "./lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "./lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "./lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "./lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "./lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "./lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "./lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "./lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "./lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "./lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "./lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "./lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "./lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "./lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "./lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "./lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "./lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "./lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "./lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "./lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "./lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "./lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "./lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "./lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 340 "./lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 341 "./lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 342 "./lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 343 "./lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 344 "./lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 345 "./lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 346 "./lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 170:
YY_RULE_SETUP
#line 353 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 359 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 365 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 371 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 377 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 383 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 389 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 395 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 401 "./lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 410 "./lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 414 "./lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 425 "./lexer.ll"
STORE
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 426 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 437 "./lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 448 "./lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 185:
YY_RULE_SETUP
#line 457 "./lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 465 "./lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 187:
YY_RULE_SETUP
#line 473 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 477 "./lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 481 "./lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 190:
YY_RULE_SETUP
#line 493 "./lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "./lexer.ll"
accumulator += ' ';
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "./lexer.ll"
accumulator += '"';
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 501 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 502 "./lexer.ll"
accumulator += '\\';
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 503 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 504 "./lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 513 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 198:
YY_RULE_SETUP
#line 522 "./lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 528 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 529 "./lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 201:
YY_RULE_SETUP
#line 538 "./lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 543 "./lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 203:
YY_RULE_SETUP
#line 552 "./lexer.ll"
accumulator += yytext;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 553 "./lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 558 "./lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 572 "./lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 576 "./lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 580 "./lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 584 "./lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 587 "./lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 593 "./lexer.ll"
;
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 594 "./lexer.ll"
++lineNumber;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 595 "./lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 600 "./lexer.ll"
ECHO;
	YY_BREAK
#line 4541 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1310 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1310 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1309);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 600 "./lexer.ll"



#include "lexerAux.cc"

